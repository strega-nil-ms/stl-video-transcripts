WEBVTT

NOTE duration:"01:32:30"

NOTE recognizability:0.782

NOTE language:en-us

NOTE Confidence: 0.813953233636364

00:00:10.280 --> 00:00:12.146
Hi, and welcome back to another

NOTE Confidence: 0.813953233636364

00:00:12.146 --> 00:00:13.860
VC libraries Open code review.

NOTE Confidence: 0.813953233636364

00:00:13.860 --> 00:00:14.859
I'm Stephanie Lawhead,

NOTE Confidence: 0.813953233636364

00:00:14.859 --> 00:00:16.857
a visual C plus libraries developer.

NOTE Confidence: 0.813953233636364

00:00:16.860 --> 00:00:20.692
And today we'll be looking at PR 3035,

NOTE Confidence: 0.813953233636364

00:00:20.692 --> 00:00:23.728
adding stood view zip from a

NOTE Confidence: 0.813953233636364

00:00:23.728 --> 00:00:25.820
new contributor, Tyler Brawl.

NOTE Confidence: 0.813953233636364

00:00:25.820 --> 00:00:31.291
So this is 1000 line PR, 1311 lines,

NOTE Confidence: 0.813953233636364

00:00:31.291 --> 00:00:33.193
but it's entirely adding new code,

NOTE Confidence: 0.813953233636364

00:00:33.200 --> 00:00:34.492
not changing existing code.

NOTE Confidence: 0.813953233636364

00:00:34.492 --> 00:00:36.820
I'll be doing the final review of it,

NOTE Confidence: 0.813953233636364

00:00:36.820 --> 00:00:40.426
and Nicole has already reviewed this.

NOTE Confidence: 0.813953233636364

00:00:40.430 --> 00:00:41.474
For correctness. Uh.

NOTE Confidence: 0.813953233636364

00:00:41.474 --> 00:00:44.170
Now, I have not looked deeply into um,

NOTE Confidence: 0.813953233636364

00:00:44.170 --> 00:00:45.259
stood zip. Uh.

NOTE Confidence: 0.813953233636364

00:00:45.259 --> 00:00:47.437
The committee has been adding all

NOTE Confidence: 0.813953233636364

00:00:47.437 --> 00:00:49.590
this range of stuff to C + 23,

NOTE Confidence: 0.813953233636364

00:00:49.590 --> 00:00:51.790
so I'm vaguely aware of what it does,

NOTE Confidence: 0.813953233636364

00:00:51.790 --> 00:00:53.596
but I'll be looking at the

NOTE Confidence: 0.813953233636364

00:00:53.596 --> 00:00:55.170
standards for the first time.

NOTE Confidence: 0.813953233636364

00:00:55.170 --> 00:00:56.628
So this describes.

NOTE Confidence: 0.813953233636364

00:00:56.628 --> 00:00:58.572
This nice detailed description

NOTE Confidence: 0.813953233636364

00:00:58.572 --> 00:01:00.790
that Tyler has provided.

NOTE Confidence: 0.813953233636364

00:01:00.790 --> 00:01:03.015
Explains that this is a

NOTE Confidence: 0.813953233636364

00:01:03.015 --> 00:01:04.350
partial feature implementation,

NOTE Confidence: 0.813953233636364

00:01:04.350 --> 00:01:06.505
so it's not completely implementing

NOTE Confidence: 0.813953233636364

00:01:06.505 --> 00:01:08.750
the paper, but only stood view. Zip.

NOTE Confidence: 0.813953233636364

00:01:08.750 --> 00:01:10.325
The paper also adds a stood view.

NOTE Confidence: 0.813953233636364

00:01:10.330 --> 00:01:14.145
Transform, which we won't be seeing today,

NOTE Confidence: 0.813953233636364

00:01:14.150 --> 00:01:17.690
but it may come in a future follow up PR.

NOTE Confidence: 0.813953233636364

00:01:17.690 --> 00:01:19.834
So let me open up the tracking issue.

NOTE Confidence: 0.813953233636364

00:01:19.840 --> 00:01:21.226
Because this is a partial PR.

NOTE Confidence: 0.813953233636364

00:01:21.230 --> 00:01:23.134
This means that we will not be

NOTE Confidence: 0.813953233636364

00:01:23.134 --> 00:01:24.610
getting the feature test macro.

NOTE Confidence: 0.813953233636364

00:01:24.610 --> 00:01:27.137
Because our policy is that we only

NOTE Confidence: 0.813953233636364

00:01:27.137 --> 00:01:29.744
define a feature test macro when a

NOTE Confidence: 0.813953233636364

00:01:29.744 --> 00:01:31.910
feature is complete and non buggy

NOTE Confidence: 0.813953233636364

00:01:31.989 --> 00:01:34.257
enough to actually be usable on,

NOTE Confidence: 0.813953233636364

00:01:34.260 --> 00:01:35.392
there's something as locked

NOTE Confidence: 0.813953233636364

00:01:35.392 --> 00:01:36.807
by like severe compiler bugs.

NOTE Confidence: 0.813953233636364

00:01:36.810 --> 00:01:37.482
For example,

NOTE Confidence: 0.813953233636364

00:01:37.482 --> 00:01:39.162
we will refrain from defining

NOTE Confidence: 0.813953233636364

00:01:39.162 --> 00:01:40.919
the feature test macro until.

NOTE Confidence: 0.813953233636364

00:01:40.920 --> 00:01:41.872
Um, it is useful,

NOTE Confidence: 0.813953233636364

00:01:41.872 --> 00:01:43.580
so we won't be having this bit.

NOTE Confidence: 0.813953233636364

00:01:43.580 --> 00:01:44.061
Um,

NOTE Confidence: 0.813953233636364

00:01:44.061 --> 00:01:46.947
there are a couple of LWG

NOTE Confidence: 0.813953233636364

00:01:46.947 --> 00:01:49.000
issues that affect this.

NOTE Confidence: 0.813953233636364

00:01:49.000 --> 00:01:50.098
One is implemented.

NOTE Confidence: 0.813953233636364

00:01:50.098 --> 00:01:51.196
1 is not,

NOTE Confidence: 0.813953233636364

00:01:51.200 --> 00:01:53.560
because it affects zip transform,

NOTE Confidence: 0.813953233636364

00:01:53.560 --> 00:01:56.500
and there's a couple overlapping patch

NOTE Confidence: 0.813953233636364

00:01:56.500 --> 00:01:59.359
papers that do modify stood zip.

NOTE Confidence: 0.813953233636364

00:01:59.360 --> 00:02:00.500
So we're going to need to

NOTE Confidence: 0.813953233636364

00:02:00.500 --> 00:02:01.580
open up all this stuff.

NOTE Confidence: 0.813953233636364

00:02:01.580 --> 00:02:04.760
This is the primary paper.

NOTE Confidence: 0.813953233636364

00:02:04.760 --> 00:02:07.301
And then the library issues we need

NOTE Confidence: 0.813953233636364

00:02:07.301 --> 00:02:10.527
to look at are this one and this one.

NOTE Confidence: 0.813953233636364

00:02:10.530 --> 00:02:10.902
OK.

NOTE Confidence: 0.813953233636364

00:02:10.902 --> 00:02:13.878
And this has all been added to the

NOTE Confidence: 0.813953233636364

00:02:13.878 --> 00:02:16.111
latest working paper and 4917,

NOTE Confidence: 0.813953233636364

00:02:16.111 --> 00:02:17.966
so I'll actually probably be

NOTE Confidence: 0.813953233636364

00:02:17.966 --> 00:02:20.269
referring to that because the code

NOTE Confidence: 0.813953233636364

00:02:20.269 --> 00:02:22.531
has been passed extensively or the

NOTE Confidence: 0.813953233636364

00:02:22.531 --> 00:02:24.898
specification has been patched extensively.

NOTE Confidence: 0.813953233636364

00:02:24.900 --> 00:02:25.175
OK,

NOTE Confidence: 0.813953233636364

00:02:25.175 --> 00:02:26.825
so this should be easier because

NOTE Confidence: 0.813953233636364

00:02:26.825 --> 00:02:28.159
it's mostly adding new wording

NOTE Confidence: 0.813953233636364

00:02:28.159 --> 00:02:29.734
so we don't need to jump around

NOTE Confidence: 0.813953233636364

00:02:29.734 --> 00:02:31.320
a bunch of different places.

NOTE Confidence: 0.731112361666667

00:02:33.620 --> 00:02:35.498
So, and I think with zip,

NOTE Confidence: 0.731112361666667

00:02:35.500 --> 00:02:37.246
the one that we've already gotten,

NOTE Confidence: 0.731112361666667

00:02:37.250 --> 00:02:39.180
um, this seems really familiar.

NOTE Confidence: 0.731112361666667

00:02:39.180 --> 00:02:42.174
Um, the tuple and pair and

NOTE Confidence: 0.731112361666667

00:02:42.174 --> 00:02:44.170
vectorable reference changes from.

NOTE Confidence: 0.731112361666667

00:02:44.170 --> 00:02:45.610
Or was that another paper?

NOTE Confidence: 0.731112361666667

00:02:45.610 --> 00:02:47.308
I think we already got those.

NOTE Confidence: 0.731112361666667

00:02:47.310 --> 00:02:49.158
OK we do already have the tuple

NOTE Confidence: 0.731112361666667

00:02:49.158 --> 00:02:50.250
impaired changes from this.

NOTE Confidence: 0.731112361666667

00:02:50.250 --> 00:02:54.006
We think Ajang submitted that change.

NOTE Confidence: 0.731112361666667

00:02:54.010 --> 00:02:54.726
That's right.

NOTE Confidence: 0.731112361666667

00:02:54.726 --> 00:02:57.232
Yeah, so we we merged that a

NOTE Confidence: 0.731112361666667

00:02:57.232 --> 00:02:58.522
while ago trying to load all

NOTE Confidence: 0.731112361666667

00:02:58.522 --> 00:02:59.470
this state back in my head.

NOTE Confidence: 0.731112361666667

00:02:59.470 --> 00:03:01.185
The change log I'm explains all this.

NOTE Confidence: 0.731112361666667

00:03:01.190 --> 00:03:03.269
I think if we search for zip,

NOTE Confidence: 0.731112361666667

00:03:03.270 --> 00:03:04.110
yeah here we go.

NOTE Confidence: 0.731112361666667

00:03:04.110 --> 00:03:04.530
It's shipped,

NOTE Confidence: 0.731112361666667

00:03:04.530 --> 00:03:06.295
it's in the current production

NOTE Confidence: 0.731112361666667

00:03:06.295 --> 00:03:07.246
release VS 2022173.

NOTE Confidence: 0.731112361666667

00:03:07.246 --> 00:03:08.736
So essentially the first part

NOTE Confidence: 0.731112361666667

00:03:08.736 --> 00:03:10.805
of the paper is implemented the

NOTE Confidence: 0.731112361666667

00:03:10.805 --> 00:03:12.285
tuple pair injectable reference

NOTE Confidence: 0.731112361666667

00:03:12.285 --> 00:03:14.399
that affects the existing library.

NOTE Confidence: 0.731112361666667

00:03:14.400 --> 00:03:16.052
Um, so this will be the second

NOTE Confidence: 0.731112361666667

00:03:16.052 --> 00:03:17.500
of at least three parts.

NOTE Confidence: 0.731112361666667

00:03:17.500 --> 00:03:19.780
Um, so here's the zip paper.

NOTE Confidence: 0.731112361666667

00:03:19.780 --> 00:03:23.996
So tuple pair, all this stuff is done.

NOTE Confidence: 0.731112361666667

00:03:24.000 --> 00:03:31.160
Like go down. OK, so I think we have this.

NOTE Confidence: 0.731112361666667

00:03:31.160 --> 00:03:34.706
Is explanations to integer class type.

NOTE Confidence: 0.731112361666667

00:03:34.710 --> 00:03:35.775
Common type stuff.

NOTE Confidence: 0.731112361666667

00:03:35.775 --> 00:03:39.650
OK, so the new zip stuff is in range dot zip.

NOTE Confidence: 0.731112361666667

00:03:39.650 --> 00:03:41.150
That's a stable name.

NOTE Confidence: 0.731112361666667

00:03:41.150 --> 00:03:43.400
We're not going to be looking

NOTE Confidence: 0.731112361666667

00:03:43.478 --> 00:03:44.729
at zip transform.

NOTE Confidence: 0.731112361666667

00:03:44.730 --> 00:03:46.560
And then there's also an

NOTE Confidence: 0.731112361666667

00:03:46.560 --> 00:03:48.024
adjacent and adjacent transform.

NOTE Confidence: 0.731112361666667

00:03:48.030 --> 00:03:53.593
Um, do we have this? I think no.

NOTE Confidence: 0.731112361666667

00:03:53.593 --> 00:03:55.317
According to this description,

NOTE Confidence: 0.731112361666667

00:03:55.320 --> 00:03:57.608
does this mention Jason?

NOTE Confidence: 0.731112361666667

00:03:57.608 --> 00:03:59.976
No. No. Jason no. OK.

NOTE Confidence: 0.731112361666667

00:03:59.976 --> 00:04:02.670
So this is purely just had.

NOTE Confidence: 0.731112361666667

00:04:02.670 --> 00:04:05.000
Yeah, we don't have that form

NOTE Confidence: 0.731112361666667

00:04:05.000 --> 00:04:06.850
or adjacent or Jason form.

NOTE Confidence: 0.731112361666667

00:04:06.850 --> 00:04:07.170
OK.

NOTE Confidence: 0.731112361666667

00:04:07.170 --> 00:04:09.730
So we may be seeing several follow-up years.

NOTE Confidence: 0.731112361666667

00:04:09.730 --> 00:04:10.294
This is good.

NOTE Confidence: 0.731112361666667

00:04:10.294 --> 00:04:11.422
It means there's more bite size.

NOTE Confidence: 0.731112361666667

00:04:11.430 --> 00:04:14.294
We only have to look at one section

NOTE Confidence: 0.731112361666667

00:04:14.294 --> 00:04:15.010
worth rewarding.

NOTE Confidence: 0.731112361666667

00:04:15.010 --> 00:04:15.303
OK.

NOTE Confidence: 0.731112361666667

00:04:15.303 --> 00:04:17.647
I'm just checking here to see if there's

NOTE Confidence: 0.731112361666667

00:04:17.647 --> 00:04:20.045
other edits that range zipped it outside.

NOTE Confidence: 0.731112361666667

00:04:20.050 --> 00:04:24.586
I'm almost certain that it's not.

NOTE Confidence: 0.731112361666667

00:04:24.590 --> 00:04:26.102
Lots of effects equivalent

NOTE Confidence: 0.731112361666667

00:04:26.102 --> 00:04:27.614
to stuff a Sentinel.

NOTE Confidence: 0.731112361666667

00:04:27.620 --> 00:04:27.893
OK,

NOTE Confidence: 0.731112361666667

00:04:27.893 --> 00:04:29.804
so now I'm going to close this

NOTE Confidence: 0.731112361666667

00:04:29.804 --> 00:04:31.632
paper and I'm just going to

NOTE Confidence: 0.731112361666667

00:04:31.632 --> 00:04:33.456
look at what's in the standard.

NOTE Confidence: 0.731112361666667

00:04:33.460 --> 00:04:35.548
Let me look at LWG issue.

NOTE Confidence: 0.731112361666667

00:04:35.550 --> 00:04:37.644
This is also updating a spaceship

NOTE Confidence: 0.731112361666667

00:04:37.644 --> 00:04:40.229
standard ease again in rain zip iterator.

NOTE Confidence: 0.731112361666667

00:04:40.230 --> 00:04:40.450
OK,

NOTE Confidence: 0.731112361666667

00:04:40.450 --> 00:04:41.550
so this is already been

NOTE Confidence: 0.731112361666667

00:04:41.550 --> 00:04:42.740
applied to the working paper.

NOTE Confidence: 0.816028761666667

00:04:44.790 --> 00:04:49.578
And this is the compatibility paper.

NOTE Confidence: 0.816028761666667

00:04:49.580 --> 00:04:55.160
Scroll down. Wording to this effect.

NOTE Confidence: 0.816028761666667

00:04:55.160 --> 00:04:58.114
OK, so tuple this is already been.

NOTE Confidence: 0.816028761666667

00:04:58.120 --> 00:05:00.730
Taking care of tuple like.

NOTE Confidence: 0.918737423333333

00:05:03.110 --> 00:05:05.768
Yep, Yep, Yep.

NOTE Confidence: 0.918737423333333

00:05:05.770 --> 00:05:09.040
Infection with two bowl quality for

NOTE Confidence: 0.918737423333333

00:05:09.040 --> 00:05:11.063
tuple common reference specialization.

NOTE Confidence: 0.918737423333333

00:05:11.063 --> 00:05:14.500
I can remember if we got this.

NOTE Confidence: 0.918737423333333

00:05:14.500 --> 00:05:17.566
Hair stuff let me scroll faster.

NOTE Confidence: 0.918737423333333

00:05:17.570 --> 00:05:20.798
This also edits zip transform no.

NOTE Confidence: 0.918737423333333

00:05:20.800 --> 00:05:22.670
At least not up there.

NOTE Confidence: 0.918737423333333

00:05:22.670 --> 00:05:26.160
Sensitive containers.

NOTE Confidence: 0.918737423333333

00:05:26.160 --> 00:05:30.417
OK, did get rid of a pair like concept.

NOTE Confidence: 0.918737423333333

00:05:30.420 --> 00:05:31.924
They've modified elements view.

NOTE Confidence: 0.918737423333333

00:05:31.924 --> 00:05:34.020
OK, so did change zip view.

NOTE Confidence: 0.918737423333333

00:05:34.020 --> 00:05:36.060
OK, so looking at the current

NOTE Confidence: 0.918737423333333

00:05:36.060 --> 00:05:38.260
working paper will give us all that.

NOTE Confidence: 0.918737423333333

00:05:38.260 --> 00:05:39.354
OK, great.

NOTE Confidence: 0.918737423333333

00:05:39.354 --> 00:05:42.636
So now let's look for ranges.

NOTE Confidence: 0.918737423333333

00:05:42.640 --> 00:05:43.350
Zip.

NOTE Confidence: 0.632907161428571

00:05:46.830 --> 00:05:49.590
Did I search long stable name

NOTE Confidence: 0.632907161428571

00:05:49.590 --> 00:05:51.780
probably. Arranges library.

NOTE Confidence: 0.79314171

00:05:55.720 --> 00:05:59.032
OK here we go zip view range dot zip.

NOTE Confidence: 0.79314171

00:05:59.040 --> 00:06:04.630
Silly me. OK. And OK,

NOTE Confidence: 0.79314171

00:06:04.630 --> 00:06:07.510
we got everything here.

NOTE Confidence: 0.79314171

00:06:07.510 --> 00:06:10.798
OK, so let's actually look at the code.

NOTE Confidence: 0.79314171

00:06:10.800 --> 00:06:13.338
And see if I can do side by side.

NOTE Confidence: 0.79314171

00:06:13.340 --> 00:06:15.708
Find. There we go.

NOTE Confidence: 0.842814538666667

00:06:23.570 --> 00:06:25.122
OK. So I want to minimize this real

NOTE Confidence: 0.842814538666667

00:06:25.122 --> 00:06:26.710
quick to see what we're looking at.

NOTE Confidence: 0.842814538666667

00:06:26.710 --> 00:06:29.743
OK, most of the changes are to ranges about

NOTE Confidence: 0.842814538666667

00:06:29.743 --> 00:06:32.737
500 lines changes to our central Internet

NOTE Confidence: 0.842814538666667

00:06:32.737 --> 00:06:35.829
arrivals core and then adding a new test.

NOTE Confidence: 0.842814538666667

00:06:35.830 --> 00:06:41.170
OK, I like to start easy, we're adding.

NOTE Confidence: 0.842814538666667

00:06:41.170 --> 00:06:42.754
One new test directory,

NOTE Confidence: 0.842814538666667

00:06:42.754 --> 00:06:44.662
correctly spelled, uh, the paper number.

NOTE Confidence: 0.842814538666667

00:06:44.662 --> 00:06:46.719
I'm just going to check the title

NOTE Confidence: 0.842814538666667

00:06:46.719 --> 00:06:48.669
here because I think that's right,

NOTE Confidence: 0.842814538666667

00:06:48.670 --> 00:06:51.355
2321R2232 one R2.

NOTE Confidence: 0.842814538666667

00:06:51.355 --> 00:06:53.785
This is the same paper number,

NOTE Confidence: 0.842814538666667

00:06:53.790 --> 00:06:56.670
but this one is view zip correctly sorted.

NOTE Confidence: 0.842814538666667

00:06:56.670 --> 00:06:57.942
Yep, that looks good.

NOTE Confidence: 0.842814538666667

00:06:57.942 --> 00:07:01.045
So the test will be running in the internal

NOTE Confidence: 0.842814538666667

00:07:01.045 --> 00:07:04.510
harness or we got a configuration here?

NOTE Confidence: 0.842814538666667

00:07:04.510 --> 00:07:05.945
OK, so this one's a little custom.

NOTE Confidence: 0.842814538666667

00:07:05.950 --> 00:07:06.350
Interesting.

NOTE Confidence: 0.842814538666667

00:07:06.350 --> 00:07:09.481
Uh, we've got our banner, which is good.

NOTE Confidence: 0.842814538666667

00:07:09.481 --> 00:07:12.120
OK, so we've got a note here.

NOTE Confidence: 0.842814538666667

00:07:12.120 --> 00:07:14.622
Note zip view under score capital

NOTE Confidence: 0.842814538666667

00:07:14.622 --> 00:07:16.940
Iterator defines area overloads for ITER,

NOTE Confidence: 0.842814538666667

00:07:16.940 --> 00:07:18.216
swap and inter move,

NOTE Confidence: 0.842814538666667

00:07:18.216 --> 00:07:20.130
so the test fails to compile

NOTE Confidence: 0.842814538666667

00:07:20.199 --> 00:07:22.219
unless permissive minus is set,

NOTE Confidence: 0.842814538666667

00:07:22.220 --> 00:07:23.740
so it needs strict mode.

NOTE Confidence: 0.842814538666667

00:07:23.740 --> 00:07:25.798
This issue isn't unique to zip view,

NOTE Confidence: 0.842814538666667

00:07:25.800 --> 00:07:27.110
all the types whose iterators

NOTE Confidence: 0.842814538666667

00:07:27.110 --> 00:07:28.158
define overloads for these

NOTE Confidence: 0.842814538666667

00:07:28.158 --> 00:07:29.338
functions have this requirement.

NOTE Confidence: 0.842814538666667

00:07:29.340 --> 00:07:31.290
OK, so this is justifying why

NOTE Confidence: 0.842814538666667

00:07:31.290 --> 00:07:33.162
we've got the strict matrix

NOTE Confidence: 0.842814538666667

00:07:33.162 --> 00:07:35.190
strict meaning permissive minus.

NOTE Confidence: 0.842814538666667

00:07:35.190 --> 00:07:39.620
This is, uh, uh, something that um, uh.

NOTE Confidence: 0.842814538666667

00:07:39.620 --> 00:07:41.470
Ideally we could just enforce

NOTE Confidence: 0.842814538666667

00:07:41.470 --> 00:07:44.250
strictness all the time, but um,

NOTE Confidence: 0.842814538666667

00:07:44.250 --> 00:07:47.466
because some legacy programs don't

NOTE Confidence: 0.842814538666667

00:07:47.466 --> 00:07:49.930
exactly follow the standard.

NOTE Confidence: 0.842814538666667

00:07:49.930 --> 00:07:52.276
We are supporting the permissive mode,

NOTE Confidence: 0.842814538666667

00:07:52.280 --> 00:07:56.050
including in C + 20 and C + 23 mode,

NOTE Confidence: 0.842814538666667

00:07:56.050 --> 00:07:58.090
even though it would be nice

NOTE Confidence: 0.842814538666667

00:07:58.090 --> 00:07:59.750
if we didn't have to.

NOTE Confidence: 0.842814538666667

00:07:59.750 --> 00:08:03.485
And that's why most of our tests try to

NOTE Confidence: 0.842814538666667

00:08:03.485 --> 00:08:06.560
compile with the usual latest matrix,

NOTE Confidence: 0.842814538666667

00:08:06.560 --> 00:08:08.450
which means compile in 23 mode and

NOTE Confidence: 0.842814538666667

00:08:08.450 --> 00:08:10.820
throw in a permissive configuration.

NOTE Confidence: 0.842814538666667

00:08:10.820 --> 00:08:12.440
But if something absolutely

NOTE Confidence: 0.842814538666667

00:08:12.440 --> 00:08:13.655
cannot tolerate permissive,

NOTE Confidence: 0.842814538666667

00:08:13.660 --> 00:08:15.556
then we set the strict option and we

NOTE Confidence: 0.842814538666667

00:08:15.556 --> 00:08:17.579
have a matrix of options for that.

NOTE Confidence: 0.842814538666667

00:08:17.580 --> 00:08:18.760
So that's what this is.

NOTE Confidence: 0.842814538666667

00:08:18.760 --> 00:08:21.532
So we're going to use the strict

NOTE Confidence: 0.842814538666667

00:08:21.532 --> 00:08:23.490
and ranges requires concepts.

NOTE Confidence: 0.842814538666667

00:08:23.490 --> 00:08:25.709
Latest means it's a 23 feature matrix,

NOTE Confidence: 0.842814538666667

00:08:25.710 --> 00:08:27.918
that's a correct, and then we're crossing it.

NOTE Confidence: 0.842814538666667

00:08:27.920 --> 00:08:29.614
So we're actually run this test four

NOTE Confidence: 0.842814538666667

00:08:29.614 --> 00:08:32.212
different. Times with test input,

NOTE Confidence: 0.842814538666667

00:08:32.212 --> 00:08:34.339
bidirectional, forward and random.

NOTE Confidence: 0.842814538666667

00:08:34.339 --> 00:08:35.878
It's very interesting.

NOTE Confidence: 0.842814538666667

00:08:35.880 --> 00:08:38.960
OK, I'm going to see why we need this.

NOTE Confidence: 0.842814538666667

00:08:38.960 --> 00:08:39.980
I'll remember that.

NOTE Confidence: 0.842814538666667

00:08:39.980 --> 00:08:41.728
But this is good.

NOTE Confidence: 0.842814538666667

00:08:41.730 --> 00:08:46.464
OK, I'm going to briefly look at the test.

NOTE Confidence: 0.842814538666667

00:08:46.470 --> 00:08:48.348
OK, good. We got our banner.

NOTE Confidence: 0.842814538666667

00:08:48.350 --> 00:08:50.289
OK, we'll see what this test does.

NOTE Confidence: 0.842814538666667

00:08:50.290 --> 00:08:52.036
I'll come back.

NOTE Confidence: 0.842814538666667

00:08:52.036 --> 00:08:55.492
This is definitely unnecessary here also

NOTE Confidence: 0.842814538666667

00:08:55.492 --> 00:08:58.744
because we're silencing that cling warning.

NOTE Confidence: 0.842814538666667

00:08:58.750 --> 00:09:01.590
OK, so let's work our way towards the

NOTE Confidence: 0.842814538666667

00:09:01.590 --> 00:09:04.010
product code center internal header.

NOTE Confidence: 0.842814538666667

00:09:04.010 --> 00:09:10.390
So here's a citation for the 2165R4.

NOTE Confidence: 0.842814538666667

00:09:10.390 --> 00:09:11.239
Now this one,

NOTE Confidence: 0.842814538666667

00:09:11.239 --> 00:09:12.937
this was just a patch paper.

NOTE Confidence: 0.842814538666667

00:09:12.940 --> 00:09:14.206
Did we have a top level?

NOTE Confidence: 0.842814538666667

00:09:14.210 --> 00:09:16.778
Did we have a tracking issue for this?

NOTE Confidence: 0.842814538666667

00:09:16.780 --> 00:09:17.530
C.

NOTE Confidence: 0.85644437

00:09:20.650 --> 00:09:22.770
Half the half the work here is just,

NOTE Confidence: 0.85644437

00:09:22.770 --> 00:09:24.434
um, information management, OK.

NOTE Confidence: 0.85644437

00:09:24.434 --> 00:09:26.930
So we actually do have a

NOTE Confidence: 0.85644437

00:09:27.006 --> 00:09:28.790
tracking issue for this.

NOTE Confidence: 0.85644437

00:09:28.790 --> 00:09:30.113
So we do consider a top level

NOTE Confidence: 0.85644437

00:09:30.113 --> 00:09:31.581
feature and I guess we're

NOTE Confidence: 0.85644437

00:09:31.581 --> 00:09:32.437
implementing incrementally.

NOTE Confidence: 0.857205789090909

00:09:34.970 --> 00:09:36.884
OK, so this is the correct

NOTE Confidence: 0.857205789090909

00:09:36.884 --> 00:09:38.860
cleaned up name and spelling.

NOTE Confidence: 0.857205789090909

00:09:38.860 --> 00:09:41.080
Yep. Is it correctly sorted to

NOTE Confidence: 0.710133815769231

00:09:43.430 --> 00:09:44.518
1321652 and six six?

NOTE Confidence: 0.710133815769231

00:09:44.518 --> 00:09:45.878
Yes it is compatibility between

NOTE Confidence: 0.710133815769231

00:09:45.878 --> 00:09:47.230
two parent black objects.

NOTE Confidence: 0.710133815769231

00:09:47.230 --> 00:09:48.850
And then we have a explanation.

NOTE Confidence: 0.710133815769231

00:09:48.850 --> 00:09:51.100
Changes to view zip only. OK, good.

NOTE Confidence: 0.710133815769231

00:09:51.100 --> 00:09:53.512
And then zip paper, previously we

NOTE Confidence: 0.710133815769231

00:09:53.512 --> 00:09:55.864
said it's pair tuple and vector bool.

NOTE Confidence: 0.710133815769231

00:09:55.870 --> 00:09:57.312
And now we're going to flip it

NOTE Confidence: 0.710133815769231

00:09:57.312 --> 00:09:58.659
and say what we're missing.

NOTE Confidence: 0.710133815769231

00:09:58.660 --> 00:10:00.564
Missing view. Zip transform.

NOTE Confidence: 0.710133815769231

00:10:00.564 --> 00:10:03.420
Views adjacent and views adjacent transform.

NOTE Confidence: 0.710133815769231

00:10:03.420 --> 00:10:04.810
Yep, 3 views. That's right.

NOTE Confidence: 0.710133815769231

00:10:04.810 --> 00:10:06.178
We've got that Oxford comment there.

NOTE Confidence: 0.710133815769231

00:10:06.180 --> 00:10:06.537
Perfect.

NOTE Confidence: 0.710133815769231

00:10:06.537 --> 00:10:09.036
We're not defining feature just macro yet.

NOTE Confidence: 0.710133815769231

00:10:09.040 --> 00:10:10.335
So no change to the feature test,

NOTE Confidence: 0.710133815769231

00:10:10.340 --> 00:10:12.450
macro test.

NOTE Confidence: 0.710133815769231

00:10:12.450 --> 00:10:13.064
OK, perfect.

NOTE Confidence: 0.710133815769231

00:10:13.064 --> 00:10:15.213
So let's look at the product code.

NOTE Confidence: 0.79719858

00:10:19.050 --> 00:10:24.170
OK. Ranges is including algorithm.

NOTE Confidence: 0.79719858

00:10:24.170 --> 00:10:28.050
This algorithm include ranges. Let's check.

NOTE Confidence: 0.82392323

00:10:33.170 --> 00:10:39.410
Algorithm. Algorithm includes X memory OK.

NOTE Confidence: 0.82392323

00:10:39.410 --> 00:10:42.924
Don't think that means it includes ranges.

NOTE Confidence: 0.82392323

00:10:42.930 --> 00:10:45.966
But let's check real quick ink.

NOTE Confidence: 0.764155691

00:10:48.270 --> 00:10:49.900
OK, ranges is mostly a

NOTE Confidence: 0.764155691

00:10:49.900 --> 00:10:51.530
leaf header in the STL.

NOTE Confidence: 0.764155691

00:10:51.530 --> 00:10:55.506
Um, the stack adapter and the queue adapter,

NOTE Confidence: 0.764155691

00:10:55.510 --> 00:10:57.365
which are definitely leaves for

NOTE Confidence: 0.764155691

00:10:57.365 --> 00:10:59.247
the purposes of algorithm drag

NOTE Confidence: 0.764155691

00:10:59.247 --> 00:11:01.629
it in and our internal stuff.

NOTE Confidence: 0.764155691

00:11:01.630 --> 00:11:04.190
Nothing else includes ranges itself,

NOTE Confidence: 0.764155691

00:11:04.190 --> 00:11:09.062
so there's no circularity issue here. It is.

NOTE Confidence: 0.764155691

00:11:09.062 --> 00:11:11.438
Not great from a throughput perspective

NOTE Confidence: 0.764155691

00:11:11.438 --> 00:11:14.136
that we got to drag an algorithm.

NOTE Confidence: 0.764155691

00:11:14.140 --> 00:11:17.093
Now in some sense it kind of it

NOTE Confidence: 0.764155691

00:11:17.093 --> 00:11:19.631
matters less because ranges is already

NOTE Confidence: 0.764155691

00:11:19.631 --> 00:11:22.856
quite big and the C + 23 modules

NOTE Confidence: 0.764155691

00:11:22.856 --> 00:11:25.024
which we just implemented make this

NOTE Confidence: 0.764155691

00:11:25.024 --> 00:11:27.016
issue moot because it's so fast.

NOTE Confidence: 0.764155691

00:11:27.020 --> 00:11:28.958
But in the classic header world,

NOTE Confidence: 0.764155691

00:11:28.960 --> 00:11:30.388
there is a throughput impact of dragging.

NOTE Confidence: 0.764155691

00:11:30.390 --> 00:11:32.230
In all the algorithm algorithm

NOTE Confidence: 0.764155691

00:11:32.230 --> 00:11:34.835
is 200 something kilobytes.

NOTE Confidence: 0.764155691

00:11:34.835 --> 00:11:37.070
It's quite large.

NOTE Confidence: 0.764155691

00:11:37.070 --> 00:11:38.638
I'm assuming OK actually,

NOTE Confidence: 0.764155691

00:11:38.638 --> 00:11:41.470
I'm not sure why we need this.

NOTE Confidence: 0.764155691

00:11:41.470 --> 00:11:43.210
Uh, what are we calling here?

NOTE Confidence: 0.641088334615385

00:11:46.230 --> 00:11:47.394
Be stood something,

NOTE Confidence: 0.641088334615385

00:11:47.394 --> 00:11:48.946
something student focus from

NOTE Confidence: 0.641088334615385

00:11:48.946 --> 00:11:50.890
type traits that can't be it.

NOTE Confidence: 0.641088334615385

00:11:50.890 --> 00:11:52.278
Same with stud apply.

NOTE Confidence: 0.8089457125

00:11:55.240 --> 00:11:58.216
What does it need? Yeah.

NOTE Confidence: 0.8089457125

00:11:58.216 --> 00:12:00.240
Deco, Val. Yeah. Yeah.

NOTE Confidence: 0.8089457125

00:12:00.240 --> 00:12:03.420
That's all we got yet.

NOTE Confidence: 0.8089457125

00:12:03.420 --> 00:12:05.485
I don't see any use of algorithm

NOTE Confidence: 0.8089457125

00:12:05.485 --> 00:12:07.481
assuming that it would be a call

NOTE Confidence: 0.8089457125

00:12:07.481 --> 00:12:10.036
to a non ugly function. Just apply.

NOTE Confidence: 0.8089457125

00:12:10.036 --> 00:12:12.528
That's all tuple stuff.

NOTE Confidence: 0.8089457125

00:12:12.530 --> 00:12:14.900
I don't think this is necessary,

NOTE Confidence: 0.8089457125

00:12:14.900 --> 00:12:16.286
or if it is, I'm missing something.

NOTE Confidence: 0.867343618571429

00:12:20.550 --> 00:12:22.139
We have it. We have test coverage.

NOTE Confidence: 0.867343618571429

00:12:22.140 --> 00:12:23.948
We have a test called include each other

NOTE Confidence: 0.867343618571429

00:12:23.948 --> 00:12:25.553
alone that we've had running for over

NOTE Confidence: 0.867343618571429

00:12:25.553 --> 00:12:27.402
a decade that make sure we can include

NOTE Confidence: 0.867343618571429

00:12:27.402 --> 00:12:29.012
each header from the STL in isolation

NOTE Confidence: 0.867343618571429

00:12:29.020 --> 00:12:31.276
so we can't accidentally use stuff,

NOTE Confidence: 0.867343618571429

00:12:31.280 --> 00:12:33.674
at least in a way that explodes

NOTE Confidence: 0.867343618571429

00:12:33.674 --> 00:12:35.412
if you never call anything.

NOTE Confidence: 0.867343618571429

00:12:35.412 --> 00:12:38.260
So I'm not too worried about snipping out

NOTE Confidence: 0.867343618571429

00:12:38.333 --> 00:12:41.007
and include that we're actually are using,

NOTE Confidence: 0.867343618571429

00:12:41.010 --> 00:12:43.173
but it sure doesn't look from this

NOTE Confidence: 0.867343618571429

00:12:43.173 --> 00:12:45.100
brief scan like we're using it.

NOTE Confidence: 0.867343618571429

00:12:45.100 --> 00:12:46.794
I'm going to recommend that we or

NOTE Confidence: 0.867343618571429

00:12:46.794 --> 00:12:48.559
I'm gonna ask why we're using it.

NOTE Confidence: 0.867343618571429

00:12:48.560 --> 00:12:51.000
Let's see, did Nicole ask?

NOTE Confidence: 0.867343618571429

00:12:51.000 --> 00:12:54.096
Maybe they thought they ohh yeah this did.

NOTE Confidence: 0.867343618571429

00:12:54.100 --> 00:12:55.374
This did come up. Yeah it was.

NOTE Confidence: 0.867343618571429

00:12:55.380 --> 00:12:56.388
Range is Max.

NOTE Confidence: 0.672471975

00:12:58.890 --> 00:13:02.390
Ah, that's interesting. Um.

NOTE Confidence: 0.672471975

00:13:02.390 --> 00:13:05.926
Do we need the ranges version of Max?

NOTE Confidence: 0.672471975

00:13:05.930 --> 00:13:08.630
Yeah, our contributor here mentioned that.

NOTE Confidence: 0.672471975

00:13:08.630 --> 00:13:09.886
Yeah, I think this is still an issue.

NOTE Confidence: 0.672471975

00:13:09.890 --> 00:13:11.507
I I don't like the included algorithm,

NOTE Confidence: 0.672471975

00:13:11.510 --> 00:13:15.056
um, just because it's so big.

NOTE Confidence: 0.672471975

00:13:15.060 --> 00:13:19.120
OK, so where's the use of Max?

NOTE Confidence: 0.672471975

00:13:19.120 --> 00:13:20.975
Now it would be parenthesized

NOTE Confidence: 0.672471975

00:13:20.975 --> 00:13:22.088
because of horribleness.

NOTE Confidence: 0.665381543333333

00:13:24.910 --> 00:13:27.886
We're maxing on an initializer list.

NOTE Confidence: 0.732397441428571

00:13:31.320 --> 00:13:33.119
And I'm assuming min is the UM.

NOTE Confidence: 0.740895074

00:13:38.770 --> 00:13:43.278
OK, 2 uses of men. This one is forming

NOTE Confidence: 0.740895074

00:13:43.278 --> 00:13:45.884
an initializer list. Yeah, that's.

NOTE Confidence: 0.740895074

00:13:45.884 --> 00:13:48.544
Those are pretty small algorithms.

NOTE Confidence: 0.740895074

00:13:48.550 --> 00:13:50.022
I mean relatively speaking,

NOTE Confidence: 0.740895074

00:13:50.022 --> 00:13:52.230
do we only define them in

NOTE Confidence: 0.740895074

00:13:52.305 --> 00:13:54.597
algorithm and not like X utility?

NOTE Confidence: 0.740895074

00:13:54.600 --> 00:13:55.680
Uh, this is gonna be.

NOTE Confidence: 0.740895074

00:13:55.680 --> 00:13:58.008
It's probably the case that ranges Max is

NOTE Confidence: 0.740895074

00:13:58.008 --> 00:14:00.236
only defined in the algorithm because we

NOTE Confidence: 0.740895074

00:14:00.236 --> 00:14:02.260
haven't needed it anywhere else before.

NOTE Confidence: 0.740895074

00:14:02.260 --> 00:14:04.472
Right, the range is 1 by wondering

NOTE Confidence: 0.740895074

00:14:04.472 --> 00:14:06.518
if we could use classic uh,

NOTE Confidence: 0.740895074

00:14:06.520 --> 00:14:08.160
that element one is not.

NOTE Confidence: 0.740895074

00:14:08.160 --> 00:14:09.016
I certainly think so.

NOTE Confidence: 0.740895074

00:14:09.016 --> 00:14:11.040
It looks like these are just different types,

NOTE Confidence: 0.740895074

00:14:11.040 --> 00:14:14.770
so they're integer class types.

NOTE Confidence: 0.740895074

00:14:14.770 --> 00:14:17.980
Or sorry integer like types.

NOTE Confidence: 0.740895074

00:14:17.980 --> 00:14:20.248
They're integer like types so they

NOTE Confidence: 0.740895074

00:14:20.248 --> 00:14:23.029
should work OK with stood minute Max.

NOTE Confidence: 0.740895074

00:14:23.030 --> 00:14:24.142
Let's see, we've got.

NOTE Confidence: 0.740895074

00:14:24.142 --> 00:14:25.596
OK, these are the two art forms.

NOTE Confidence: 0.740895074

00:14:25.600 --> 00:14:27.748
We're not using a projection, right?

NOTE Confidence: 0.740895074

00:14:27.748 --> 00:14:30.100
It's implemented an algorithm.

NOTE Confidence: 0.740895074

00:14:30.100 --> 00:14:32.530
So even if we call classic.

NOTE Confidence: 0.740895074

00:14:32.530 --> 00:14:34.010
We haven't needed them before,

NOTE Confidence: 0.740895074

00:14:34.010 --> 00:14:37.178
but could we promote them as the question?

NOTE Confidence: 0.740895074

00:14:37.180 --> 00:14:38.744
Ah. Yeah, you're right.

NOTE Confidence: 0.740895074

00:14:38.744 --> 00:14:41.523
There's no need for a projection or

NOTE Confidence: 0.740895074

00:14:41.523 --> 00:14:43.677
any of that fancy powerful stuff.

NOTE Confidence: 0.740895074

00:14:43.680 --> 00:14:45.258
Where is Max?

NOTE Confidence: 0.740895074

00:14:45.258 --> 00:14:49.405
It's in parens because macros OK,

NOTE Confidence: 0.740895074

00:14:49.405 --> 00:14:55.680
this calls Max element. Ah.

NOTE Confidence: 0.740895074

00:14:55.680 --> 00:14:56.620
This is the classic one.

NOTE Confidence: 0.740895074

00:14:56.620 --> 00:14:59.940
It just happens to occur after the UM.

NOTE Confidence: 0.740895074

00:14:59.940 --> 00:15:00.831
Range of stuff.

NOTE Confidence: 0.740895074

00:15:00.831 --> 00:15:02.910
OK, so we call Max Solomon unchecked.

NOTE Confidence: 0.740895074

00:15:02.910 --> 00:15:03.771
Where's that live?

NOTE Confidence: 0.740895074

00:15:03.771 --> 00:15:04.919
That lives in algorithm.

NOTE Confidence: 0.79700894

00:15:07.600 --> 00:15:08.860
OK, it's it's not true.

NOTE Confidence: 0.79700894

00:15:08.860 --> 00:15:11.120
Ohh, it's nontrivial size because

NOTE Confidence: 0.79700894

00:15:11.120 --> 00:15:13.900
it also uses our vectorized thing,

NOTE Confidence: 0.79700894

00:15:13.900 --> 00:15:17.120
Alice Britannia's minmax optimization stuff.

NOTE Confidence: 0.79700894

00:15:17.120 --> 00:15:18.956
So this is larger than it used to be.

NOTE Confidence: 0.79700894

00:15:18.960 --> 00:15:20.012
I was mentally thinking,

NOTE Confidence: 0.79700894

00:15:20.012 --> 00:15:21.584
Oh yeah, that's a tiny algorithm,

NOTE Confidence: 0.79700894

00:15:21.584 --> 00:15:23.150
but it's actually gotten a lot

NOTE Confidence: 0.79700894

00:15:23.206 --> 00:15:24.730
fancier and a lot more powerful.

NOTE Confidence: 0.841962288

00:15:27.830 --> 00:15:30.170
But otherwise it doesn't really have

NOTE Confidence: 0.841962288

00:15:30.170 --> 00:15:31.964
a lot of dependencies. Interestingly,

NOTE Confidence: 0.841962288

00:15:31.964 --> 00:15:33.836
we would like to use the vectorized 1.

NOTE Confidence: 0.841962288

00:15:33.840 --> 00:15:36.110
Here is utility core header.

NOTE Confidence: 0.841962288

00:15:36.110 --> 00:15:37.298
It's not is it?

NOTE Confidence: 0.841962288

00:15:37.298 --> 00:15:40.050
Oht is ohh and we had that issue.

NOTE Confidence: 0.841962288

00:15:40.050 --> 00:15:41.690
All these complexities popping up.

NOTE Confidence: 0.841962288

00:15:41.690 --> 00:15:43.610
We've got this issue where.

NOTE Confidence: 0.841962288

00:15:43.610 --> 00:15:45.955
Um, core headers which we try not

NOTE Confidence: 0.841962288

00:15:45.955 --> 00:15:48.158
to have runtime dependencies. Uh.

NOTE Confidence: 0.841962288

00:15:48.158 --> 00:15:49.824
If we try to promote a vectorized

NOTE Confidence: 0.841962288

00:15:49.824 --> 00:15:51.619
algorithm to them, that doesn't work.

NOTE Confidence: 0.841962288

00:15:51.619 --> 00:15:53.677
We encountered this in another context.

NOTE Confidence: 0.841962288

00:15:53.680 --> 00:15:54.667
I don't think it was min Max.

NOTE Confidence: 0.841962288

00:15:54.670 --> 00:15:56.194
It was something else we were

NOTE Confidence: 0.841962288

00:15:56.194 --> 00:15:57.986
trying to drag up here and we

NOTE Confidence: 0.841962288

00:15:57.986 --> 00:15:59.757
ended up having to back that out.

NOTE Confidence: 0.841962288

00:15:59.760 --> 00:16:01.638
I think it was stood equal.

NOTE Confidence: 0.841962288

00:16:01.640 --> 00:16:03.896
Or something like that.

NOTE Confidence: 0.841962288

00:16:03.896 --> 00:16:06.716
So attempting to promote the.

NOTE Confidence: 0.841962288

00:16:06.720 --> 00:16:08.806
Min, Max. Even if it's just the

NOTE Confidence: 0.841962288

00:16:08.806 --> 00:16:10.399
classic initializer list one up here,

NOTE Confidence: 0.841962288

00:16:10.400 --> 00:16:14.366
um, that would be a problem.

NOTE Confidence: 0.841962288

00:16:14.370 --> 00:16:16.750
OK, so this is not it's not a trivial thing.

NOTE Confidence: 0.841962288

00:16:16.750 --> 00:16:18.740
Um.

NOTE Confidence: 0.841962288

00:16:18.740 --> 00:16:21.638
Dragging an algorithm is not awesome

NOTE Confidence: 0.841962288

00:16:21.638 --> 00:16:23.570
for performance for throughput.

NOTE Confidence: 0.841962288

00:16:23.570 --> 00:16:25.180
But maybe people should just

NOTE Confidence: 0.841962288

00:16:25.180 --> 00:16:26.468
be using import stud?

NOTE Confidence: 0.841962288

00:16:26.470 --> 00:16:26.714
Um,

NOTE Confidence: 0.841962288

00:16:26.714 --> 00:16:27.934
this is something we could

NOTE Confidence: 0.841962288

00:16:27.934 --> 00:16:29.240
potentially investigate in the future.

NOTE Confidence: 0.702538728

00:16:32.840 --> 00:16:37.424
The uh. The alternative is code duplication.

NOTE Confidence: 0.702538728

00:16:37.424 --> 00:16:41.200
Extract a just a very simple hello world,

NOTE Confidence: 0.702538728

00:16:41.200 --> 00:16:44.112
just the core, not the stuff using the

NOTE Confidence: 0.702538728

00:16:44.112 --> 00:16:46.900
stood Max or the vectorized version.

NOTE Confidence: 0.702538728

00:16:46.900 --> 00:16:48.314
That way we wouldn't need to drag

NOTE Confidence: 0.702538728

00:16:48.314 --> 00:16:50.715
any algorithm, and we could do that

NOTE Confidence: 0.702538728

00:16:50.715 --> 00:16:52.710
if we really needed throughput.

NOTE Confidence: 0.702538728

00:16:52.710 --> 00:16:54.950
Range is is I I think Casey is,

NOTE Confidence: 0.702538728

00:16:54.950 --> 00:16:56.550
um, more familiar with the

NOTE Confidence: 0.702538728

00:16:56.550 --> 00:16:57.510
throughput ranges ranges.

NOTE Confidence: 0.702538728

00:16:57.510 --> 00:17:00.170
Throughput is already pretty low,

NOTE Confidence: 0.702538728

00:17:00.170 --> 00:17:03.210
and I think it's possibly the header you

NOTE Confidence: 0.702538728

00:17:03.210 --> 00:17:06.121
would notice algorithm released in just

NOTE Confidence: 0.702538728

00:17:06.121 --> 00:17:09.547
because the denominator is already large.

NOTE Confidence: 0.702538728

00:17:09.550 --> 00:17:14.500
If algorithm was. Max index utility.

NOTE Confidence: 0.702538728

00:17:14.500 --> 00:17:16.340
Instead of utility utilities.

NOTE Confidence: 0.702538728

00:17:16.340 --> 00:17:20.699
Not non core, right? No utilities.

NOTE Confidence: 0.702538728

00:17:20.700 --> 00:17:22.860
Ohh yeah that's the one that's non core.

NOTE Confidence: 0.702538728

00:17:22.860 --> 00:17:26.252
Exercise is not core. Yeah, yeah,

NOTE Confidence: 0.702538728

00:17:26.252 --> 00:17:28.268
this one can use vector arguments just fine.

NOTE Confidence: 0.702538728

00:17:28.270 --> 00:17:29.416
This is where we put count.

NOTE Confidence: 0.702538728

00:17:29.420 --> 00:17:33.144
Find this one is reasonable to promote.

NOTE Confidence: 0.702538728

00:17:33.150 --> 00:17:35.229
Yeah, this is the one step up

NOTE Confidence: 0.702538728

00:17:35.229 --> 00:17:38.010
for an algorithm spot, right?

NOTE Confidence: 0.702538728

00:17:38.010 --> 00:17:40.110
Yeah, that's a good point. That's why.

NOTE Confidence: 0.702538728

00:17:40.110 --> 00:17:42.720
That's why. That's why this exists.

NOTE Confidence: 0.702538728

00:17:42.720 --> 00:17:45.366
It could do that and then does

NOTE Confidence: 0.702538728

00:17:45.366 --> 00:17:47.290
ranges already include X utility?

NOTE Confidence: 0.702538728

00:17:47.290 --> 00:17:48.770
Yes, very very likely.

NOTE Confidence: 0.702538728

00:17:48.770 --> 00:17:49.788
Oh yeah, yeah.

NOTE Confidence: 0.702538728

00:17:49.788 --> 00:17:51.456
Because it includes like string view

NOTE Confidence: 0.702538728

00:17:51.456 --> 00:17:52.750
internal indirectly from somewhere.

NOTE Confidence: 0.702538728

00:17:52.750 --> 00:17:55.696
But yeah, certainly includes ex utility.

NOTE Confidence: 0.702538728

00:17:55.700 --> 00:17:57.206
Yeah, that's interesting.

NOTE Confidence: 0.702538728

00:17:57.206 --> 00:17:57.708
Um.

NOTE Confidence: 0.726492385714286

00:18:03.640 --> 00:18:05.348
Most I'm just thinking of the logistics

NOTE Confidence: 0.726492385714286

00:18:05.348 --> 00:18:06.858
because we've got that tool set up,

NOTE Confidence: 0.726492385714286

00:18:06.860 --> 00:18:08.617
tool set update I'm working on today

NOTE Confidence: 0.726492385714286

00:18:08.617 --> 00:18:10.404
that makes some large scale code

NOTE Confidence: 0.726492385714286

00:18:10.404 --> 00:18:11.716
movement very obnoxious because

NOTE Confidence: 0.726492385714286

00:18:11.716 --> 00:18:13.429
it's reformatting a bunch of code.

NOTE Confidence: 0.726492385714286

00:18:13.430 --> 00:18:16.022
Aside from that, I see no reason why

NOTE Confidence: 0.726492385714286

00:18:16.022 --> 00:18:18.607
we couldn't promote this to X utility

NOTE Confidence: 0.726492385714286

00:18:18.607 --> 00:18:20.740
and then ranges wouldn't need it.

NOTE Confidence: 0.726492385714286

00:18:20.740 --> 00:18:22.476
Let's see, should I comment that and

NOTE Confidence: 0.726492385714286

00:18:22.476 --> 00:18:24.358
then say hold off on actually doing

NOTE Confidence: 0.726492385714286

00:18:24.358 --> 00:18:26.514
anything there until at least the tool set

NOTE Confidence: 0.726492385714286

00:18:26.514 --> 00:18:28.741
updates in and then we can move around code?

NOTE Confidence: 0.726492385714286

00:18:28.741 --> 00:18:31.990
Because I would hate for a comment to cause

NOTE Confidence: 0.726492385714286

00:18:32.067 --> 00:18:35.085
horrible merge conflicts and wasted work.

NOTE Confidence: 0.726492385714286

00:18:35.090 --> 00:18:38.023
Um, the alternative is do this thing

NOTE Confidence: 0.726492385714286

00:18:38.023 --> 00:18:41.347
and then file a follow-up issue to

NOTE Confidence: 0.726492385714286

00:18:41.347 --> 00:18:43.817
go improve the throughput later.

NOTE Confidence: 0.726492385714286

00:18:43.820 --> 00:18:45.836
As much as Clang format has

NOTE Confidence: 0.726492385714286

00:18:45.836 --> 00:18:47.180
changed everything in ranges,

NOTE Confidence: 0.726492385714286

00:18:47.180 --> 00:18:49.900
I think this PR is going to have

NOTE Confidence: 0.726492385714286

00:18:49.900 --> 00:18:51.890
terrible merge conflicts anyway.

NOTE Confidence: 0.726492385714286

00:18:51.890 --> 00:18:54.950
Yeah, but making it worse.

NOTE Confidence: 0.726492385714286

00:18:54.950 --> 00:18:57.456
Not be that big of a deal.

NOTE Confidence: 0.726492385714286

00:18:57.460 --> 00:19:02.206
Yeah, um. I'll include a comment.

NOTE Confidence: 0.726492385714286

00:19:02.210 --> 00:19:05.458
Or should I just resurrect this comment?

NOTE Confidence: 0.726492385714286

00:19:05.460 --> 00:19:06.670
The.

NOTE Confidence: 0.852070661428571

00:19:09.350 --> 00:19:11.058
Yeah, the IT is the same issue.

NOTE Confidence: 0.852070661428571

00:19:11.060 --> 00:19:12.956
So I think we can can resurrect it.

NOTE Confidence: 0.852070661428571

00:19:12.960 --> 00:19:19.317
Um, OK, unresolve. OK, um. See,

NOTE Confidence: 0.852070661428571

00:19:19.317 --> 00:19:26.130
Casey and I talked about this in the video.

NOTE Confidence: 0.852070661428571

00:19:26.130 --> 00:19:28.785
Code review um.

NOTE Confidence: 0.852070661428571

00:19:28.785 --> 00:19:33.210
We believe that X utility.

NOTE Confidence: 0.852070661428571

00:19:33.210 --> 00:19:38.690
Would be on appropriate place to move the.

NOTE Confidence: 0.852070661428571

00:19:38.690 --> 00:19:43.280
Initializer. Say promote um,

NOTE Confidence: 0.852070661428571

00:19:43.280 --> 00:19:49.379
vote the classic initializer list.

NOTE Confidence: 0.852070661428571

00:19:49.380 --> 00:19:50.160
Uh, actually,

NOTE Confidence: 0.852070661428571

00:19:50.160 --> 00:19:52.500
are they both using initializer lists?

NOTE Confidence: 0.852070661428571

00:19:52.500 --> 00:19:56.376
Uh, or was one using a non? Unit list,

NOTE Confidence: 0.852070661428571

00:19:56.376 --> 00:19:58.812
but just arbitrary range sizes or sizes,

NOTE Confidence: 0.852070661428571

00:19:58.820 --> 00:20:00.720
is literally an initializer list,

NOTE Confidence: 0.852070661428571

00:20:00.720 --> 00:20:03.114
and the other one we form reform braces,

NOTE Confidence: 0.852070661428571

00:20:03.114 --> 00:20:05.473
so in that list would be sufficient.

NOTE Confidence: 0.852070661428571

00:20:05.480 --> 00:20:07.556
There's no need for the ranges.

NOTE Confidence: 0.852070661428571

00:20:07.560 --> 00:20:11.350
Um, plastic.

NOTE Confidence: 0.852070661428571

00:20:11.350 --> 00:20:12.080
Yeah.

NOTE Confidence: 0.852070661428571

00:20:12.080 --> 00:20:18.358
No need for the ranges machinery as it is.

NOTE Confidence: 0.801591302

00:20:20.590 --> 00:20:24.030
Included or as it is, um.

NOTE Confidence: 0.7829334675

00:20:27.700 --> 00:20:30.316
Uh, let's say I wanna say higher up.

NOTE Confidence: 0.7829334675

00:20:30.320 --> 00:20:32.032
That could be confusing.

NOTE Confidence: 0.7829334675

00:20:32.032 --> 00:20:34.039
It's uh. Included by algorithm.

NOTE Confidence: 0.539498103888889

00:20:41.110 --> 00:20:42.643
What extra utility?

NOTE Confidence: 0.539498103888889

00:20:42.643 --> 00:20:45.709
Yes, this included and is non.

NOTE Confidence: 0.539498103888889

00:20:45.710 --> 00:20:48.710
Or, um, we use it.

NOTE Confidence: 0.6283901

00:20:50.860 --> 00:20:55.140
Decentralize. Yeah, I won't explain.

NOTE Confidence: 0.806818628

00:20:58.030 --> 00:20:59.390
Yeah, maybe I will explain.

NOTE Confidence: 0.806818628

00:20:59.390 --> 00:21:05.310
And already centralizes similar algorithms

NOTE Confidence: 0.806818628

00:21:05.310 --> 00:21:11.190
of wide applicability. They ASL.

NOTE Confidence: 0.734812786

00:21:14.150 --> 00:21:17.690
Yes. That is non core,

NOTE Confidence: 0.734812786

00:21:17.690 --> 00:21:19.810
I mean too much parenthetical.

NOTE Confidence: 0.88011199

00:21:22.760 --> 00:21:26.519
So the vectorization.

NOTE Confidence: 0.88011199

00:21:26.520 --> 00:21:29.433
Won't be problematic.

NOTE Confidence: 0.88011199

00:21:29.433 --> 00:21:32.346
Um. Let's see.

NOTE Confidence: 0.88011199

00:21:32.350 --> 00:21:36.320
Note due to the um.

NOTE Confidence: 0.88011199

00:21:36.320 --> 00:21:38.080
Pending tool set update

NOTE Confidence: 0.88011199

00:21:38.080 --> 00:21:40.783
I wanna say it's 3155.

NOTE Confidence: 0.88011199

00:21:40.783 --> 00:21:42.669
Let's check.

NOTE Confidence: 0.7078269975

00:21:47.260 --> 00:21:50.992
Yes, I remember correctly through and

NOTE Confidence: 0.7078269975

00:21:50.992 --> 00:21:58.279
five number 3155 Yep. Code move movement.

NOTE Confidence: 0.717510451666667

00:22:00.580 --> 00:22:04.309
May cause obnoxious

NOTE Confidence: 0.717510451666667

00:22:04.309 --> 00:22:08.038
formatting merge conflicts.

NOTE Confidence: 0.717510451666667

00:22:08.040 --> 00:22:11.125
I recommend waiting until the

NOTE Confidence: 0.717510451666667

00:22:11.125 --> 00:22:17.240
tool set update is merged before.

NOTE Confidence: 0.717510451666667

00:22:17.240 --> 00:22:22.100
Attempting to address this. Sir.

NOTE Confidence: 0.752896659

00:22:25.250 --> 00:22:27.365
OK. I should probably mention

NOTE Confidence: 0.752896659

00:22:27.365 --> 00:22:29.480
that the throughput impact is.

NOTE Confidence: 0.816762606666667

00:22:31.730 --> 00:22:34.622
We should say we agree about

NOTE Confidence: 0.816762606666667

00:22:34.622 --> 00:22:36.068
the throughput impact.

NOTE Confidence: 0.816762606666667

00:22:36.070 --> 00:22:44.180
A. Share. OK guys.

NOTE Confidence: 0.816762606666667

00:22:44.180 --> 00:22:47.668
Concern about the throughput.

NOTE Confidence: 0.816762606666667

00:22:47.668 --> 00:22:50.284
Impact of algorithm.

NOTE Confidence: 0.830958947857143

00:22:54.240 --> 00:22:56.137
OK. Casey and I talked about this

NOTE Confidence: 0.830958947857143

00:22:56.137 --> 00:22:58.248
in the video code review we share.

NOTE Confidence: 0.830958947857143

00:22:58.250 --> 00:22:59.816
He will case concern about the

NOTE Confidence: 0.830958947857143

00:22:59.816 --> 00:23:01.141
throughput impact of algorithm and

NOTE Confidence: 0.830958947857143

00:23:01.141 --> 00:23:02.814
we believe the utility would be an

NOTE Confidence: 0.830958947857143

00:23:02.814 --> 00:23:04.256
appropriate place to promote the

NOTE Confidence: 0.830958947857143

00:23:04.256 --> 00:23:05.476
classic initializer list overloads.

NOTE Confidence: 0.830958947857143

00:23:05.480 --> 00:23:06.677
No need for the range of machinery

NOTE Confidence: 0.830958947857143

00:23:06.677 --> 00:23:08.159
as it is included by algorithm and

NOTE Confidence: 0.830958947857143

00:23:08.159 --> 00:23:09.545
is non core so the vectorization

NOTE Confidence: 0.830958947857143

00:23:09.588 --> 00:23:11.003
won't be problematic and already

NOTE Confidence: 0.830958947857143

00:23:11.003 --> 00:23:12.135
centralizes similar algorithms of

NOTE Confidence: 0.830958947857143

00:23:12.135 --> 00:23:13.436
wide applicability in the STL.

NOTE Confidence: 0.830958947857143

00:23:13.436 --> 00:23:15.316
Note due to the pending tools update

NOTE Confidence: 0.830958947857143

00:23:15.316 --> 00:23:17.451
three and five code movement may cause

NOTE Confidence: 0.830958947857143

00:23:17.451 --> 00:23:18.850
obnoxious formatting merge conflicts.

NOTE Confidence: 0.830958947857143

00:23:18.850 --> 00:23:20.105
Recommend waiting until the tool

NOTE Confidence: 0.830958947857143

00:23:20.105 --> 00:23:21.360
set update is merged before

NOTE Confidence: 0.830958947857143

00:23:21.411 --> 00:23:22.876
attempting to address this concern.

NOTE Confidence: 0.830958947857143

00:23:22.880 --> 00:23:25.472
OK, we've got one line of

NOTE Confidence: 0.830958947857143

00:23:25.472 --> 00:23:28.880
product code reviewed. Port.

NOTE Confidence: 0.830958947857143

00:23:28.880 --> 00:23:31.897
OK, so we've got some concepts here.

NOTE Confidence: 0.830958947857143

00:23:31.900 --> 00:23:34.378
OK, this is actually kind of annoying.

NOTE Confidence: 0.830958947857143

00:23:34.380 --> 00:23:40.460
Let's split that, OK? Yeah.

NOTE Confidence: 0.830958947857143

00:23:40.460 --> 00:23:45.788
Minify the this OK, that's readable.

NOTE Confidence: 0.830958947857143

00:23:45.790 --> 00:23:48.506
OK, so we are translating over here.

NOTE Confidence: 0.830958947857143

00:23:48.510 --> 00:23:49.630
I was going to actually read the

NOTE Confidence: 0.830958947857143

00:23:49.630 --> 00:23:50.668
standard and see what's going on.

NOTE Confidence: 0.830958947857143

00:23:50.670 --> 00:23:52.101
We take a bunch of views and we get

NOTE Confidence: 0.830958947857143

00:23:52.101 --> 00:23:53.559
a view of tuples to references.

NOTE Confidence: 0.830958947857143

00:23:53.560 --> 00:23:55.592
So like if you've got a vector of

NOTE Confidence: 0.830958947857143

00:23:55.592 --> 00:23:57.993
int and a vector of strings and the

NOTE Confidence: 0.830958947857143

00:23:57.993 --> 00:24:00.018
insco 1020 thirty and the strings

NOTE Confidence: 0.830958947857143

00:24:00.018 --> 00:24:01.506
say cute fluffy kittens,

NOTE Confidence: 0.830958947857143

00:24:01.510 --> 00:24:04.520
then you can get a zip view that will

NOTE Confidence: 0.830958947857143

00:24:04.520 --> 00:24:07.210
give you tuples of references to 10 cute 20,

NOTE Confidence: 0.830958947857143

00:24:07.210 --> 00:24:08.110
fluffy 30 kittens.

NOTE Confidence: 0.830958947857143

00:24:08.110 --> 00:24:10.580
And then you can go feed those to

NOTE Confidence: 0.830958947857143

00:24:10.580 --> 00:24:12.080
some algorithm or something and

NOTE Confidence: 0.830958947857143

00:24:12.080 --> 00:24:14.209
then use it as customization point

NOTE Confidence: 0.830958947857143

00:24:14.209 --> 00:24:15.925
object that does that.

NOTE Confidence: 0.830958947857143

00:24:15.930 --> 00:24:16.190
OK,

NOTE Confidence: 0.830958947857143

00:24:16.190 --> 00:24:18.530
one other thing that I want to be on

NOTE Confidence: 0.830958947857143

00:24:18.595 --> 00:24:20.870
the lookout for is usage of export.

NOTE Confidence: 0.830958947857143

00:24:20.870 --> 00:24:22.220
Because we have merged standard

NOTE Confidence: 0.830958947857143

00:24:22.220 --> 00:24:22.760
library modules,

NOTE Confidence: 0.830958947857143

00:24:22.760 --> 00:24:25.084
we need to make sure that every

NOTE Confidence: 0.830958947857143

00:24:25.084 --> 00:24:27.611
public name is marked with our

NOTE Confidence: 0.830958947857143

00:24:27.611 --> 00:24:30.031
internal export stood macro because

NOTE Confidence: 0.830958947857143

00:24:30.031 --> 00:24:32.226
forgetting that will not immediately

NOTE Confidence: 0.830958947857143

00:24:32.226 --> 00:24:34.907
cause any problems but is a bug.

NOTE Confidence: 0.830958947857143

00:24:34.910 --> 00:24:36.947
Eventually this becomes second nature to us,

NOTE Confidence: 0.830958947857143

00:24:36.950 --> 00:24:40.082
but for now we need to make sure

NOTE Confidence: 0.830958947857143

00:24:40.082 --> 00:24:42.636
that we check this. OK, so.

NOTE Confidence: 0.830958947857143

00:24:42.636 --> 00:24:45.251
Exposition only concept does not

NOTE Confidence: 0.830958947857143

00:24:45.251 --> 00:24:46.297
get exported.

NOTE Confidence: 0.830958947857143

00:24:46.300 --> 00:24:49.960
Let's switch to highlight here, OK?

NOTE Confidence: 0.830958947857143

00:24:49.960 --> 00:24:52.733
O we've got template class R's.

NOTE Confidence: 0.830958947857143

00:24:52.733 --> 00:24:55.274
These are under score capital range types.

NOTE Confidence: 0.830958947857143

00:24:55.280 --> 00:24:58.240
We've got a concept called zip is common,

NOTE Confidence: 0.830958947857143

00:24:58.240 --> 00:25:00.900
which is exposition only.

NOTE Confidence: 0.830958947857143

00:25:00.900 --> 00:25:03.156
And it's going to be true when the

NOTE Confidence: 0.830958947857143

00:25:03.156 --> 00:25:06.840
size of dot, the range types is 1.

NOTE Confidence: 0.830958947857143

00:25:06.840 --> 00:25:10.740
And common range of the R's and dot A dot,

NOTE Confidence: 0.830958947857143

00:25:10.740 --> 00:25:12.930
so they're all common ranges.

NOTE Confidence: 0.830958947857143

00:25:12.930 --> 00:25:15.540
And then using slash slash to

NOTE Confidence: 0.830958947857143

00:25:15.540 --> 00:25:17.940
hard wrap because Clang format.

NOTE Confidence: 0.830958947857143

00:25:17.940 --> 00:25:19.000
Which may not be necessary,

NOTE Confidence: 0.830958947857143

00:25:19.000 --> 00:25:21.528
but it's OK for now with Clang format 15,

NOTE Confidence: 0.830958947857143

00:25:21.528 --> 00:25:23.395
which is better about this or OK

NOTE Confidence: 0.830958947857143

00:25:23.395 --> 00:25:25.082
and it's good that the OR operator

NOTE Confidence: 0.830958947857143

00:25:25.082 --> 00:25:27.192
is coming at the beginning of line

NOTE Confidence: 0.830958947857143

00:25:27.192 --> 00:25:28.448
because that's our convention.

NOTE Confidence: 0.756668412181818

00:25:32.130 --> 00:25:34.104
OK, I'm checking to make sure that

NOTE Confidence: 0.756668412181818

00:25:34.104 --> 00:25:36.161
everything is parenthesized correctly, not.

NOTE Confidence: 0.756668412181818

00:25:36.161 --> 00:25:40.427
That they're not all bidirectional ranges,

NOTE Confidence: 0.756668412181818

00:25:40.430 --> 00:25:42.926
so the knot is outside the fold expression.

NOTE Confidence: 0.756668412181818

00:25:42.930 --> 00:25:50.670
Good. And they're all common ranges. Or.

NOTE Confidence: 0.756668412181818

00:25:50.670 --> 00:25:54.178
They're all random access ranges, and.

NOTE Confidence: 0.756668412181818

00:25:54.178 --> 00:25:58.320
They're all sized ranges. OK.

NOTE Confidence: 0.3294927

00:26:00.470 --> 00:26:03.279
Thanks. Looks good. OK,

NOTE Confidence: 0.3294927

00:26:03.279 --> 00:26:06.310
then we have a tuple transform closure.

NOTE Confidence: 0.3294927

00:26:06.310 --> 00:26:08.550
This is not depicted in

NOTE Confidence: 0.3294927

00:26:08.550 --> 00:26:11.450
standard ease up here at least.

NOTE Confidence: 0.3294927

00:26:11.450 --> 00:26:14.986
Is there anything else I can look for?

NOTE Confidence: 0.3294927

00:26:14.990 --> 00:26:16.664
People transform OK,

NOTE Confidence: 0.3294927

00:26:16.664 --> 00:26:18.338
perhaps that's elsewhere.

NOTE Confidence: 0.862179

00:26:20.670 --> 00:26:27.210
Search. What is this tuple transform

NOTE Confidence: 0.862179

00:26:27.210 --> 00:26:29.278
thing? I'm just being mentioned.

NOTE Confidence: 0.7113505525

00:26:36.440 --> 00:26:39.608
Lots of equivalent twos.

NOTE Confidence: 0.7113505525

00:26:39.610 --> 00:26:41.878
Did it already wrap? Come on.

NOTE Confidence: 0.690733861666667

00:26:44.900 --> 00:26:46.460
Here we go, range adapter helpers.

NOTE Confidence: 0.733810725

00:26:49.590 --> 00:26:55.800
OK, uh. Expedition only.

NOTE Confidence: 0.733810725

00:26:55.800 --> 00:27:00.008
Let's see, this is making a 2 bowl.

NOTE Confidence: 0.733810725

00:27:00.010 --> 00:27:03.521
Ohh, I see tuple transform is

NOTE Confidence: 0.733810725

00:27:03.521 --> 00:27:07.376
apply the tuple transform closure.

NOTE Confidence: 0.733810725

00:27:07.380 --> 00:27:11.300
Is just the Lambda OK?

NOTE Confidence: 0.733810725

00:27:11.300 --> 00:27:14.590
OK, so that's what this is, um.

NOTE Confidence: 0.733810725

00:27:14.590 --> 00:27:15.658
OK, so we've got.

NOTE Confidence: 0.668474615

00:27:17.870 --> 00:27:20.278
What the callback type? I guess that's F.

NOTE Confidence: 0.754777607142857

00:27:23.020 --> 00:27:24.840
OK, this just calls it off here.

NOTE Confidence: 0.754777607142857

00:27:24.840 --> 00:27:26.780
I'm thinking should this be

NOTE Confidence: 0.754777607142857

00:27:26.780 --> 00:27:28.720
named pollable type or anything?

NOTE Confidence: 0.754777607142857

00:27:28.720 --> 00:27:30.470
I'm OK with callback type.

NOTE Confidence: 0.826588898333333

00:27:33.530 --> 00:27:34.760
We do pass it to invoke,

NOTE Confidence: 0.826588898333333

00:27:34.760 --> 00:27:37.454
so really it is a callable type. Um, the.

NOTE Confidence: 0.826588898333333

00:27:37.454 --> 00:27:40.350
The issue here is that in the STL,

NOTE Confidence: 0.826588898333333

00:27:40.350 --> 00:27:41.721
especially when overhauling

NOTE Confidence: 0.826588898333333

00:27:41.721 --> 00:27:43.549
invoke and stood function,

NOTE Confidence: 0.826588898333333

00:27:43.550 --> 00:27:46.210
all that we try to be very

NOTE Confidence: 0.826588898333333

00:27:46.210 --> 00:27:47.350
careful about terminology.

NOTE Confidence: 0.826588898333333

00:27:47.350 --> 00:27:48.970
If something's passed to invoke and

NOTE Confidence: 0.826588898333333

00:27:48.970 --> 00:27:50.889
it goes through the invoke protocol,

NOTE Confidence: 0.826588898333333

00:27:50.890 --> 00:27:52.225
the standard formally refers to

NOTE Confidence: 0.826588898333333

00:27:52.225 --> 00:27:53.850
that thing as a callable type,

NOTE Confidence: 0.826588898333333

00:27:53.850 --> 00:27:55.740
meaning there could be a pointer to

NOTE Confidence: 0.826588898333333

00:27:55.740 --> 00:27:57.414
member function or pointer to member

NOTE Confidence: 0.826588898333333

00:27:57.414 --> 00:27:59.304
data in addition to something like a

NOTE Confidence: 0.826588898333333

00:27:59.358 --> 00:28:01.108
Lambda function or function object,

NOTE Confidence: 0.826588898333333

00:28:01.110 --> 00:28:04.169
and it is callable through some generalized.

NOTE Confidence: 0.826588898333333

00:28:04.170 --> 00:28:04.413
Syntax.

NOTE Confidence: 0.826588898333333

00:28:04.413 --> 00:28:06.357
So we tried to be very careful about

NOTE Confidence: 0.826588898333333

00:28:06.357 --> 00:28:08.329
saying that if this is like function type,

NOTE Confidence: 0.826588898333333

00:28:08.330 --> 00:28:10.286
I would definitely ask for change.

NOTE Confidence: 0.826588898333333

00:28:10.290 --> 00:28:12.696
I'm OK with callback type here,

NOTE Confidence: 0.826588898333333

00:28:12.700 --> 00:28:14.668
it's not user visible.

NOTE Confidence: 0.826588898333333

00:28:14.668 --> 00:28:18.400
OK, so template on class callback type.

NOTE Confidence: 0.826588898333333

00:28:18.400 --> 00:28:20.780
This has to be constexpr.

NOTE Confidence: 0.826588898333333

00:28:20.780 --> 00:28:22.478
This should really be no discard,

NOTE Confidence: 0.826588898333333

00:28:22.480 --> 00:28:26.860
it's internal. Um.

NOTE Confidence: 0.826588898333333

00:28:26.860 --> 00:28:29.100
It's not absolutely necessary.

NOTE Confidence: 0.807786760833333

00:28:33.240 --> 00:28:34.248
I feel like it should be

NOTE Confidence: 0.807786760833333

00:28:34.248 --> 00:28:35.289
noticed card at least this one.

NOTE Confidence: 0.807786760833333

00:28:35.290 --> 00:28:37.258
There's very low risk of us calling this

NOTE Confidence: 0.807786760833333

00:28:37.258 --> 00:28:39.030
thing and dropping it on the floor.

NOTE Confidence: 0.807786760833333

00:28:39.030 --> 00:28:41.206
I don't know if this merits a comment.

NOTE Confidence: 0.807786760833333

00:28:41.210 --> 00:28:43.390
First, I'm wondering if tuple

NOTE Confidence: 0.807786760833333

00:28:43.390 --> 00:28:45.570
transform and the others here.

NOTE Confidence: 0.807786760833333

00:28:45.570 --> 00:28:46.502
Need to be marked.

NOTE Confidence: 0.807786760833333

00:28:46.502 --> 00:28:47.434
Usually with internal helpers

NOTE Confidence: 0.807786760833333

00:28:47.434 --> 00:28:49.187
we do want to mark them, um,

NOTE Confidence: 0.807786760833333

00:28:49.187 --> 00:28:51.472
because why would you call

NOTE Confidence: 0.807786760833333

00:28:51.472 --> 00:28:54.349
this if you don't return it?

NOTE Confidence: 0.807786760833333

00:28:54.350 --> 00:28:56.090
Yeah, we always return this stuff.

NOTE Confidence: 0.864708518333333

00:29:03.810 --> 00:29:05.238
I'd say it's fairly low risk.

NOTE Confidence: 0.864708518333333

00:29:05.240 --> 00:29:07.944
Um, I won't ask for no discard here.

NOTE Confidence: 0.864708518333333

00:29:07.950 --> 00:29:10.035
I will think about it

NOTE Confidence: 0.864708518333333

00:29:10.035 --> 00:29:11.703
for the public functions.

NOTE Confidence: 0.864708518333333

00:29:11.710 --> 00:29:15.086
OK, so going back here,

NOTE Confidence: 0.864708518333333

00:29:15.086 --> 00:29:15.998
tuple transform closure

NOTE Confidence: 0.864708518333333

00:29:15.998 --> 00:29:17.550
is just making the Lambda.

NOTE Confidence: 0.864708518333333

00:29:17.550 --> 00:29:18.554
Probably because defining this

NOTE Confidence: 0.864708518333333

00:29:18.554 --> 00:29:19.558
Lambda is pretty obnoxious,

NOTE Confidence: 0.864708518333333

00:29:19.560 --> 00:29:20.856
so we want to centralize it.

NOTE Confidence: 0.5601246775

00:29:23.060 --> 00:29:24.828
OK, so template constexpr

NOTE Confidence: 0.5601246775

00:29:24.828 --> 00:29:26.596
auto tuple transform closure.

NOTE Confidence: 0.5601246775

00:29:26.600 --> 00:29:30.156
We take a callback by lvalue reference.

NOTE Confidence: 0.5601246775

00:29:30.160 --> 00:29:35.426
OK. We are no except because we only

NOTE Confidence: 0.5601246775

00:29:35.426 --> 00:29:38.358
store a reference to the callback.

NOTE Confidence: 0.5601246775

00:29:38.360 --> 00:29:40.286
So we're not actually copying anything,

NOTE Confidence: 0.5601246775

00:29:40.290 --> 00:29:42.474
so we can guarantee that we

NOTE Confidence: 0.5601246775

00:29:42.474 --> 00:29:43.566
aren't throwing exceptions.

NOTE Confidence: 0.5601246775

00:29:43.570 --> 00:29:45.748
OK, so we're going to return.

NOTE Confidence: 0.5601246775

00:29:45.750 --> 00:29:48.350
We instead of just using a capture default,

NOTE Confidence: 0.5601246775

00:29:48.350 --> 00:29:52.734
we name ref callback and this is a

NOTE Confidence: 0.5601246775

00:29:52.734 --> 00:29:55.243
generic Lambda so we're templated

NOTE Confidence: 0.5601246775

00:29:55.243 --> 00:29:58.069
on class dot view tuple types.

NOTE Confidence: 0.5601246775

00:29:58.070 --> 00:30:01.409
In place of teas we take teas

NOTE Confidence: 0.5601246775

00:30:01.409 --> 00:30:04.189
refresh data dot view tuples.

NOTE Confidence: 0.5601246775

00:30:04.190 --> 00:30:08.376
OK so that's this so far here.

NOTE Confidence: 0.5601246775

00:30:08.380 --> 00:30:09.684
And then we return.

NOTE Confidence: 0.5601246775

00:30:09.684 --> 00:30:12.970
We make a tuple of the invoke result T.

NOTE Confidence: 0.5601246775

00:30:12.970 --> 00:30:14.475
Here we've got to check that the

NOTE Confidence: 0.5601246775

00:30:14.475 --> 00:30:15.860
types are exactly being mentioned,

NOTE Confidence: 0.5601246775

00:30:15.860 --> 00:30:19.022
because the value category and CV

NOTE Confidence: 0.5601246775

00:30:19.022 --> 00:30:21.810
qualifiers can influence the result.

NOTE Confidence: 0.5601246775

00:30:21.810 --> 00:30:23.530
The callback type ref.

NOTE Confidence: 0.5601246775

00:30:23.530 --> 00:30:27.156
And view tuple types dot Yep, that's good.

NOTE Confidence: 0.5601246775

00:30:27.156 --> 00:30:30.294
And then we're calling it with.

NOTE Confidence: 0.5601246775

00:30:30.300 --> 00:30:33.090
Or constructing this from the result

NOTE Confidence: 0.5601246775

00:30:33.090 --> 00:30:35.388
of student voke. The callback.

NOTE Confidence: 0.5601246775

00:30:35.388 --> 00:30:38.531
And then stood forward view tuple tisu

NOTE Confidence: 0.5601246775

00:30:38.531 --> 00:30:43.026
tuples dot. OK, that's all good. So my.

NOTE Confidence: 0.5601246775

00:30:43.030 --> 00:30:45.490
OK, so that's essentially this here,

NOTE Confidence: 0.5601246775

00:30:45.490 --> 00:30:48.370
but not the apply that's elsewhere.

NOTE Confidence: 0.5601246775

00:30:48.370 --> 00:30:50.365
And then this is the alley call

NOTE Confidence: 0.5601246775

00:30:50.365 --> 00:30:52.298
template on class under score capital

NOTE Confidence: 0.5601246775

00:30:52.298 --> 00:30:54.326
callback type class and our tuple

NOTE Confidence: 0.5601246775

00:30:54.326 --> 00:30:56.527
type constexpr auto tuple transform.

NOTE Confidence: 0.5601246775

00:30:56.530 --> 00:30:56.938
OK,

NOTE Confidence: 0.5601246775

00:30:56.938 --> 00:30:58.978
this takes by perfect forwarding

NOTE Confidence: 0.5601246775

00:30:58.978 --> 00:31:01.629
a callback type ref ref callback.

NOTE Confidence: 0.5601246775

00:31:01.630 --> 00:31:04.390
So that's matching this concept for

NOTE Confidence: 0.5601246775

00:31:04.390 --> 00:31:07.143
auto tuple transform that's depicted as

NOTE Confidence: 0.5601246775

00:31:07.143 --> 00:31:10.471
FFRF and then tuple type refresh under tuple.

NOTE Confidence: 0.5601246775

00:31:10.480 --> 00:31:13.330
Here we're strengthening.

NOTE Confidence: 0.5601246775

00:31:13.330 --> 00:31:14.134
This being commented,

NOTE Confidence: 0.5601246775

00:31:14.134 --> 00:31:15.474
is strengthened even though it's

NOTE Confidence: 0.5601246775

00:31:15.474 --> 00:31:16.848
not actually a standard function.

NOTE Confidence: 0.5601246775

00:31:16.850 --> 00:31:19.130
But because it's depicted in the

NOTE Confidence: 0.5601246775

00:31:19.130 --> 00:31:20.650
standard as exposition only,

NOTE Confidence: 0.5601246775

00:31:20.650 --> 00:31:22.270
I think it's reasonable to have

NOTE Confidence: 0.5601246775

00:31:22.270 --> 00:31:23.350
strength and comment here.

NOTE Confidence: 0.5601246775

00:31:23.350 --> 00:31:25.436
We're no except if this is no

NOTE Confidence: 0.5601246775

00:31:25.436 --> 00:31:26.330
except still apply.

NOTE Confidence: 0.5601246775

00:31:26.330 --> 00:31:28.589
So it's just gonna be the bodies to apply.

NOTE Confidence: 0.5601246775

00:31:28.590 --> 00:31:30.046
Yeah, then all matches.

NOTE Confidence: 0.5601246775

00:31:30.046 --> 00:31:32.896
So we're going to return stood apply

NOTE Confidence: 0.5601246775

00:31:32.896 --> 00:31:36.487
to avoid ADL of make that closure,

NOTE Confidence: 0.5601246775

00:31:36.490 --> 00:31:39.647
and then stood forward tuple type tuple.

NOTE Confidence: 0.5601246775

00:31:39.650 --> 00:31:40.546
OK correct.

NOTE Confidence: 0.5601246775

00:31:40.546 --> 00:31:43.234
OK, so that's this thing done,

NOTE Confidence: 0.5601246775

00:31:43.240 --> 00:31:45.340
and then we've got a tuple for

NOTE Confidence: 0.5601246775

00:31:45.340 --> 00:31:46.240
each same structure,

NOTE Confidence: 0.5601246775

00:31:46.240 --> 00:31:49.056
where we've got one helper to make the

NOTE Confidence: 0.5601246775

00:31:49.056 --> 00:31:51.640
Lambda and then another to actually.

NOTE Confidence: 0.5601246775

00:31:51.640 --> 00:31:54.160
Apply it so template callback type

NOTE Confidence: 0.5601246775

00:31:54.160 --> 00:31:57.639
because it's for auto tuple for each closure.

NOTE Confidence: 0.5601246775

00:31:57.640 --> 00:32:01.168
And take by L value ref callback.

NOTE Confidence: 0.5601246775

00:32:01.170 --> 00:32:03.066
This one's always no except because

NOTE Confidence: 0.5601246775

00:32:03.066 --> 00:32:05.049
we only capture a ref return.

NOTE Confidence: 0.5601246775

00:32:05.050 --> 00:32:05.420
OK,

NOTE Confidence: 0.5601246775

00:32:05.420 --> 00:32:08.010
so now this is the stuff capture

NOTE Confidence: 0.5601246775

00:32:08.010 --> 00:32:10.763
roughed callback view tuple types.

NOTE Confidence: 0.5601246775

00:32:10.763 --> 00:32:14.789
Take that ref ref view tuples.

NOTE Confidence: 0.5601246775

00:32:14.790 --> 00:32:17.320
The Lambda itself could. Row.

NOTE Confidence: 0.5601246775

00:32:17.320 --> 00:32:19.108
So it definitely should not be

NOTE Confidence: 0.5601246775

00:32:19.108 --> 00:32:20.300
no except or anything.

NOTE Confidence: 0.5601246775

00:32:20.300 --> 00:32:20.689
Um.

NOTE Confidence: 0.5601246775

00:32:20.689 --> 00:32:23.023
Here we are casting the result

NOTE Confidence: 0.5601246775

00:32:23.023 --> 00:32:25.920
to void because we don't want to

NOTE Confidence: 0.5601246775

00:32:25.920 --> 00:32:28.392
invoke any sort of overloaded comma,

NOTE Confidence: 0.5601246775

00:32:28.400 --> 00:32:30.968
which is good.

NOTE Confidence: 0.5601246775

00:32:30.970 --> 00:32:33.504
So we call stud invoke of the

NOTE Confidence: 0.5601246775

00:32:33.504 --> 00:32:35.619
callback and then stood forward

NOTE Confidence: 0.5601246775

00:32:35.619 --> 00:32:37.984
view tuple types view tuples.

NOTE Confidence: 0.5601246775

00:32:37.990 --> 00:32:43.520
And then? What is going on here?

NOTE Confidence: 0.5601246775

00:32:43.520 --> 00:32:48.278
This parenthesis is not actually necessary

NOTE Confidence: 0.5601246775

00:32:48.280 --> 00:32:50.576
because what else could the void bind to?

NOTE Confidence: 0.841514802222222

00:32:52.930 --> 00:32:55.140
It's not wrong. It might

NOTE Confidence: 0.841514802222222

00:32:55.140 --> 00:32:56.908
help visually parsing it.

NOTE Confidence: 0.867074128

00:33:02.410 --> 00:33:03.530
I don't think I'll complain.

NOTE Confidence: 0.867074128

00:33:03.530 --> 00:33:04.783
I'm trying to be a little bit

NOTE Confidence: 0.867074128

00:33:04.783 --> 00:33:06.290
less than a picky in my comments.

NOTE Confidence: 0.867074128

00:33:06.290 --> 00:33:07.922
And here are the the extra

NOTE Confidence: 0.867074128

00:33:07.922 --> 00:33:09.450
parent is not the worst.

NOTE Confidence: 0.867074128

00:33:09.450 --> 00:33:11.000
This is already pretty complicated

NOTE Confidence: 0.867074128

00:33:11.000 --> 00:33:13.428
expression, so I won't grind my teeth.

NOTE Confidence: 0.867074128

00:33:13.430 --> 00:33:15.848
If there's an extra parent here,

NOTE Confidence: 0.867074128

00:33:15.850 --> 00:33:20.010
it's unusual enough that I'm OK with it.

NOTE Confidence: 0.867074128

00:33:20.010 --> 00:33:23.090
Then comma dot OK, so that's good.

NOTE Confidence: 0.867074128

00:33:23.090 --> 00:33:25.370
Very, very like the attention to detail that,

NOTE Confidence: 0.867074128

00:33:25.370 --> 00:33:27.020
um, the standard doesn't bother

NOTE Confidence: 0.867074128

00:33:27.020 --> 00:33:28.670
to avoid overloaded comma here,

NOTE Confidence: 0.867074128

00:33:28.670 --> 00:33:31.926
but we need to according to our policies,

NOTE Confidence: 0.867074128

00:33:31.930 --> 00:33:33.914
and a strict reading of the standard does

NOTE Confidence: 0.867074128

00:33:33.914 --> 00:33:36.146
indicate that that's correct step forward.

NOTE Confidence: 0.867074128

00:33:36.146 --> 00:33:38.258
OK, very semi good.

NOTE Confidence: 0.867074128

00:33:38.260 --> 00:33:40.996
And then two before each is the whole thing.

NOTE Confidence: 0.867074128

00:33:41.000 --> 00:33:42.452
Template callback type tuple

NOTE Confidence: 0.867074128

00:33:42.452 --> 00:33:44.267
type context for voyage tuple.

NOTE Confidence: 0.867074128

00:33:44.270 --> 00:33:45.262
For each I'm checking.

NOTE Confidence: 0.867074128

00:33:45.262 --> 00:33:47.590
All the names are ugly and they are, um,

NOTE Confidence: 0.867074128

00:33:47.590 --> 00:33:49.240
public type reference callback tuple,

NOTE Confidence: 0.867074128

00:33:49.240 --> 00:33:50.158
type reference tuple.

NOTE Confidence: 0.867074128

00:33:50.158 --> 00:33:51.076
We're gonna accept.

NOTE Confidence: 0.867074128

00:33:51.080 --> 00:33:52.260
If this is no exception,

NOTE Confidence: 0.867074128

00:33:52.260 --> 00:33:55.560
apply for each closure tuple type.

NOTE Confidence: 0.867074128

00:33:55.560 --> 00:33:56.910
Again, it's marked to strengthen.

NOTE Confidence: 0.867074128

00:33:56.910 --> 00:33:59.885
That's fine. And then we just dropped

NOTE Confidence: 0.867074128

00:33:59.885 --> 00:34:01.070
the return value on the floor.

NOTE Confidence: 0.867074128

00:34:01.070 --> 00:34:05.550
No need to cast because to apply is not um.

NOTE Confidence: 0.867074128

00:34:05.550 --> 00:34:07.830
No discard. OK, that's good.

NOTE Confidence: 0.867074128

00:34:07.830 --> 00:34:09.209
So we've got the tuple for each.

NOTE Confidence: 0.867074128

00:34:09.210 --> 00:34:14.880
Uh, close enough. Now we've got helpers.

NOTE Confidence: 0.867074128

00:34:14.880 --> 00:34:18.107
OK, let's go back to zip view.

NOTE Confidence: 0.867074128

00:34:18.110 --> 00:34:21.230
Range dot zip as we discovered.

NOTE Confidence: 0.867074128

00:34:21.230 --> 00:34:23.780
I want the whole stable name.

NOTE Confidence: 0.867074128

00:34:23.780 --> 00:34:26.558
This will cooperate.

NOTE Confidence: 0.867074128

00:34:26.560 --> 00:34:28.390
Come on.

NOTE Confidence: 0.867074128

00:34:28.390 --> 00:34:28.879
There we go.

NOTE Confidence: 0.802311882222222

00:34:31.320 --> 00:34:32.975
OK, this is not depicting

NOTE Confidence: 0.802311882222222

00:34:32.975 --> 00:34:34.299
an all random access,

NOTE Confidence: 0.802311882222222

00:34:34.300 --> 00:34:37.414
but I'm guessing it's going to come up here.

NOTE Confidence: 0.802311882222222

00:34:37.420 --> 00:34:40.794
Yeah, and would that maybe can't stuff.

NOTE Confidence: 0.802311882222222

00:34:40.800 --> 00:34:45.888
OK. So what are we doing here?

NOTE Confidence: 0.802311882222222

00:34:45.890 --> 00:34:47.945
Again, internal machinery template on

NOTE Confidence: 0.802311882222222

00:34:47.945 --> 00:34:50.984
bool is constant class dot views concept.

NOTE Confidence: 0.802311882222222

00:34:50.984 --> 00:34:53.866
All random access is. Old expression.

NOTE Confidence: 0.802311882222222

00:34:53.866 --> 00:34:55.637
How do we ever live without them?

NOTE Confidence: 0.802311882222222

00:34:55.640 --> 00:34:58.484
Random access range may be constant, so we

NOTE Confidence: 0.802311882222222

00:34:58.484 --> 00:35:00.236
applied the maybe constant constant views.

NOTE Confidence: 0.802311882222222

00:35:00.240 --> 00:35:04.170
OK. All bidirectional is bidirectional range

NOTE Confidence: 0.802311882222222

00:35:04.170 --> 00:35:07.890
blah, all forward is forward range blah.

NOTE Confidence: 0.802311882222222

00:35:07.890 --> 00:35:10.598
OK, that seems reasonable.

NOTE Confidence: 0.802311882222222

00:35:10.600 --> 00:35:13.644
Next stop. OK,

NOTE Confidence: 0.802311882222222

00:35:13.644 --> 00:35:16.128
another helper zip gets smallest distance.

NOTE Confidence: 0.802311882222222

00:35:16.130 --> 00:35:19.910
Is this depicted in the standard?

NOTE Confidence: 0.802311882222222

00:35:19.910 --> 00:35:23.390
Ohh and looking here, this is from iterator.

NOTE Confidence: 0.802311882222222

00:35:23.390 --> 00:35:25.000
OK so we can highlight this because

NOTE Confidence: 0.802311882222222

00:35:25.000 --> 00:35:26.400
it's done all random access.

NOTE Confidence: 0.802311882222222

00:35:26.400 --> 00:35:28.610
Yep, that's that. Maybe consed.

NOTE Confidence: 0.802311882222222

00:35:28.610 --> 00:35:29.818
Maybe cons, maybe cons?

NOTE Confidence: 0.802311882222222

00:35:29.818 --> 00:35:33.230
Yep, exactly find the standard names.

NOTE Confidence: 0.802311882222222

00:35:33.230 --> 00:35:33.938
Let's see,

NOTE Confidence: 0.802311882222222

00:35:33.938 --> 00:35:36.770
does it have a zip get smallest distance?

NOTE Confidence: 0.804764253333333

00:35:44.190 --> 00:35:45.480
Likely this here.

NOTE Confidence: 0.796712407142857

00:35:48.770 --> 00:35:51.164
And there are some maximum stuff here.

NOTE Confidence: 0.796712407142857

00:35:51.170 --> 00:35:53.570
OK, where exactly is this called?

NOTE Confidence: 0.75687368

00:35:57.810 --> 00:35:59.889
It's called in the minus of iterators,

NOTE Confidence: 0.75687368

00:35:59.890 --> 00:36:02.707
which is in fact what I'm looking at here.

NOTE Confidence: 0.75687368

00:36:02.710 --> 00:36:05.920
This is ITER minus enter.

NOTE Confidence: 0.75687368

00:36:05.920 --> 00:36:07.960
Where is the generator minus sitter?

NOTE Confidence: 0.75687368

00:36:07.960 --> 00:36:09.490
No, I'm looking at Sentinel here.

NOTE Confidence: 0.634953555

00:36:11.620 --> 00:36:13.084
Getter minus sitter.

NOTE Confidence: 0.634953555

00:36:13.084 --> 00:36:16.990
Here we go. This stuff. OK.

NOTE Confidence: 0.76585056

00:36:19.150 --> 00:36:21.190
So let's go back up to the definition.

NOTE Confidence: 0.874129008

00:36:24.470 --> 00:36:26.290
OK, so what's happening here?

NOTE Confidence: 0.874129008

00:36:26.290 --> 00:36:29.160
Um template class under score

NOTE Confidence: 0.874129008

00:36:29.160 --> 00:36:32.672
result type class dot allahs tuple

NOTE Confidence: 0.874129008

00:36:32.672 --> 00:36:35.894
types plus dot rohs tuple types?

NOTE Confidence: 0.874129008

00:36:35.900 --> 00:36:39.785
OK. And this is constrained to

NOTE Confidence: 0.874129008

00:36:39.785 --> 00:36:41.834
exist only when the size of

NOTE Confidence: 0.874129008

00:36:41.834 --> 00:36:43.202
the tuple types are the same.

NOTE Confidence: 0.90218627375

00:36:46.090 --> 00:36:47.825
I'm not sure that this

NOTE Confidence: 0.90218627375

00:36:47.825 --> 00:36:48.866
constraint is necessary.

NOTE Confidence: 0.90218627375

00:36:48.870 --> 00:36:51.030
This is only needed when general.

NOTE Confidence: 0.90218627375

00:36:51.030 --> 00:36:53.290
You only need constraints to

NOTE Confidence: 0.90218627375

00:36:53.290 --> 00:36:54.646
disambiguate overload resolution.

NOTE Confidence: 0.90218627375

00:36:54.650 --> 00:36:55.631
If this simply.

NOTE Confidence: 0.90218627375

00:36:55.631 --> 00:36:57.266
If we can structurally guarantee

NOTE Confidence: 0.90218627375

00:36:57.266 --> 00:36:59.438
that this is only called with

NOTE Confidence: 0.90218627375

00:36:59.438 --> 00:37:00.527
identically sized tuples,

NOTE Confidence: 0.90218627375

00:37:00.530 --> 00:37:02.000
then really this could be a

NOTE Confidence: 0.90218627375

00:37:02.000 --> 00:37:03.480
static cert instead of requires.

NOTE Confidence: 0.77127515

00:37:07.710 --> 00:37:10.860
In the olden days with um.

NOTE Confidence: 0.77127515

00:37:10.860 --> 00:37:12.460
When our only machinery was

NOTE Confidence: 0.77127515

00:37:12.460 --> 00:37:14.100
like spine with Enable, if,

NOTE Confidence: 0.77127515

00:37:14.100 --> 00:37:15.690
I would absolutely ask, yeah,

NOTE Confidence: 0.77127515

00:37:15.690 --> 00:37:16.440
there should be a stack.

NOTE Confidence: 0.77127515

00:37:16.440 --> 00:37:19.040
Assert concepts are not as

NOTE Confidence: 0.77127515

00:37:19.040 --> 00:37:21.640
egregious as enable if and.

NOTE Confidence: 0.77127515

00:37:21.640 --> 00:37:23.902
It's still not conventional to use

NOTE Confidence: 0.77127515

00:37:23.902 --> 00:37:26.860
this when a stack cert would suffice.

NOTE Confidence: 0.77127515

00:37:26.860 --> 00:37:28.410
But it's not completely wacky.

NOTE Confidence: 0.915492821666667

00:37:31.770 --> 00:37:34.262
I would be OK with this. I wouldn't.

NOTE Confidence: 0.915492821666667

00:37:34.262 --> 00:37:35.558
I wouldn't have written it like

NOTE Confidence: 0.915492821666667

00:37:35.558 --> 00:37:37.274
this myself, but I don't view

NOTE Confidence: 0.915492821666667

00:37:37.274 --> 00:37:38.558
this as inherently objectionable.

NOTE Confidence: 0.83463916

00:37:40.720 --> 00:37:42.240
And perhaps someday it may

NOTE Confidence: 0.83463916

00:37:42.240 --> 00:37:43.456
even become good style.

NOTE Confidence: 0.83463916

00:37:43.460 --> 00:37:44.748
Just say, hey, you know, list your

NOTE Confidence: 0.83463916

00:37:44.748 --> 00:37:46.182
requirements up front rather than just

NOTE Confidence: 0.83463916

00:37:46.182 --> 00:37:47.459
assuming stuff in static asserting.

NOTE Confidence: 0.83463916

00:37:47.460 --> 00:37:48.144
If it goes wrong,

NOTE Confidence: 0.83463916

00:37:48.144 --> 00:37:49.400
I could see an argument for that.

NOTE Confidence: 0.83463916

00:37:49.400 --> 00:37:50.856
I kind of think the static assert

NOTE Confidence: 0.83463916

00:37:50.856 --> 00:37:52.420
is cheaper in terms of throughput,

NOTE Confidence: 0.83463916

00:37:52.420 --> 00:37:54.760
but if it's not overloaded,

NOTE Confidence: 0.83463916

00:37:54.760 --> 00:37:55.915
I think it's about the

NOTE Confidence: 0.83463916

00:37:55.915 --> 00:37:56.608
same throughput anyways.

NOTE Confidence: 0.81399247

00:37:59.960 --> 00:38:01.836
OK I I'll leave this for now.

NOTE Confidence: 0.81399247

00:38:01.840 --> 00:38:03.925
I'm not gonna not gonna

NOTE Confidence: 0.81399247

00:38:03.925 --> 00:38:06.236
comment on that. Of course,

NOTE Confidence: 0.81399247

00:38:06.236 --> 00:38:08.876
because doesn't really user impact.

NOTE Confidence: 0.81399247

00:38:08.880 --> 00:38:13.416
OK, so this helper is marked no discard.

NOTE Confidence: 0.81399247

00:38:13.420 --> 00:38:14.804
That's interesting that the

NOTE Confidence: 0.81399247

00:38:14.804 --> 00:38:16.188
previous helpers were not.

NOTE Confidence: 0.811406253571428

00:38:19.400 --> 00:38:20.082
Slightly inconsistent,

NOTE Confidence: 0.811406253571428

00:38:20.082 --> 00:38:22.128
but at least this whole group

NOTE Confidence: 0.811406253571428

00:38:22.128 --> 00:38:23.898
was marked and this is marked.

NOTE Confidence: 0.811406253571428

00:38:23.900 --> 00:38:27.362
OK, I'll get this so it's

NOTE Confidence: 0.811406253571428

00:38:27.362 --> 00:38:29.093
not scarred constexpr.

NOTE Confidence: 0.811406253571428

00:38:29.100 --> 00:38:32.228
OK, so we explicitly specify the result type.

NOTE Confidence: 0.811406253571428

00:38:32.230 --> 00:38:33.975
Probably because we have to

NOTE Confidence: 0.811406253571428

00:38:33.975 --> 00:38:35.720
determine or use different type.

NOTE Confidence: 0.811406253571428

00:38:35.720 --> 00:38:38.610
Whatever zip gets smallest distance,

NOTE Confidence: 0.811406253571428

00:38:38.610 --> 00:38:41.618
we take cons tuple of stuff, LHHS tuple,

NOTE Confidence: 0.811406253571428

00:38:41.618 --> 00:38:46.370
cons tuple of right stuff ref RCHS tuple.

NOTE Confidence: 0.811406253571428

00:38:46.370 --> 00:38:50.794
This is not strengthened in any way.

NOTE Confidence: 0.811406253571428

00:38:50.800 --> 00:38:52.355
But neither is the operator

NOTE Confidence: 0.811406253571428

00:38:52.355 --> 00:38:53.599
minus required to be.

NOTE Confidence: 0.811406253571428

00:38:53.600 --> 00:38:55.690
Does anybody calling this strengthened

NOTE Confidence: 0.811406253571428

00:38:55.690 --> 00:38:59.129
because we need to make sure at all levels.

NOTE Confidence: 0.811406253571428

00:38:59.130 --> 00:39:02.430
Ah. Look at this.

NOTE Confidence: 0.811406253571428

00:39:02.430 --> 00:39:04.804
So operator minus is strengthened to be.

NOTE Confidence: 0.811406253571428

00:39:04.804 --> 00:39:06.697
I'm no except if this is no except

NOTE Confidence: 0.811406253571428

00:39:06.697 --> 00:39:08.384
what happens if we call zip get

NOTE Confidence: 0.811406253571428

00:39:08.384 --> 00:39:10.064
smallest distance but then zip gets

NOTE Confidence: 0.811406253571428

00:39:10.064 --> 00:39:11.319
smallest distance is never marked.

NOTE Confidence: 0.811406253571428

00:39:11.320 --> 00:39:14.435
So this is identical to noexcept faults.

NOTE Confidence: 0.811406253571428

00:39:14.440 --> 00:39:15.820
So this is an issue.

NOTE Confidence: 0.811406253571428

00:39:15.820 --> 00:39:17.540
If we're going to strengthen

NOTE Confidence: 0.811406253571428

00:39:17.540 --> 00:39:19.260
here we gotta strengthen this.

NOTE Confidence: 0.811406253571428

00:39:19.260 --> 00:39:21.556
OK so now it's time for comment.

NOTE Confidence: 0.811406253571428

00:39:21.560 --> 00:39:24.800
Ohh wait no sorry wow, I can't parse this.

NOTE Confidence: 0.811406253571428

00:39:24.800 --> 00:39:27.080
It's hiding down here in this.

NOTE Confidence: 0.811406253571428

00:39:27.080 --> 00:39:28.739
I missed it because this claim form

NOTE Confidence: 0.811406253571428

00:39:28.739 --> 00:39:30.420
it off looked like it was a body,

NOTE Confidence: 0.811406253571428

00:39:30.420 --> 00:39:33.480
but it's actually strengthened.

NOTE Confidence: 0.811406253571428

00:39:33.480 --> 00:39:34.650
OK, so it is strength.

NOTE Confidence: 0.811406253571428

00:39:34.650 --> 00:39:38.096
So we're fine. OK, false alarm.

NOTE Confidence: 0.811406253571428

00:39:38.096 --> 00:39:40.160
Uh OK, so we take two tuples.

NOTE Confidence: 0.811406253571428

00:39:40.160 --> 00:39:41.464
Uh, suppress claim format.

NOTE Confidence: 0.811406253571428

00:39:41.464 --> 00:39:42.768
Probably because it was

NOTE Confidence: 0.811406253571428

00:39:42.768 --> 00:39:44.199
dealing with this horribly.

NOTE Confidence: 0.811406253571428

00:39:44.200 --> 00:39:45.656
Um, interesting.

NOTE Confidence: 0.811406253571428

00:39:45.656 --> 00:39:50.752
We're we're no except if fold expression.

NOTE Confidence: 0.811406253571428

00:39:50.760 --> 00:39:52.320
Which is why we've got that

NOTE Confidence: 0.811406253571428

00:39:52.320 --> 00:39:53.360
extra layer parents here.

NOTE Confidence: 0.811406253571428

00:39:53.360 --> 00:39:54.854
OK, so all of these things

NOTE Confidence: 0.811406253571428

00:39:54.854 --> 00:39:56.520
have got to be no except,

NOTE Confidence: 0.811406253571428

00:39:56.520 --> 00:39:57.025
um.

NOTE Confidence: 0.811406253571428

00:39:57.025 --> 00:40:00.055
Standfast result type of Astrid deck

NOTE Confidence: 0.811406253571428

00:40:00.055 --> 00:40:02.967
Oval concelhos tuple type siraf minus

NOTE Confidence: 0.811406253571428

00:40:02.967 --> 00:40:06.033
two deck Oval contr tuple type surf.

NOTE Confidence: 0.811406253571428

00:40:06.040 --> 00:40:08.679
So it's asking if we pairwise subtract

NOTE Confidence: 0.811406253571428

00:40:08.679 --> 00:40:11.119
each of these left minus right,

NOTE Confidence: 0.811406253571428

00:40:11.120 --> 00:40:12.221
left minus right,

NOTE Confidence: 0.811406253571428

00:40:12.221 --> 00:40:14.423
over and over are all those

NOTE Confidence: 0.811406253571428

00:40:14.423 --> 00:40:15.569
expressions now except.

NOTE Confidence: 0.811406253571428

00:40:15.570 --> 00:40:16.890
OK, that is correct.

NOTE Confidence: 0.811406253571428

00:40:16.890 --> 00:40:19.230
Assuming that's what we're gonna do here.

NOTE Confidence: 0.811406253571428

00:40:19.230 --> 00:40:21.614
Um, OK, I see.

NOTE Confidence: 0.811406253571428

00:40:21.614 --> 00:40:22.210
Casey,

NOTE Confidence: 0.811406253571428

00:40:22.210 --> 00:40:23.310
would you like to contribute

NOTE Confidence: 0.811406253571428

00:40:23.310 --> 00:40:24.190
something to the class?

NOTE Confidence: 0.811406253571428

00:40:24.190 --> 00:40:26.440
I I would like to suggest that we use

NOTE Confidence: 0.811406253571428

00:40:26.440 --> 00:40:28.870
the names of the parameters instead of

NOTE Confidence: 0.811406253571428

00:40:28.870 --> 00:40:31.880
calling stood decal Val to get things

NOTE Confidence: 0.811406253571428

00:40:31.880 --> 00:40:35.590
of this type and and value category.

NOTE Confidence: 0.811406253571428

00:40:35.590 --> 00:40:37.958
But then we would need get and we

NOTE Confidence: 0.811406253571428

00:40:37.958 --> 00:40:39.717
would need index because these

NOTE Confidence: 0.811406253571428

00:40:39.717 --> 00:40:41.901
are the elements of the tuples

NOTE Confidence: 0.811406253571428

00:40:41.901 --> 00:40:44.290
and we've got to crack them open.

NOTE Confidence: 0.811406253571428

00:40:44.290 --> 00:40:45.490
How would you phrase it?

NOTE Confidence: 0.811406253571428

00:40:45.490 --> 00:40:46.876
With the parameters,

NOTE Confidence: 0.811406253571428

00:40:46.876 --> 00:40:48.840
ohh OK, we don't have any.

NOTE Confidence: 0.811406253571428

00:40:48.840 --> 00:40:50.700
We don't have an integer sequence here.

NOTE Confidence: 0.811406253571428

00:40:50.700 --> 00:40:53.106
I was missing that. Never mind.

NOTE Confidence: 0.811406253571428

00:40:53.110 --> 00:40:55.010
OK.

NOTE Confidence: 0.811406253571428

00:40:55.010 --> 00:40:57.166
In general, definitely a good good question.

NOTE Confidence: 0.811406253571428

00:40:57.170 --> 00:40:58.592
Um, because if we could just

NOTE Confidence: 0.811406253571428

00:40:58.592 --> 00:40:59.540
mention the parameter names,

NOTE Confidence: 0.811406253571428

00:40:59.540 --> 00:41:00.512
then that's simpler.

NOTE Confidence: 0.811406253571428

00:41:00.512 --> 00:41:02.780
But here we actually do need this

NOTE Confidence: 0.811406253571428

00:41:02.847 --> 00:41:04.530
complicated full expression.

NOTE Confidence: 0.811406253571428

00:41:04.530 --> 00:41:04.825
OK,

NOTE Confidence: 0.811406253571428

00:41:04.825 --> 00:41:06.890
I can already see that we've got

NOTE Confidence: 0.811406253571428

00:41:06.890 --> 00:41:08.618
some stood qualified size T,

NOTE Confidence: 0.811406253571428

00:41:08.620 --> 00:41:11.218
which we should just not qualify

NOTE Confidence: 0.811406253571428

00:41:11.218 --> 00:41:14.099
at all because we're within stood.

NOTE Confidence: 0.811406253571428

00:41:14.100 --> 00:41:20.379
The two occurrences of stood size T

NOTE Confidence: 0.811406253571428

00:41:20.379 --> 00:41:25.228
here should simply be unqualified

NOTE Confidence: 0.811406253571428

00:41:25.228 --> 00:41:28.978
as we're within stood,

NOTE Confidence: 0.811406253571428

00:41:28.978 --> 00:41:34.284
so we'll always find the type def.

NOTE Confidence: 0.811406253571428

00:41:34.290 --> 00:41:38.079
Beth. No addl concerns.

NOTE Confidence: 0.750994798333333

00:41:42.010 --> 00:41:43.956
Uh, the two occurrences of size T

NOTE Confidence: 0.750994798333333

00:41:43.956 --> 00:41:45.422
here should simply be unqualified

NOTE Confidence: 0.750994798333333

00:41:45.422 --> 00:41:47.144
as we as we're within stood,

NOTE Confidence: 0.750994798333333

00:41:47.150 --> 00:41:48.627
so we'll always find the type def.

NOTE Confidence: 0.750994798333333

00:41:48.630 --> 00:41:51.168
No addl concerns.

NOTE Confidence: 0.750994798333333

00:41:51.170 --> 00:41:54.446
OK, Um, wow claim format like.

NOTE Confidence: 0.750994798333333

00:41:54.450 --> 00:41:56.186
It's really not having a good day here.

NOTE Confidence: 0.750994798333333

00:41:56.190 --> 00:41:59.190
Hopefully 15 handles this better.

NOTE Confidence: 0.750994798333333

00:41:59.190 --> 00:42:01.310
OK, so we're going to have a constant

NOTE Confidence: 0.750994798333333

00:42:01.310 --> 00:42:03.410
auto get smallest distance closure.

NOTE Confidence: 0.750994798333333

00:42:03.410 --> 00:42:05.510
That's a Lambda that captures

NOTE Confidence: 0.750994798333333

00:42:05.510 --> 00:42:11.129
the tuples by ref, and it is.

NOTE Confidence: 0.750994798333333

00:42:11.130 --> 00:42:16.240
Templated. Interesting.

NOTE Confidence: 0.750994798333333

00:42:16.240 --> 00:42:18.720
On a pack of stuff.

NOTE Confidence: 0.750994798333333

00:42:18.720 --> 00:42:20.528
Science, T first, edx.

NOTE Confidence: 0.857563382727273

00:42:23.220 --> 00:42:24.696
I don't know why this is

NOTE Confidence: 0.857563382727273

00:42:24.696 --> 00:42:25.840
commented out as default 0.

NOTE Confidence: 0.894007792

00:42:28.830 --> 00:42:30.450
We don't pass anything here.

NOTE Confidence: 0.918678812222222

00:42:34.210 --> 00:42:35.650
I'm really confused as

NOTE Confidence: 0.918678812222222

00:42:35.650 --> 00:42:37.450
to what's going on here.

NOTE Confidence: 0.918678812222222

00:42:37.450 --> 00:42:39.110
There's only two occurrences.

NOTE Confidence: 0.918678812222222

00:42:39.110 --> 00:42:41.600
We always just give it index

NOTE Confidence: 0.918678812222222

00:42:41.671 --> 00:42:43.500
sequence for we deduce.

NOTE Confidence: 0.844322841818182

00:42:45.920 --> 00:42:46.988
I I don't see why we

NOTE Confidence: 0.844322841818182

00:42:46.988 --> 00:42:47.920
need this comment at all.

NOTE Confidence: 0.844322841818182

00:42:47.920 --> 00:42:50.568
It it it's not like it's been declared

NOTE Confidence: 0.844322841818182

00:42:50.568 --> 00:42:52.468
elsewhere to be defaulted to 0.

NOTE Confidence: 0.844322841818182

00:42:52.470 --> 00:42:56.328
If index sequence is empty then.

NOTE Confidence: 0.844322841818182

00:42:56.330 --> 00:42:57.914
I'm assuming we can't call this at all.

NOTE Confidence: 0.803993922222222

00:43:03.120 --> 00:43:04.655
This assumes that there's at

NOTE Confidence: 0.803993922222222

00:43:04.655 --> 00:43:05.883
least one that's interesting.

NOTE Confidence: 0.803993922222222

00:43:05.890 --> 00:43:07.238
Does this have a?

NOTE Confidence: 0.803993922222222

00:43:07.238 --> 00:43:09.260
Does does this have trouble if

NOTE Confidence: 0.803993922222222

00:43:09.338 --> 00:43:11.660
we are attempting to zip nothing?

NOTE Confidence: 0.803993922222222

00:43:11.660 --> 00:43:13.444
I'm not even sure if that's well formed, um.

NOTE Confidence: 0.803993922222222

00:43:13.444 --> 00:43:14.788
But that's the first question I

NOTE Confidence: 0.803993922222222

00:43:14.788 --> 00:43:16.259
have when I see something cracking

NOTE Confidence: 0.803993922222222

00:43:16.259 --> 00:43:17.995
open a pack of types and then

NOTE Confidence: 0.803993922222222

00:43:18.050 --> 00:43:19.912
assuming that there's always one um.

NOTE Confidence: 0.803993922222222

00:43:19.912 --> 00:43:22.900
OK, so I think the comment should be there.

NOTE Confidence: 0.803993922222222

00:43:22.900 --> 00:43:24.826
Then there's a question of what

NOTE Confidence: 0.803993922222222

00:43:24.826 --> 00:43:26.839
happens if this stuff is emptied.

NOTE Confidence: 0.803993922222222

00:43:26.840 --> 00:43:30.440
Requirements. OK, wonderful.

NOTE Confidence: 0.803993922222222

00:43:30.440 --> 00:43:32.024
OK, but I think this comment

NOTE Confidence: 0.803993922222222

00:43:32.024 --> 00:43:33.080
should not be here.

NOTE Confidence: 0.803993922222222

00:43:33.080 --> 00:43:36.966
Um. Let's see, I uh,

NOTE Confidence: 0.803993922222222

00:43:36.966 --> 00:43:38.850
let's ask cause I'm could be

NOTE Confidence: 0.803993922222222

00:43:38.922 --> 00:43:41.222
confused rather than saying there's

NOTE Confidence: 0.803993922222222

00:43:41.222 --> 00:43:43.522
definitely no reason for this.

NOTE Confidence: 0.803993922222222

00:43:43.530 --> 00:43:44.472
And then it turns out there's

NOTE Confidence: 0.803993922222222

00:43:44.472 --> 00:43:45.529
a reason and I look silly.

NOTE Confidence: 0.808786106666667

00:43:47.930 --> 00:43:50.922
Let's see what's, um,

NOTE Confidence: 0.808786106666667

00:43:50.922 --> 00:43:54.662
the purpose of the comment.

NOTE Confidence: 0.808786106666667

00:43:54.670 --> 00:43:56.740
Equals zero um.

NOTE Confidence: 0.808786106666667

00:43:56.740 --> 00:44:00.785
There appears to be only one

NOTE Confidence: 0.808786106666667

00:44:00.785 --> 00:44:03.760
use of get smallest disclosure.

NOTE Confidence: 0.716216948333333

00:44:08.030 --> 00:44:10.200
Immediately below.

NOTE Confidence: 0.716216948333333

00:44:10.200 --> 00:44:15.490
And it deduces um. 1st.

NOTE Confidence: 0.716216948333333

00:44:15.490 --> 00:44:20.240
It exists, so there's no.

NOTE Confidence: 0.716216948333333

00:44:20.240 --> 00:44:22.690
Default. Behavior.

NOTE Confidence: 0.716216948333333

00:44:22.690 --> 00:44:25.350
OK, what's the purpose of the comment?

NOTE Confidence: 0.716216948333333

00:44:25.350 --> 00:44:26.320
Equals zero. There appears to

NOTE Confidence: 0.716216948333333

00:44:26.320 --> 00:44:27.976
be only one use of get smallest

NOTE Confidence: 0.716216948333333

00:44:27.976 --> 00:44:29.268
distance closure immediately below,

NOTE Confidence: 0.716216948333333

00:44:29.270 --> 00:44:30.958
and it deduces first,

NOTE Confidence: 0.716216948333333

00:44:30.958 --> 00:44:33.068
so there's no default behavior.

NOTE Confidence: 0.716216948333333

00:44:33.070 --> 00:44:34.082
OK, interesting.

NOTE Confidence: 0.716216948333333

00:44:34.082 --> 00:44:37.118
We are using tag dispatch because

NOTE Confidence: 0.716216948333333

00:44:37.118 --> 00:44:40.400
that's the only way here to get access

NOTE Confidence: 0.716216948333333

00:44:40.400 --> 00:44:42.965
to this list of types if CONSTEXPR

NOTE Confidence: 0.716216948333333

00:44:42.965 --> 00:44:44.800
has not quite superseded that.

NOTE Confidence: 0.716216948333333

00:44:44.800 --> 00:44:46.798
So we take an index sequence.

NOTE Confidence: 0.716216948333333

00:44:46.800 --> 00:44:49.923
Uh, first index and then a bunch of indexes.

NOTE Confidence: 0.716216948333333

00:44:49.930 --> 00:44:51.140
Ah, OK.

NOTE Confidence: 0.854728700833333

00:44:53.840 --> 00:44:55.112
I'm trying to look at what

NOTE Confidence: 0.854728700833333

00:44:55.112 --> 00:44:56.439
the first index is used for.

NOTE Confidence: 0.854728700833333

00:44:56.440 --> 00:44:59.268
Where is it mentioned?

NOTE Confidence: 0.854728700833333

00:44:59.270 --> 00:45:00.500
It's not mentioned.

NOTE Confidence: 0.87618418

00:45:08.370 --> 00:45:11.260
Oh, it's just. I see.

NOTE Confidence: 0.87618418

00:45:11.260 --> 00:45:14.910
I see what that equals 0 means. Here.

NOTE Confidence: 0.87618418

00:45:14.910 --> 00:45:17.060
It's. It's acknowledging that the

NOTE Confidence: 0.87618418

00:45:17.060 --> 00:45:19.619
sequence will always start with zero

NOTE Confidence: 0.87618418

00:45:19.619 --> 00:45:21.917
because we're using index sequence 4.

NOTE Confidence: 0.87618418

00:45:21.920 --> 00:45:24.304
So it's the comment is a reminder that

NOTE Confidence: 0.87618418

00:45:24.304 --> 00:45:26.524
first it explore absorb the zero and

NOTE Confidence: 0.87618418

00:45:26.524 --> 00:45:29.095
then the IT exists or one and above

NOTE Confidence: 0.87618418

00:45:29.095 --> 00:45:31.314
here we just directly hard code zero

NOTE Confidence: 0.87618418

00:45:31.320 --> 00:45:34.173
to get the first stuff and then we look

NOTE Confidence: 0.87618418

00:45:34.173 --> 00:45:37.139
at the rest of them with the indexes.

NOTE Confidence: 0.87618418

00:45:37.140 --> 00:45:38.440
So it's not a default,

NOTE Confidence: 0.87618418

00:45:38.440 --> 00:45:41.499
it's a reminder of what it is.

NOTE Confidence: 0.87618418

00:45:41.500 --> 00:45:42.234
That's reasonable.

NOTE Confidence: 0.87618418

00:45:42.234 --> 00:45:44.803
Um, it's just because I'm reading it

NOTE Confidence: 0.87618418

00:45:44.803 --> 00:45:46.889
strictly top down that I was confused.

NOTE Confidence: 0.802924282

00:45:48.910 --> 00:45:50.880
OK, I'll retract my comment.

NOTE Confidence: 0.802924282

00:45:50.880 --> 00:45:52.152
I found the purpose.

NOTE Confidence: 0.802924282

00:45:52.152 --> 00:45:54.060
That's pretty thoughtful to have it,

NOTE Confidence: 0.802924282

00:45:54.060 --> 00:45:56.140
so thank you. Uh OK.

NOTE Confidence: 0.802924282

00:45:56.140 --> 00:46:00.916
So an equivalence for syndics edx dot dot,

NOTE Confidence: 0.802924282

00:46:00.920 --> 00:46:02.250
I suppose it could have just been

NOTE Confidence: 0.802924282

00:46:02.250 --> 00:46:04.188
named like 0, but that's fine.

NOTE Confidence: 0.883132871666667

00:46:06.340 --> 00:46:07.756
OK, so what's going on here?

NOTE Confidence: 0.883132871666667

00:46:07.760 --> 00:46:09.098
We get a constant result type.

NOTE Confidence: 0.883132871666667

00:46:09.100 --> 00:46:12.915
First size is static cast result type.

NOTE Confidence: 0.883132871666667

00:46:12.920 --> 00:46:14.380
I've still got 0 OHS.

NOTE Confidence: 0.883132871666667

00:46:14.380 --> 00:46:16.340
Minus still get 0 Rohs.

NOTE Confidence: 0.883132871666667

00:46:16.340 --> 00:46:18.818
OK, we're always doing left minus right?

NOTE Confidence: 0.883132871666667

00:46:18.820 --> 00:46:23.078
OK, if that first size is 0,

NOTE Confidence: 0.883132871666667

00:46:23.080 --> 00:46:25.168
so if there are no differences

NOTE Confidence: 0.883132871666667

00:46:25.168 --> 00:46:26.560
between the first iterators,

NOTE Confidence: 0.883132871666667

00:46:26.560 --> 00:46:27.856
then the smallest is.

NOTE Confidence: 0.883132871666667

00:46:27.856 --> 00:46:28.982
Well, you win.

NOTE Confidence: 0.883132871666667

00:46:28.982 --> 00:46:31.789
It's zero, we can just short circuit.

NOTE Confidence: 0.883132871666667

00:46:31.790 --> 00:46:35.414
Otherwise, maybe some of the other stuff is.

NOTE Confidence: 0.883132871666667

00:46:35.420 --> 00:46:37.760
Uh, otherwise we're non 0,

NOTE Confidence: 0.883132871666667

00:46:37.760 --> 00:46:39.881
so maybe some of the other stuff

NOTE Confidence: 0.883132871666667

00:46:39.881 --> 00:46:41.897
is non zero and we need to.

NOTE Confidence: 0.883132871666667

00:46:41.900 --> 00:46:44.800
Subtract now, I'm assuming.

NOTE Confidence: 0.883132871666667

00:46:44.800 --> 00:46:46.438
This seems like it's assuming that

NOTE Confidence: 0.883132871666667

00:46:46.438 --> 00:46:48.210
none of these will be negative.

NOTE Confidence: 0.765071738333333

00:46:50.360 --> 00:46:52.676
How does the operator minus work?

NOTE Confidence: 0.765071738333333

00:46:52.680 --> 00:46:55.536
Is it doing some sort of absolute value?

NOTE Confidence: 0.765071738333333

00:46:55.540 --> 00:46:57.976
The value with the smallest absolute value.

NOTE Confidence: 0.765071738333333

00:46:57.980 --> 00:46:59.807
OK, OK, so if we find 0,

NOTE Confidence: 0.765071738333333

00:46:59.810 --> 00:47:00.866
that's by definition the

NOTE Confidence: 0.765071738333333

00:47:00.866 --> 00:47:01.658
smallest absolute value,

NOTE Confidence: 0.765071738333333

00:47:01.660 --> 00:47:02.792
so that definitely wins.

NOTE Confidence: 0.765071738333333

00:47:02.792 --> 00:47:04.207
But if we get nonzero,

NOTE Confidence: 0.765071738333333

00:47:04.210 --> 00:47:05.590
whether a little bit bigger than

NOTE Confidence: 0.765071738333333

00:47:05.590 --> 00:47:07.318
zero or a little bit less than 0,

NOTE Confidence: 0.765071738333333

00:47:07.320 --> 00:47:08.632
maybe we'll find something

NOTE Confidence: 0.765071738333333

00:47:08.632 --> 00:47:10.450
at zero later on. OK.

NOTE Confidence: 0.8435066925

00:47:12.920 --> 00:47:15.230
And there's no algorithm that

NOTE Confidence: 0.8435066925

00:47:15.230 --> 00:47:17.470
really short circuits, um.

NOTE Confidence: 0.877740432

00:47:22.200 --> 00:47:24.470
Interesting that this is not.

NOTE Confidence: 0.877740432

00:47:24.470 --> 00:47:25.675
We're not taking the absolute

NOTE Confidence: 0.877740432

00:47:25.675 --> 00:47:28.038
value out of all of these. Um.

NOTE Confidence: 0.877740432

00:47:28.038 --> 00:47:32.920
It's like doing the subtractions. And then?

NOTE Confidence: 0.74976831125

00:47:35.210 --> 00:47:36.812
That's odd. I'm trying to think

NOTE Confidence: 0.74976831125

00:47:36.812 --> 00:47:38.539
like what happens because I haven't

NOTE Confidence: 0.74976831125

00:47:38.539 --> 00:47:39.755
completely read through this.

NOTE Confidence: 0.74976831125

00:47:39.760 --> 00:47:41.392
Um, what happens if you have a mix

NOTE Confidence: 0.74976831125

00:47:41.392 --> 00:47:43.258
of like negative and positive values?

NOTE Confidence: 0.74976831125

00:47:43.260 --> 00:47:45.480
Some are tiny, some are big.

NOTE Confidence: 0.74976831125

00:47:45.480 --> 00:47:46.660
Is what this is doing,

NOTE Confidence: 0.74976831125

00:47:46.660 --> 00:47:49.229
which is not taking the ABS immediately

NOTE Confidence: 0.74976831125

00:47:49.229 --> 00:47:51.539
equivalent to what the standard says,

NOTE Confidence: 0.74976831125

00:47:51.540 --> 00:47:53.298
which says the smallest absolute value.

NOTE Confidence: 0.74976831125

00:47:53.300 --> 00:47:55.310
Because I would expect to directly

NOTE Confidence: 0.74976831125

00:47:55.310 --> 00:47:57.260
translate the standards to apply ABS,

NOTE Confidence: 0.74976831125

00:47:57.260 --> 00:48:00.842
either call ABS or do it

NOTE Confidence: 0.74976831125

00:48:00.842 --> 00:48:03.120
manually and then find the min.

NOTE Confidence: 0.74976831125

00:48:03.120 --> 00:48:06.450
But this is doing something different.

NOTE Confidence: 0.74976831125

00:48:06.450 --> 00:48:09.246
So this forms an initializer list,

NOTE Confidence: 0.74976831125

00:48:09.250 --> 00:48:12.463
A named one, which is a little bit unusual.

NOTE Confidence: 0.74976831125

00:48:12.470 --> 00:48:15.149
It's not wrong.

NOTE Confidence: 0.74976831125

00:48:15.150 --> 00:48:16.734
It's kind of using it as a container,

NOTE Confidence: 0.74976831125

00:48:16.740 --> 00:48:19.125
which is kind of weird, but not wrong.

NOTE Confidence: 0.74976831125

00:48:19.125 --> 00:48:19.630
Um.

NOTE Confidence: 0.765023921666667

00:48:23.590 --> 00:48:25.287
Then what? What do we what? What?

NOTE Confidence: 0.765023921666667

00:48:25.287 --> 00:48:26.589
Where are we giving the sizes?

NOTE Confidence: 0.765023921666667

00:48:26.590 --> 00:48:28.960
Ohh that it's being given to the ranges? OK.

NOTE Confidence: 0.852586375

00:48:31.350 --> 00:48:33.246
That could have used an array,

NOTE Confidence: 0.852586375

00:48:33.250 --> 00:48:35.518
but initializer list is what the

NOTE Confidence: 0.852586375

00:48:35.518 --> 00:48:37.030
classic algorithm will take.

NOTE Confidence: 0.852586375

00:48:37.030 --> 00:48:38.668
So here we actually do want that.

NOTE Confidence: 0.852586375

00:48:38.670 --> 00:48:40.202
OK, constant initializer list

NOTE Confidence: 0.852586375

00:48:40.202 --> 00:48:42.117
result type sizes is brace

NOTE Confidence: 0.852586375

00:48:42.117 --> 00:48:43.688
whatever that first size is,

NOTE Confidence: 0.852586375

00:48:43.690 --> 00:48:45.754
and at this point we know it's nonzero.

NOTE Confidence: 0.852586375

00:48:45.760 --> 00:48:49.198
And then? A

NOTE Confidence: 0.538806381111111

00:48:51.670 --> 00:48:53.480
fold expression, but a pack

NOTE Confidence: 0.538806381111111

00:48:53.480 --> 00:48:54.928
expansion of Stuttgart indexes.

NOTE Confidence: 0.538806381111111

00:48:54.930 --> 00:48:56.730
Left minus X's right,

NOTE Confidence: 0.538806381111111

00:48:56.730 --> 00:48:59.344
over and over and over. OK.

NOTE Confidence: 0.538806381111111

00:48:59.344 --> 00:49:01.892
And then we do this odd sort

NOTE Confidence: 0.538806381111111

00:49:01.892 --> 00:49:04.488
of absolute value thing if the

NOTE Confidence: 0.538806381111111

00:49:04.488 --> 00:49:07.130
first size was negative. Then.

NOTE Confidence: 0.829051432

00:49:09.320 --> 00:49:11.110
Say we have like negative.

NOTE Confidence: 0.829051432

00:49:11.110 --> 00:49:14.766
10 then we look for the maximum of

NOTE Confidence: 0.829051432

00:49:14.766 --> 00:49:18.288
the sizes because we want to find.

NOTE Confidence: 0.829051432

00:49:18.290 --> 00:49:19.965
The biggest, but this is

NOTE Confidence: 0.829051432

00:49:19.965 --> 00:49:20.970
assuming everybody's negative.

NOTE Confidence: 0.846420344375

00:49:23.510 --> 00:49:24.542
I don't think that's right because

NOTE Confidence: 0.846420344375

00:49:24.542 --> 00:49:25.982
what if we have a mix of negative

NOTE Confidence: 0.846420344375

00:49:25.982 --> 00:49:28.360
and positive, if we have -, 10.

NOTE Confidence: 0.846420344375

00:49:28.360 --> 00:49:30.400
And then some of the other

NOTE Confidence: 0.846420344375

00:49:30.400 --> 00:49:34.480
differences are like -, 11 negative,

NOTE Confidence: 0.846420344375

00:49:34.480 --> 00:49:37.920
5A billion positive billion then.

NOTE Confidence: 0.846420344375

00:49:37.920 --> 00:49:39.495
The range is Max will find the

NOTE Confidence: 0.846420344375

00:49:39.495 --> 00:49:41.010
positive billion and we'll return that.

NOTE Confidence: 0.846420344375

00:49:41.010 --> 00:49:42.384
But really we should have said

NOTE Confidence: 0.846420344375

00:49:42.384 --> 00:49:43.761
the small staff site value in

NOTE Confidence: 0.846420344375

00:49:43.761 --> 00:49:45.003
this case whatever I said -,

NOTE Confidence: 0.846420344375

00:49:45.010 --> 00:49:47.714
5 absolute and so should be like 5.

NOTE Confidence: 0.792261471666667

00:49:51.200 --> 00:49:53.160
Ohh I see it returns the value

NOTE Confidence: 0.792261471666667

00:49:53.160 --> 00:49:54.939
with the smallest absolute value.

NOTE Confidence: 0.792261471666667

00:49:54.940 --> 00:49:58.048
So if the smallest absolute value.

NOTE Confidence: 0.792261471666667

00:49:58.050 --> 00:49:59.478
Or if the value with the

NOTE Confidence: 0.792261471666667

00:49:59.478 --> 00:50:00.570
smallest absolute value is -,

NOTE Confidence: 0.792261471666667

00:50:00.570 --> 00:50:01.900
5, we should return negative.

NOTE Confidence: 0.792261471666667

00:50:01.900 --> 00:50:02.473
We don't absent,

NOTE Confidence: 0.792261471666667

00:50:02.473 --> 00:50:03.810
but we do want the smallest one.

NOTE Confidence: 0.792261471666667

00:50:03.810 --> 00:50:05.946
We should not return a billion.

NOTE Confidence: 0.792261471666667

00:50:05.950 --> 00:50:07.758
I think this is incorrect if we have

NOTE Confidence: 0.792261471666667

00:50:07.758 --> 00:50:09.728
a mix of negatives and positives.

NOTE Confidence: 0.918822952857143

00:50:11.930 --> 00:50:14.296
I think it was trying to avoid.

NOTE Confidence: 0.918822952857143

00:50:14.300 --> 00:50:16.280
Greedily taking the absolute value because

NOTE Confidence: 0.918822952857143

00:50:16.280 --> 00:50:19.080
we do need to return the original one,

NOTE Confidence: 0.918822952857143

00:50:19.080 --> 00:50:21.486
but I don't think this is

NOTE Confidence: 0.918822952857143

00:50:21.486 --> 00:50:23.759
the right way to do it.

NOTE Confidence: 0.918822952857143

00:50:23.760 --> 00:50:26.364
In some sense it's like the comparison

NOTE Confidence: 0.918822952857143

00:50:26.364 --> 00:50:28.540
should be done with absolute.

NOTE Confidence: 0.918822952857143

00:50:28.540 --> 00:50:30.493
We could give it a comparator that

NOTE Confidence: 0.918822952857143

00:50:30.493 --> 00:50:32.573
says here's how to compare two values

NOTE Confidence: 0.918822952857143

00:50:32.573 --> 00:50:34.349
you absam and then you compare.

NOTE Confidence: 0.918822952857143

00:50:34.350 --> 00:50:36.828
But then we can find the minimum

NOTE Confidence: 0.918822952857143

00:50:36.828 --> 00:50:38.775
according to that metric and

NOTE Confidence: 0.918822952857143

00:50:38.775 --> 00:50:40.800
then return whatever that is.

NOTE Confidence: 0.918822952857143

00:50:40.800 --> 00:50:41.907
That would be the right way to do it.

NOTE Confidence: 0.918822952857143

00:50:41.910 --> 00:50:46.368
So we would only call min with a predicate.

NOTE Confidence: 0.918822952857143

00:50:46.368 --> 00:50:47.770
OK, I think this is a bug.

NOTE Confidence: 0.918822952857143

00:50:47.770 --> 00:50:49.302
Unless I'm seriously confused

NOTE Confidence: 0.918822952857143

00:50:49.302 --> 00:50:50.834
about how this works.

NOTE Confidence: 0.918822952857143

00:50:50.840 --> 00:50:52.600
It sure seems like the ZIP code the

NOTE Confidence: 0.918822952857143

00:50:52.600 --> 00:50:54.026
miners should be able to handle it.

NOTE Confidence: 0.918822952857143

00:50:54.030 --> 00:50:58.040
Traders being at different positions, um.

NOTE Confidence: 0.940543705

00:51:01.320 --> 00:51:03.948
But I'm not really sure how.

NOTE Confidence: 0.940543705

00:51:03.950 --> 00:51:06.914
All these when zipping are they

NOTE Confidence: 0.940543705

00:51:06.914 --> 00:51:08.484
always marching in lockstep?

NOTE Confidence: 0.940543705

00:51:08.484 --> 00:51:10.632
But then I would have talked

NOTE Confidence: 0.940543705

00:51:10.632 --> 00:51:12.659
about the small absolute value.

NOTE Confidence: 0.940543705

00:51:12.660 --> 00:51:13.748
I I'm I'm confused.

NOTE Confidence: 0.940543705

00:51:13.748 --> 00:51:16.062
I don't think it's possible to get a

NOTE Confidence: 0.940543705

00:51:16.062 --> 00:51:17.940
mixture of negative and positive values,

NOTE Confidence: 0.940543705

00:51:17.940 --> 00:51:19.942
but that's because I don't think it's

NOTE Confidence: 0.940543705

00:51:19.942 --> 00:51:21.669
possible for the iterator repairs to

NOTE Confidence: 0.940543705

00:51:21.669 --> 00:51:23.556
ever get out of sync. Right. Right.

NOTE Confidence: 0.940543705

00:51:23.556 --> 00:51:25.134
Like, I'm trying to figure out,

NOTE Confidence: 0.940543705

00:51:25.140 --> 00:51:26.100
yeah, why does the standard ease,

NOTE Confidence: 0.940543705

00:51:26.100 --> 00:51:27.006
why is it trying to handle,

NOTE Confidence: 0.940543705

00:51:27.010 --> 00:51:28.480
like, you know, you know,

NOTE Confidence: 0.940543705

00:51:28.480 --> 00:51:30.750
what's the different absolute value?

NOTE Confidence: 0.940543705

00:51:30.750 --> 00:51:32.307
When I see that, my mind really goes to,

NOTE Confidence: 0.940543705

00:51:32.310 --> 00:51:34.170
OK, what if they're jumbled,

NOTE Confidence: 0.940543705

00:51:34.170 --> 00:51:36.386
but if it's like we're doing this thing,

NOTE Confidence: 0.940543705

00:51:36.390 --> 00:51:38.400
I think all the constituent distances

NOTE Confidence: 0.940543705

00:51:38.400 --> 00:51:40.761
should be identical and we should be able

NOTE Confidence: 0.940543705

00:51:40.761 --> 00:51:43.039
to return any of them from this function.

NOTE Confidence: 0.940543705

00:51:43.040 --> 00:51:43.900
Yeah. I mean, that's how,

NOTE Confidence: 0.940543705

00:51:43.900 --> 00:51:45.832
that's how a zipper works, right?

NOTE Confidence: 0.940543705

00:51:45.832 --> 00:51:48.118
So. Yeah. Hmm.

NOTE Confidence: 0.940543705

00:51:48.118 --> 00:51:50.404
That's really weird.

NOTE Confidence: 0.940543705

00:51:50.410 --> 00:51:52.560
Is that just a defect in this because of INT?

NOTE Confidence: 0.822672344615385

00:51:57.450 --> 00:51:58.946
You know like if some of the different

NOTE Confidence: 0.822672344615385

00:51:58.946 --> 00:52:00.328
types are like smaller than, bigger,

NOTE Confidence: 0.822672344615385

00:52:00.328 --> 00:52:02.650
but then but then you would run out of

NOTE Confidence: 0.822672344615385

00:52:02.706 --> 00:52:04.624
space like when the smallest one runs

NOTE Confidence: 0.822672344615385

00:52:04.624 --> 00:52:06.798
out of room for the different type.

NOTE Confidence: 0.822672344615385

00:52:06.800 --> 00:52:10.208
Nicole, can you explain?

NOTE Confidence: 0.822672344615385

00:52:10.210 --> 00:52:13.150
To us stupid people is uh

NOTE Confidence: 0.822672344615385

00:52:13.150 --> 00:52:14.200
is Nicole on the call?

NOTE Confidence: 0.876159507777778

00:52:18.360 --> 00:52:21.699
She is not. So we are asking for telepathy.

NOTE Confidence: 0.876159507777778

00:52:21.700 --> 00:52:27.886
Um, that's interesting. So. I think.

NOTE Confidence: 0.876159507777778

00:52:27.890 --> 00:52:29.010
This does mirror to comment.

NOTE Confidence: 0.876159507777778

00:52:29.010 --> 00:52:31.503
The question is, should it be an LWG issue?

NOTE Confidence: 0.876159507777778

00:52:31.510 --> 00:52:34.290
Uh, what's going on here? Um.

NOTE Confidence: 0.7666473962

00:52:36.410 --> 00:52:37.718
Sorry, I'm good.

NOTE Confidence: 0.7666473962

00:52:37.718 --> 00:52:40.770
Nicole has explained it in the chat.

NOTE Confidence: 0.7666473962

00:52:40.770 --> 00:52:41.868
Oh, oh, she's in the chat,

NOTE Confidence: 0.7666473962

00:52:41.870 --> 00:52:43.710
just on the call.

NOTE Confidence: 0.7666473962

00:52:43.710 --> 00:52:45.485
Where we have when our

NOTE Confidence: 0.7666473962

00:52:45.485 --> 00:52:46.550
underlying regular common.

NOTE Confidence: 0.7666473962

00:52:46.550 --> 00:52:49.664
The end iterator of the zip view is the

NOTE Confidence: 0.7666473962

00:52:49.664 --> 00:52:53.145
end iterators of all the underlying views.

NOTE Confidence: 0.7666473962

00:52:53.150 --> 00:52:55.047
And if we don't know the size

NOTE Confidence: 0.7666473962

00:52:55.047 --> 00:52:56.250
of those underlying views,

NOTE Confidence: 0.7666473962

00:52:56.250 --> 00:52:58.266
or they're not random access so we can't

NOTE Confidence: 0.7666473962

00:52:58.266 --> 00:53:00.447
grab an arbitrary iterator out of them,

NOTE Confidence: 0.7666473962

00:53:00.450 --> 00:53:03.698
then we don't know that those end iterators

NOTE Confidence: 0.7666473962

00:53:03.698 --> 00:53:06.328
are actually In Sync with each other.

NOTE Confidence: 0.7666473962

00:53:06.330 --> 00:53:08.234
Ohh because you can exhaust some ranges.

NOTE Confidence: 0.7666473962

00:53:08.240 --> 00:53:11.376
Don't know how long the ranges are.

NOTE Confidence: 0.7666473962

00:53:11.380 --> 00:53:13.440
But what happens if you

NOTE Confidence: 0.7666473962

00:53:13.440 --> 00:53:15.088
exhaust ranges before others?

NOTE Confidence: 0.7666473962

00:53:15.090 --> 00:53:17.240
Did you are you were at the end if you

NOTE Confidence: 0.7666473962

00:53:17.303 --> 00:53:19.799
exhaust one of the ranges before the others?

NOTE Confidence: 0.7666473962

00:53:19.800 --> 00:53:22.830
Yeah, the the the end of the zip view is

NOTE Confidence: 0.7666473962

00:53:22.908 --> 00:53:26.316
when the first underlying range it's its end.

NOTE Confidence: 0.7666473962

00:53:26.320 --> 00:53:28.498
OK, but. But in that case,

NOTE Confidence: 0.7666473962

00:53:28.500 --> 00:53:29.720
aren't they still In Sync?

NOTE Confidence: 0.7666473962

00:53:29.720 --> 00:53:31.736
Don't they all still have the same value?

NOTE Confidence: 0.7666473962

00:53:31.740 --> 00:53:33.570
Yes, the iterator values of

NOTE Confidence: 0.7666473962

00:53:33.570 --> 00:53:37.500
that iterator are In Sync, but.

NOTE Confidence: 0.7666473962

00:53:37.500 --> 00:53:40.839
If you want to model common so your zip

NOTE Confidence: 0.7666473962

00:53:40.839 --> 00:53:44.338
view has an end iterator that it returns.

NOTE Confidence: 0.7666473962

00:53:44.340 --> 00:53:46.092
OK, your underlying ranges are all

NOTE Confidence: 0.7666473962

00:53:46.092 --> 00:53:47.260
forward language forward ranges.

NOTE Confidence: 0.7666473962

00:53:47.260 --> 00:53:49.600
They're all say they're forward

NOTE Confidence: 0.7666473962

00:53:49.600 --> 00:53:50.536
common ranges.

NOTE Confidence: 0.7666473962

00:53:50.540 --> 00:53:52.270
Then your zip using iterator

NOTE Confidence: 0.7666473962

00:53:52.270 --> 00:53:54.999
is a tuple of the end iterators

NOTE Confidence: 0.7666473962

00:53:54.999 --> 00:53:57.309
of all the underlying ranges.

NOTE Confidence: 0.7666473962

00:53:57.310 --> 00:53:59.080
But they may have different

NOTE Confidence: 0.7666473962

00:53:59.080 --> 00:54:01.480
lengths so that one that is the

NOTE Confidence: 0.7666473962

00:54:01.480 --> 00:54:03.440
only value out of sync is int.

NOTE Confidence: 0.7666473962

00:54:03.440 --> 00:54:04.050
Ohh weird.

NOTE Confidence: 0.7666473962

00:54:04.050 --> 00:54:07.410
The only way to get an out of sync value.

NOTE Confidence: 0.7666473962

00:54:07.410 --> 00:54:09.242
Out of the design.

NOTE Confidence: 0.7666473962

00:54:09.242 --> 00:54:10.158
Because otherwise,

NOTE Confidence: 0.7666473962

00:54:10.160 --> 00:54:11.780
and that's why the equality comparison

NOTE Confidence: 0.7666473962

00:54:11.780 --> 00:54:13.878
says if any of them compare equal,

NOTE Confidence: 0.7666473962

00:54:13.880 --> 00:54:14.646
they're equal.

NOTE Confidence: 0.7666473962

00:54:14.646 --> 00:54:16.944
Because that way the end iterator

NOTE Confidence: 0.7666473962

00:54:16.944 --> 00:54:19.359
and the end and the yeah sorry,

NOTE Confidence: 0.7666473962

00:54:19.360 --> 00:54:22.072
the iterator you reach by iterating

NOTE Confidence: 0.7666473962

00:54:22.072 --> 00:54:24.734
through the sequence will be equal

NOTE Confidence: 0.7666473962

00:54:24.734 --> 00:54:27.068
to the iterator that end returns.

NOTE Confidence: 0.7666473962

00:54:27.070 --> 00:54:28.045
Just by that,

NOTE Confidence: 0.7666473962

00:54:28.045 --> 00:54:29.670
they have different constituent values,

NOTE Confidence: 0.7666473962

00:54:29.670 --> 00:54:30.086
OK,

NOTE Confidence: 0.7666473962

00:54:30.086 --> 00:54:31.750
because you're considering it

NOTE Confidence: 0.7666473962

00:54:31.750 --> 00:54:34.866
as soon as somebody hit and OK.

NOTE Confidence: 0.7666473962

00:54:34.866 --> 00:54:36.420
That makes sense.

NOTE Confidence: 0.7666473962

00:54:36.420 --> 00:54:37.120
Um.

NOTE Confidence: 0.743004295

00:54:39.350 --> 00:54:44.620
Yeah, so. OK, so going back here,

NOTE Confidence: 0.743004295

00:54:44.620 --> 00:54:48.360
this is doing subtraction.

NOTE Confidence: 0.743004295

00:54:48.360 --> 00:54:50.536
And it's trying to handle the case of.

NOTE Confidence: 0.743004295

00:54:50.540 --> 00:54:52.238
What if one of these iterators

NOTE Confidence: 0.743004295

00:54:52.238 --> 00:54:53.990
is like the end iterator?

NOTE Confidence: 0.869690413333333

00:54:56.700 --> 00:54:59.588
You have to. Essentially,

NOTE Confidence: 0.869690413333333

00:54:59.588 --> 00:55:02.094
the position of it is virtually the

NOTE Confidence: 0.869690413333333

00:55:02.094 --> 00:55:04.388
one that's closest to the beginning,

NOTE Confidence: 0.869690413333333

00:55:04.390 --> 00:55:09.080
so the smallest absolute value. There are.

NOTE Confidence: 0.747081473846154

00:55:11.380 --> 00:55:12.913
That does get the right answer if

NOTE Confidence: 0.747081473846154

00:55:12.913 --> 00:55:14.300
you like subtract 2 and iterators,

NOTE Confidence: 0.747081473846154

00:55:14.300 --> 00:55:15.610
or if you're end, minus,

NOTE Confidence: 0.747081473846154

00:55:15.610 --> 00:55:16.898
begin, or absolute value,

NOTE Confidence: 0.747081473846154

00:55:16.898 --> 00:55:19.153
because the left hand argument could be

NOTE Confidence: 0.747081473846154

00:55:19.153 --> 00:55:21.313
the end iterator value or the right hand

NOTE Confidence: 0.747081473846154

00:55:21.313 --> 00:55:23.299
argument could be the end iterator value.

NOTE Confidence: 0.747081473846154

00:55:23.300 --> 00:55:25.970
Yeah, yeah. And you can't have

NOTE Confidence: 0.747081473846154

00:55:25.970 --> 00:55:27.750
anything beyond that point,

NOTE Confidence: 0.747081473846154

00:55:27.750 --> 00:55:29.570
so you don't need to worry because,

NOTE Confidence: 0.747081473846154

00:55:29.570 --> 00:55:31.257
um, if you try to increment increment,

NOTE Confidence: 0.747081473846154

00:55:31.260 --> 00:55:34.210
you do stop as soon as one of them hits end.

NOTE Confidence: 0.747081473846154

00:55:34.210 --> 00:55:37.074
OK, so there's limited

NOTE Confidence: 0.747081473846154

00:55:37.074 --> 00:55:38.875
jumbled Ness permitted,

NOTE Confidence: 0.747081473846154

00:55:38.875 --> 00:55:41.795
but can't you still get into the position?

NOTE Confidence: 0.747081473846154

00:55:41.800 --> 00:55:45.200
The case I had where you've got like

NOTE Confidence: 0.747081473846154

00:55:45.200 --> 00:55:48.857
a small negative and a big positive?

NOTE Confidence: 0.747081473846154

00:55:48.860 --> 00:55:50.780
Can't you have that?

NOTE Confidence: 0.747081473846154

00:55:50.780 --> 00:55:52.835
No, ohh because they can't be

NOTE Confidence: 0.747081473846154

00:55:52.835 --> 00:55:54.095
relatively jumbled like that.

NOTE Confidence: 0.747081473846154

00:55:54.100 --> 00:55:56.686
It's either they're all In Sync,

NOTE Confidence: 0.747081473846154

00:55:56.690 --> 00:55:59.042
or you are the end iterator

NOTE Confidence: 0.747081473846154

00:55:59.042 --> 00:56:02.360
and they're jagged. Right, but.

NOTE Confidence: 0.747081473846154

00:56:02.360 --> 00:56:05.664
If you ever have a jagged case that

NOTE Confidence: 0.747081473846154

00:56:05.664 --> 00:56:08.430
you'll never advance past the yeah,

NOTE Confidence: 0.747081473846154

00:56:08.430 --> 00:56:09.370
so the.

NOTE Confidence: 0.747081473846154

00:56:09.370 --> 00:56:12.660
The uh regardless of whether one is

NOTE Confidence: 0.747081473846154

00:56:12.762 --> 00:56:16.696
before or afterwards and the jagged case,

NOTE Confidence: 0.747081473846154

00:56:16.700 --> 00:56:18.890
they all have the same sign.

NOTE Confidence: 0.747081473846154

00:56:18.890 --> 00:56:21.434
It's never possible to have a mix of

NOTE Confidence: 0.747081473846154

00:56:21.434 --> 00:56:23.413
negatives and positives in the jagged

NOTE Confidence: 0.747081473846154

00:56:23.413 --> 00:56:25.710
case and in the non jagged case.

NOTE Confidence: 0.747081473846154

00:56:25.710 --> 00:56:27.120
It's also never possible have a

NOTE Confidence: 0.747081473846154

00:56:27.120 --> 00:56:28.570
mix of negative and positives.

NOTE Confidence: 0.747081473846154

00:56:28.570 --> 00:56:30.330
OK, so that's that's interesting.

NOTE Confidence: 0.747081473846154

00:56:30.330 --> 00:56:34.887
OK, so that indicates this is correct.

NOTE Confidence: 0.747081473846154

00:56:34.890 --> 00:56:37.788
Highly non obvious.

NOTE Confidence: 0.747081473846154

00:56:37.790 --> 00:56:39.925
OK, so let's read this new eyes.

NOTE Confidence: 0.747081473846154

00:56:39.930 --> 00:56:40.950
Uh, constant.

NOTE Confidence: 0.747081473846154

00:56:40.950 --> 00:56:45.030
Let's sizes is first size and then get

NOTE Confidence: 0.747081473846154

00:56:45.131 --> 00:56:49.120
left minus, get right over and over.

NOTE Confidence: 0.747081473846154

00:56:49.120 --> 00:56:51.676
There's no short circuiting if we find a 0,

NOTE Confidence: 0.747081473846154

00:56:51.680 --> 00:56:53.684
but we already tried to find

NOTE Confidence: 0.747081473846154

00:56:53.684 --> 00:56:55.020
like the case where.

NOTE Confidence: 0.747081473846154

00:56:55.020 --> 00:56:56.934
And the thing that the optimization

NOTE Confidence: 0.747081473846154

00:56:56.934 --> 00:56:58.517
is reasonable because most of

NOTE Confidence: 0.747081473846154

00:56:58.517 --> 00:57:00.017
the time if they're non jagged,

NOTE Confidence: 0.747081473846154

00:57:00.020 --> 00:57:01.598
then if the first one zero,

NOTE Confidence: 0.747081473846154

00:57:01.600 --> 00:57:03.455
then hey you're equal you return 0.

NOTE Confidence: 0.747081473846154

00:57:03.460 --> 00:57:04.532
Otherwise if they're not,

NOTE Confidence: 0.747081473846154

00:57:04.532 --> 00:57:06.580
the answer is very very likely nonzero.

NOTE Confidence: 0.747081473846154

00:57:06.580 --> 00:57:10.279
It's only for like we're in a jagged case.

NOTE Confidence: 0.747081473846154

00:57:10.280 --> 00:57:11.150
You might find a 0,

NOTE Confidence: 0.747081473846154

00:57:11.150 --> 00:57:12.630
but we don't really need to optimize that,

NOTE Confidence: 0.747081473846154

00:57:12.630 --> 00:57:14.086
so I don't need to worry about short

NOTE Confidence: 0.747081473846154

00:57:14.086 --> 00:57:15.426
circuiting. OK, so then return.

NOTE Confidence: 0.747081473846154

00:57:15.426 --> 00:57:17.869
If the first size is less than zero,

NOTE Confidence: 0.747081473846154

00:57:17.870 --> 00:57:18.566
it's negative.

NOTE Confidence: 0.747081473846154

00:57:18.566 --> 00:57:21.350
Then we assume they're all the same sign.

NOTE Confidence: 0.747081473846154

00:57:21.350 --> 00:57:23.366
Try to find the maximum of

NOTE Confidence: 0.747081473846154

00:57:23.366 --> 00:57:24.374
the remaining sizes,

NOTE Confidence: 0.747081473846154

00:57:24.380 --> 00:57:25.925
because that one's going to

NOTE Confidence: 0.747081473846154

00:57:25.925 --> 00:57:27.470
be closest to 0 otherwise,

NOTE Confidence: 0.747081473846154

00:57:27.470 --> 00:57:29.770
if the first size is.

NOTE Confidence: 0.747081473846154

00:57:29.770 --> 00:57:30.446
Not less than zero,

NOTE Confidence: 0.747081473846154

00:57:30.446 --> 00:57:31.741
but in this case we know it's

NOTE Confidence: 0.747081473846154

00:57:31.741 --> 00:57:32.931
strictly greater 0 because we

NOTE Confidence: 0.747081473846154

00:57:32.931 --> 00:57:33.883
already tested for quality.

NOTE Confidence: 0.747081473846154

00:57:33.890 --> 00:57:36.706
Then find the minimum of all the sizes.

NOTE Confidence: 0.747081473846154

00:57:36.710 --> 00:57:39.254
OK, that is correct.

NOTE Confidence: 0.747081473846154

00:57:39.254 --> 00:57:39.890
Agreed.

NOTE Confidence: 0.747081473846154

00:57:39.890 --> 00:57:44.706
And then at the end of get smallest

NOTE Confidence: 0.747081473846154

00:57:44.706 --> 00:57:46.590
distance return get smallest

NOTE Confidence: 0.747081473846154

00:57:46.590 --> 00:57:48.290
distance closure because we need

NOTE Confidence: 0.747081473846154

00:57:48.290 --> 00:57:50.392
to expand the pack index sequence

NOTE Confidence: 0.747081473846154

00:57:50.392 --> 00:57:52.087
for LHHS tuple types brace,

NOTE Confidence: 0.747081473846154

00:57:52.090 --> 00:57:55.780
brace and we've already required.

NOTE Confidence: 0.747081473846154

00:57:55.780 --> 00:57:58.126
That they be the same length.

NOTE Confidence: 0.747081473846154

00:57:58.130 --> 00:58:00.581
OK, that is.

NOTE Confidence: 0.747081473846154

00:58:00.581 --> 00:58:01.398
Reasonable.

NOTE Confidence: 0.809785127777778

00:58:03.720 --> 00:58:07.266
OK. And then an equal helper

NOTE Confidence: 0.809785127777778

00:58:07.266 --> 00:58:09.818
template on class tuple types.

NOTE Confidence: 0.809785127777778

00:58:09.818 --> 00:58:11.763
Class tuple types requires that

NOTE Confidence: 0.809785127777778

00:58:11.763 --> 00:58:14.605
the size of LHHS is the size of Rs.

NOTE Confidence: 0.809785127777778

00:58:14.610 --> 00:58:15.906
Here I'm making sure that we

NOTE Confidence: 0.809785127777778

00:58:15.906 --> 00:58:17.290
don't mix up left and right.

NOTE Confidence: 0.809785127777778

00:58:17.290 --> 00:58:20.290
Very very easy. It's no discard.

NOTE Confidence: 0.809785127777778

00:58:20.290 --> 00:58:23.000
OK, so consistent with previous

NOTE Confidence: 0.809785127777778

00:58:23.000 --> 00:58:25.710
considerable zip iterator Sentinel equal.

NOTE Confidence: 0.809785127777778

00:58:25.710 --> 00:58:28.156
OK, so it's not iterator difference, this is.

NOTE Confidence: 0.809785127777778

00:58:28.156 --> 00:58:30.207
Are you just equal to a Sentinel?

NOTE Confidence: 0.809785127777778

00:58:30.210 --> 00:58:32.850
Um, constituent LSRP LHHS

NOTE Confidence: 0.809785127777778

00:58:32.850 --> 00:58:36.150
tuple cons tuple RHS tuple.

NOTE Confidence: 0.809785127777778

00:58:36.150 --> 00:58:40.420
This one is. Strengthened.

NOTE Confidence: 0.809785127777778

00:58:40.420 --> 00:58:41.920
Not come to this strengthened,

NOTE Confidence: 0.809785127777778

00:58:41.920 --> 00:58:44.326
but this one is not exactly

NOTE Confidence: 0.809785127777778

00:58:44.326 --> 00:58:45.529
mapping to anything.

NOTE Confidence: 0.809785127777778

00:58:45.530 --> 00:58:47.010
In the standards, that's fine.

NOTE Confidence: 0.809785127777778

00:58:47.010 --> 00:58:50.052
Um, we're gonna accept if this

NOTE Confidence: 0.809785127777778

00:58:50.052 --> 00:58:53.103
package fold expression is no except

NOTE Confidence: 0.809785127777778

00:58:53.103 --> 00:58:55.881
um stood deck Oval concelhos ref

NOTE Confidence: 0.809785127777778

00:58:55.881 --> 00:58:58.768
equals to Decavalcante RHS ref.

NOTE Confidence: 0.809785127777778

00:58:58.770 --> 00:59:01.950
Okay, comparing 2 cost L values,

NOTE Confidence: 0.809785127777778

00:59:01.950 --> 00:59:05.110
they all got to be no except OK.

NOTE Confidence: 0.809785127777778

00:59:05.110 --> 00:59:09.632
Um constant auto evaluate a

NOTE Confidence: 0.809785127777778

00:59:09.632 --> 00:59:12.872
quality closure is capture left

NOTE Confidence: 0.809785127777778

00:59:12.872 --> 00:59:15.797
and right tuples by ref.

NOTE Confidence: 0.809785127777778

00:59:15.800 --> 00:59:17.736
OK, and then we're gonna go invoke it.

NOTE Confidence: 0.809785127777778

00:59:17.740 --> 00:59:20.158
Uh, template on size dot indices.

NOTE Confidence: 0.809785127777778

00:59:20.160 --> 00:59:22.600
Take index sequence of indices.

NOTE Confidence: 0.809785127777778

00:59:22.600 --> 00:59:25.491
And then just apply is this equal

NOTE Confidence: 0.809785127777778

00:59:25.491 --> 00:59:28.286
to that equal still get indices

NOTE Confidence: 0.809785127777778

00:59:28.286 --> 00:59:31.214
lehs equals to get indices arhs.

NOTE Confidence: 0.809785127777778

00:59:31.220 --> 00:59:31.689
Ah,

NOTE Confidence: 0.809785127777778

00:59:31.689 --> 00:59:35.910
and you're equal if any of them are equal.

NOTE Confidence: 0.809785127777778

00:59:35.910 --> 00:59:40.275
Because you only need one to hit the end.

NOTE Confidence: 0.809785127777778

00:59:40.280 --> 00:59:42.026
OK, so that's why it's more.

NOTE Confidence: 0.8901180225

00:59:44.800 --> 00:59:47.480
OK, so when we actually compute the answer,

NOTE Confidence: 0.8901180225

00:59:47.480 --> 00:59:48.832
we fold over or.

NOTE Confidence: 0.8901180225

00:59:48.832 --> 00:59:50.860
But when we compute no exceptions,

NOTE Confidence: 0.8901180225

00:59:50.860 --> 00:59:52.220
all of them need to be no except.

NOTE Confidence: 0.8901180225

00:59:52.220 --> 00:59:54.330
So we use and there.

NOTE Confidence: 0.8901180225

00:59:54.330 --> 00:59:55.440
Here we're adding the no except.

NOTE Confidence: 0.8901180225

00:59:55.440 --> 00:59:57.276
Here we're using the answers OK,

NOTE Confidence: 0.8901180225

00:59:57.280 --> 00:59:59.224
return to evaluate quality closure on

NOTE Confidence: 0.8901180225

00:59:59.224 --> 01:00:01.535
and index sequence 4 LHHS tuple types

NOTE Confidence: 0.8901180225

01:00:01.535 --> 01:00:03.437
dot brace brace for temporary tag.

NOTE Confidence: 0.8901180225

01:00:03.440 --> 01:00:05.880
Yep, that's good. OK.

NOTE Confidence: 0.8901180225

01:00:05.880 --> 01:00:08.520
Now we can get to the view and

NOTE Confidence: 0.8901180225

01:00:08.520 --> 01:00:11.222
here we have our first export

NOTE Confidence: 0.8901180225

01:00:11.222 --> 01:00:13.507
stood because it is standard.

NOTE Confidence: 0.8901180225

01:00:13.510 --> 01:00:14.713
It's got here.

NOTE Confidence: 0.8901180225

01:00:14.713 --> 01:00:16.718
What's what's cool about export

NOTE Confidence: 0.8901180225

01:00:16.718 --> 01:00:18.600
is that for the range of stuff we

NOTE Confidence: 0.8901180225

01:00:18.600 --> 01:00:19.660
actually need very few of them,

NOTE Confidence: 0.8901180225

01:00:19.660 --> 01:00:21.460
because so much of it is like helper.

NOTE Confidence: 0.8901180225

01:00:21.460 --> 01:00:24.268
Iterators help her Sentinels

NOTE Confidence: 0.8901180225

01:00:24.268 --> 01:00:26.374
operator parent prens,

NOTE Confidence: 0.8901180225

01:00:26.380 --> 01:00:28.316
so we don't need a zillion of them.

NOTE Confidence: 0.8901180225

01:00:28.320 --> 01:00:29.980
It's great.

NOTE Confidence: 0.8901180225

01:00:29.980 --> 01:00:35.228
Turn off Clang format for Clang format 14.

NOTE Confidence: 0.8901180225

01:00:35.230 --> 01:00:36.200
This is OK to keep.

NOTE Confidence: 0.8901180225

01:00:36.200 --> 01:00:37.736
Uh, we'll clean that up later

NOTE Confidence: 0.8901180225

01:00:37.736 --> 01:00:39.509
once we merge with Clint for 15.

NOTE Confidence: 0.8901180225

01:00:39.510 --> 01:00:40.172
Um, OK,

NOTE Confidence: 0.8901180225

01:00:40.172 --> 01:00:42.158
so this is exported because it's

NOTE Confidence: 0.8901180225

01:00:42.158 --> 01:00:44.550
public template on input range.

NOTE Confidence: 0.8901180225

01:00:44.550 --> 01:00:47.125
Data dot view types requires

NOTE Confidence: 0.8901180225

01:00:47.130 --> 01:00:49.806
view view types and data dot,

NOTE Confidence: 0.8901180225

01:00:49.810 --> 01:00:51.609
and the size of dot view types

NOTE Confidence: 0.8901180225

01:00:51.609 --> 01:00:53.430
must be strictly greater than zero.

NOTE Confidence: 0.8901180225

01:00:53.430 --> 01:00:56.916
OK, we have a class zip view.

NOTE Confidence: 0.8901180225

01:00:56.920 --> 01:00:59.356
Dr Publicly because it's a class

NOTE Confidence: 0.8901180225

01:00:59.356 --> 01:01:01.734
from view interface zip view view

NOTE Confidence: 0.8901180225

01:01:01.734 --> 01:01:04.070
types dot turn on. Click format.

NOTE Confidence: 0.8901180225

01:01:04.070 --> 01:01:06.030
OK, private data members.

NOTE Confidence: 0.8901180225

01:01:06.030 --> 01:01:07.746
Uh, no unique address commented out.

NOTE Confidence: 0.8901180225

01:01:07.750 --> 01:01:09.510
Someday it's gonna be cool.

NOTE Confidence: 0.8901180225

01:01:09.510 --> 01:01:12.264
We have a tuple of view types named views.

NOTE Confidence: 0.8901180225

01:01:12.270 --> 01:01:13.850
OK, that's that. Exposition only.

NOTE Confidence: 0.8901180225

01:01:13.850 --> 01:01:15.420
So we got this here.

NOTE Confidence: 0.685175601777778

01:01:17.530 --> 01:01:21.235
And then template on Bool

NOTE Confidence: 0.685175601777778

01:01:21.235 --> 01:01:24.199
is construct category base.

NOTE Confidence: 0.685175601777778

01:01:24.200 --> 01:01:26.188
And I believe that is the Convention

NOTE Confidence: 0.685175601777778

01:01:26.188 --> 01:01:27.719
name template Bool is constant.

NOTE Confidence: 0.685175601777778

01:01:27.720 --> 01:01:29.403
We specialize requires

NOTE Confidence: 0.685175601777778

01:01:29.403 --> 01:01:32.208
if they are all forward.

NOTE Confidence: 0.685175601777778

01:01:32.210 --> 01:01:33.722
Assuming that's specified for,

NOTE Confidence: 0.685175601777778

01:01:33.722 --> 01:01:35.990
what are we doing iterator here?

NOTE Confidence: 0.878692952

01:01:38.730 --> 01:01:41.285
Let's see, this is an iterator.

NOTE Confidence: 0.878692952

01:01:41.285 --> 01:01:44.160
Do you have a specialization?

NOTE Confidence: 0.878692952

01:01:44.160 --> 01:01:47.358
This one says 40 iterator tag.

NOTE Confidence: 0.878692952

01:01:47.360 --> 01:01:48.670
Trying to see if there's

NOTE Confidence: 0.878692952

01:01:48.670 --> 01:01:49.456
two separate standardises.

NOTE Confidence: 0.878692952

01:01:49.460 --> 01:01:51.800
No, there's not. OK.

NOTE Confidence: 0.717150804

01:01:54.020 --> 01:01:58.180
Let's talk about Iterator. Category.

NOTE Confidence: 0.717150804

01:01:58.180 --> 01:02:01.470
I see. OK, yeah, this is this

NOTE Confidence: 0.717150804

01:02:01.470 --> 01:02:05.580
is implementing. This here. Uh.

NOTE Confidence: 0.774396444285714

01:02:08.040 --> 01:02:09.580
But wait, is this is this wrong?

NOTE Confidence: 0.774396444285714

01:02:09.580 --> 01:02:13.549
Um. Category base.

NOTE Confidence: 0.774396444285714

01:02:13.550 --> 01:02:15.782
Primary and then template bowls cost

NOTE Confidence: 0.774396444285714

01:02:15.782 --> 01:02:17.810
requires when they're all forward.

NOTE Confidence: 0.774396444285714

01:02:17.810 --> 01:02:20.335
Um, category bases cons using

NOTE Confidence: 0.774396444285714

01:02:20.335 --> 01:02:22.860
iterator category input iterator tag.

NOTE Confidence: 0.774396444285714

01:02:22.860 --> 01:02:25.800
Um. Iterator category.

NOTE Confidence: 0.774396444285714

01:02:25.800 --> 01:02:29.130
Is present if and only if

NOTE Confidence: 0.774396444285714

01:02:29.130 --> 01:02:31.430
all forward is modeled.

NOTE Confidence: 0.774396444285714

01:02:31.430 --> 01:02:32.620
OK, what is the category?

NOTE Confidence: 0.774396444285714

01:02:32.620 --> 01:02:35.828
Is the category input?

NOTE Confidence: 0.774396444285714

01:02:35.830 --> 01:02:39.334
OK, category is input so this is correct

NOTE Confidence: 0.774396444285714

01:02:39.334 --> 01:02:42.827
even though it doesn't seem like it is OK.

NOTE Confidence: 0.774396444285714

01:02:42.830 --> 01:02:46.120
So the category is conditionally input OK.

NOTE Confidence: 0.774396444285714

01:02:46.120 --> 01:02:48.136
My brain is like if I see forward here,

NOTE Confidence: 0.774396444285714

01:02:48.140 --> 01:02:48.992
this should be forward.

NOTE Confidence: 0.774396444285714

01:02:48.992 --> 01:02:50.424
But no, the standard needs is

NOTE Confidence: 0.774396444285714

01:02:50.424 --> 01:02:51.428
more complicated than that.

NOTE Confidence: 0.583119217692308

01:02:53.500 --> 01:02:55.726
OK template on is Collins class Iterator

NOTE Confidence: 0.583119217692308

01:02:55.726 --> 01:02:57.918
Dr publicly from category basis Const.

NOTE Confidence: 0.583119217692308

01:02:57.920 --> 01:03:00.440
OK so that gets us hyped up. These are

NOTE Confidence: 0.583119217692308

01:03:00.440 --> 01:03:02.140
structs so that's publicly available.

NOTE Confidence: 0.583119217692308

01:03:02.140 --> 01:03:03.780
It's good private data member,

NOTE Confidence: 0.583119217692308

01:03:03.780 --> 01:03:07.140
no unique address tuple iterator tea

NOTE Confidence: 0.583119217692308

01:03:07.140 --> 01:03:10.140
maybe consist constitute types current.

NOTE Confidence: 0.583119217692308

01:03:10.140 --> 01:03:13.839
Uh, that is this and the zip you iterator

NOTE Confidence: 0.583119217692308

01:03:13.839 --> 01:03:17.307
tuple iterator team may beacons current.

NOTE Confidence: 0.583119217692308

01:03:17.310 --> 01:03:20.826
OK. Uh friends if you using

NOTE Confidence: 0.583119217692308

01:03:20.826 --> 01:03:22.584
extended friends syntax.

NOTE Confidence: 0.583119217692308

01:03:22.590 --> 01:03:24.399
Ah, let's see. Do we need that? Yes,

NOTE Confidence: 0.583119217692308

01:03:24.399 --> 01:03:28.130
we do because I'm a member as a child class,

NOTE Confidence: 0.583119217692308

01:03:28.130 --> 01:03:30.734
so I can access the parent classes.

NOTE Confidence: 0.583119217692308

01:03:30.740 --> 01:03:32.230
Contents because I have the

NOTE Confidence: 0.583119217692308

01:03:32.230 --> 01:03:34.180
same access as any other member.

NOTE Confidence: 0.583119217692308

01:03:34.180 --> 01:03:36.539
But if the parent wants to access

NOTE Confidence: 0.583119217692308

01:03:36.540 --> 01:03:38.178
the child classes contents we need

NOTE Confidence: 0.583119217692308

01:03:38.178 --> 01:03:38.997
to declare friendship.

NOTE Confidence: 0.583119217692308

01:03:39.000 --> 01:03:43.074
OK then we have context for split

NOTE Confidence: 0.583119217692308

01:03:43.074 --> 01:03:44.820
Iterator constructor taking.

NOTE Confidence: 0.583119217692308

01:03:44.820 --> 01:03:48.260
That duple type undercurrent under.

NOTE Confidence: 0.583119217692308

01:03:48.260 --> 01:03:52.220
And that is going to be.

NOTE Confidence: 0.583119217692308

01:03:52.220 --> 01:03:54.950
That even depicted.

NOTE Confidence: 0.583119217692308

01:03:54.950 --> 01:03:55.955
Not actually depicted.

NOTE Confidence: 0.583119217692308

01:03:55.955 --> 01:03:57.295
Uh, this is private.

NOTE Confidence: 0.755224912857143

01:03:59.570 --> 01:04:01.600
Um, do we have an exposition only?

NOTE Confidence: 0.76058346

01:04:04.560 --> 01:04:08.080
No. It's just.

NOTE Confidence: 0.76058346

01:04:08.080 --> 01:04:10.858
Standard just assumes that we can.

NOTE Confidence: 0.76058346

01:04:10.860 --> 01:04:11.660
Ohh I see this one.

NOTE Confidence: 0.76058346

01:04:11.660 --> 01:04:12.800
Where is this coming from?

NOTE Confidence: 0.76058346

01:04:12.800 --> 01:04:13.608
Where was that declared

NOTE Confidence: 0.76058346

01:04:13.608 --> 01:04:14.820
and I just scroll over it?

NOTE Confidence: 0.70057869

01:04:17.120 --> 01:04:18.320
Ohh, it's hiding up here.

NOTE Confidence: 0.70057869

01:04:18.320 --> 01:04:21.232
OK, so it is mentioned in the

NOTE Confidence: 0.70057869

01:04:21.232 --> 01:04:22.989
standards just exceptionally OK um.

NOTE Confidence: 0.70057869

01:04:22.990 --> 01:04:25.993
As explicit iterator.

NOTE Confidence: 0.70057869

01:04:25.993 --> 01:04:29.997
Uh, tuple iterator T?

NOTE Confidence: 0.70057869

01:04:30.000 --> 01:04:32.555
Ah, how many times does this occur?

NOTE Confidence: 0.70057869

01:04:32.560 --> 01:04:35.560
Can we extract this with the type def?

NOTE Confidence: 0.70057869

01:04:35.560 --> 01:04:38.908
Every time No 5.

NOTE Confidence: 0.70057869

01:04:38.910 --> 01:04:41.030
Ohh that's out there.

NOTE Confidence: 0.70057869

01:04:41.030 --> 01:04:42.620
Um deco Valance.

NOTE Confidence: 0.70057869

01:04:42.620 --> 01:04:46.052
Three is annoying enough that I

NOTE Confidence: 0.70057869

01:04:46.052 --> 01:04:50.329
do want to ask for extraction.

NOTE Confidence: 0.70057869

01:04:50.330 --> 01:04:52.100
Anymore would be and my usual

NOTE Confidence: 0.70057869

01:04:52.100 --> 01:04:54.117
rule is if it's mentioned three

NOTE Confidence: 0.70057869

01:04:54.117 --> 01:04:56.427
times and if it's lengthy then.

NOTE Confidence: 0.70057869

01:04:56.430 --> 01:04:59.218
It's reasonable to extract.

NOTE Confidence: 0.70057869

01:04:59.220 --> 01:05:00.996
And it Rams here, which is really annoying.

NOTE Confidence: 0.70057869

01:05:01.000 --> 01:05:09.400
I'll suggest it. Um. This here we go.

NOTE Confidence: 0.70057869

01:05:09.400 --> 01:05:13.810
This thing is the one that occurs, yes.

NOTE Confidence: 0.70057869

01:05:13.810 --> 01:05:20.530
Occurs 3 times and is verbose enough to.

NOTE Confidence: 0.70057869

01:05:20.530 --> 01:05:22.494
Causeway wrapping.

NOTE Confidence: 0.70057869

01:05:22.494 --> 01:05:24.458
Say suggestion.

NOTE Confidence: 0.615007663333333

01:05:28.510 --> 01:05:33.894
Um, extracting a? What do we want

NOTE Confidence: 0.615007663333333

01:05:33.894 --> 01:05:35.250
to call this current tuple? Maybe?

NOTE Confidence: 0.502249

01:05:44.630 --> 01:05:45.310
Multiple.

NOTE Confidence: 0.768620989

01:05:47.360 --> 01:05:49.410
I took that that would

NOTE Confidence: 0.768620989

01:05:49.410 --> 01:05:51.460
be the more classic name,

NOTE Confidence: 0.768620989

01:05:51.460 --> 01:05:53.916
but my tuple current kind of sounds weird.

NOTE Confidence: 0.768620989

01:05:53.920 --> 01:05:57.952
At least current tuple would reinforce the.

NOTE Confidence: 0.768620989

01:05:57.952 --> 01:06:01.576
What we're talking about.

NOTE Confidence: 0.768620989

01:06:01.580 --> 01:06:03.242
It is my tuple because it

NOTE Confidence: 0.768620989

01:06:03.242 --> 01:06:05.080
is the only data restoring.

NOTE Confidence: 0.768620989

01:06:05.080 --> 01:06:08.940
I'll offer both suggestions.

NOTE Confidence: 0.768620989

01:06:08.940 --> 01:06:13.310
My. Two Paul type def.

NOTE Confidence: 0.6336476

01:06:15.570 --> 01:06:18.621
Are. Any other name?

NOTE Confidence: 0.6336476

01:06:18.621 --> 01:06:20.560
I'll be too picky about the name.

NOTE Confidence: 0.61675338

01:06:23.080 --> 01:06:28.020
Would help. Credibility. OK, suggestion.

NOTE Confidence: 0.61675338

01:06:28.020 --> 01:06:29.700
Couple of horribleness occurs 3 times

NOTE Confidence: 0.61675338

01:06:29.700 --> 01:06:31.860
and is verbose enough to cause wrapping.

NOTE Confidence: 0.61675338

01:06:31.860 --> 01:06:34.060
Extracting a current tuple or my tuple type

NOTE Confidence: 0.61675338

01:06:34.060 --> 01:06:36.768
def or any other name would help readability.

NOTE Confidence: 0.61675338

01:06:36.770 --> 01:06:38.770
OK, otherwise just fine.

NOTE Confidence: 0.61675338

01:06:38.770 --> 01:06:40.940
Um, we're no except if only

NOTE Confidence: 0.61675338

01:06:40.940 --> 01:06:43.150
one no except two is a bug.

NOTE Confidence: 0.61675338

01:06:43.150 --> 01:06:48.559
If is no throw move Constructable V of blah.

NOTE Confidence: 0.61675338

01:06:48.560 --> 01:06:51.312
OK, because we do move it in strengthend

NOTE Confidence: 0.61675338

01:06:51.312 --> 01:06:55.208
current, move current, OK. Public.

NOTE Confidence: 0.61675338

01:06:55.210 --> 01:06:57.810
So iterator concept see below.

NOTE Confidence: 0.61675338

01:06:57.810 --> 01:07:00.310
Um, but here we go.

NOTE Confidence: 0.61675338

01:07:00.310 --> 01:07:02.240
Iterator concept is if all

NOTE Confidence: 0.61675338

01:07:02.240 --> 01:07:04.170
reanimate access is consu types,

NOTE Confidence: 0.61675338

01:07:04.170 --> 01:07:06.790
then random access iterator tag.

NOTE Confidence: 0.61675338

01:07:06.790 --> 01:07:08.510
If they're all bidirectional,

NOTE Confidence: 0.61675338

01:07:08.510 --> 01:07:10.230
then bidirectional iterator tag.

NOTE Confidence: 0.61675338

01:07:10.230 --> 01:07:12.042
If they're all forward then forward

NOTE Confidence: 0.61675338

01:07:12.042 --> 01:07:14.210
iterator tag, otherwise input it or tag.

NOTE Confidence: 0.61675338

01:07:14.210 --> 01:07:17.210
OK, good. Using value type oh,

NOTE Confidence: 0.61675338

01:07:17.210 --> 01:07:19.650
here's the value type um.

NOTE Confidence: 0.61675338

01:07:19.650 --> 01:07:21.250
That is the type def.

NOTE Confidence: 0.61675338

01:07:21.250 --> 01:07:23.510
If only this were up a bit, um.

NOTE Confidence: 0.804040383333333

01:07:27.230 --> 01:07:29.408
No, it's different.

NOTE Confidence: 0.804040383333333

01:07:29.410 --> 01:07:32.238
Oh, it's range value T, not iterator T OK,

NOTE Confidence: 0.804040383333333

01:07:32.238 --> 01:07:34.904
so we can't use that type def using

NOTE Confidence: 0.804040383333333

01:07:34.904 --> 01:07:38.696
value type is tuple of range value T.

NOTE Confidence: 0.804040383333333

01:07:38.700 --> 01:07:41.955
Let's say here we go this here.

NOTE Confidence: 0.804040383333333

01:07:41.960 --> 01:07:44.325
Of maybe constant constant view

NOTE Confidence: 0.804040383333333

01:07:44.325 --> 01:07:47.502
types dot OK using different type is

NOTE Confidence: 0.804040383333333

01:07:47.502 --> 01:07:50.043
common type T of range difference T

NOTE Confidence: 0.804040383333333

01:07:50.043 --> 01:07:53.166
of maybe Constance continue types OK.

NOTE Confidence: 0.804040383333333

01:07:53.170 --> 01:07:56.530
Default set or default?

NOTE Confidence: 0.804040383333333

01:07:56.530 --> 01:07:59.389
Cons expert iterator?

NOTE Confidence: 0.804040383333333

01:07:59.390 --> 01:08:00.566
So I highlight too much comps.

NOTE Confidence: 0.804040383333333

01:08:00.570 --> 01:08:02.650
Expert iterator.

NOTE Confidence: 0.804040383333333

01:08:02.650 --> 01:08:08.534
Taking iterator of not constant R Us, not I.

NOTE Confidence: 0.804040383333333

01:08:08.534 --> 01:08:11.378
This is strengthened here.

NOTE Confidence: 0.804040383333333

01:08:11.380 --> 01:08:14.252
And it requires um.

NOTE Confidence: 0.804040383333333

01:08:14.252 --> 01:08:16.406
The strengthening is.

NOTE Confidence: 0.804040383333333

01:08:16.410 --> 01:08:18.285
Is no through convertible V

NOTE Confidence: 0.804040383333333

01:08:18.285 --> 01:08:20.160
from iterator to fu types.

NOTE Confidence: 0.75171113

01:08:22.970 --> 01:08:25.680
That's. Us.

NOTE Confidence: 0.765520506

01:08:27.790 --> 01:08:30.708
Convertible takes what we are and

NOTE Confidence: 0.765520506

01:08:30.708 --> 01:08:31.848
then it's saying converting 2.

NOTE Confidence: 0.765520506

01:08:31.850 --> 01:08:32.740
Is that the right order?

NOTE Confidence: 0.765520506

01:08:32.740 --> 01:08:36.510
That doesn't look right. Um.

NOTE Confidence: 0.765520506

01:08:36.510 --> 01:08:38.478
Let me let me come back to that.

NOTE Confidence: 0.765520506

01:08:38.480 --> 01:08:39.840
What is the requirement here?

NOTE Confidence: 0.765520506

01:08:39.840 --> 01:08:41.728
So requires is constant.

NOTE Confidence: 0.765520506

01:08:41.728 --> 01:08:45.095
I got to be constant because I

NOTE Confidence: 0.765520506

01:08:45.095 --> 01:08:47.280
can construct a constant rate

NOTE Confidence: 0.765520506

01:08:47.280 --> 01:08:49.653
from non cons and convertible

NOTE Confidence: 0.765520506

01:08:49.653 --> 01:08:53.078
2 iterator T view types. Uh.

NOTE Confidence: 0.765520506

01:08:53.078 --> 01:08:57.566
Iterator T constant views and data.

NOTE Confidence: 0.765520506

01:08:57.570 --> 01:09:02.099
So saying for all of the component

NOTE Confidence: 0.765520506

01:09:02.099 --> 01:09:04.370
iterators the modifiable 1,

NOTE Confidence: 0.765520506

01:09:04.370 --> 01:09:05.725
the iterator for the modifiable

NOTE Confidence: 0.765520506

01:09:05.725 --> 01:09:07.401
view has to be convertible to

NOTE Confidence: 0.765520506

01:09:07.401 --> 01:09:08.726
the iterator for constant view.

NOTE Confidence: 0.765520506

01:09:08.730 --> 01:09:10.570
You can always add consonants,

NOTE Confidence: 0.765520506

01:09:10.570 --> 01:09:11.350
so that's fine.

NOTE Confidence: 0.876870534

01:09:15.480 --> 01:09:19.460
Because we're. Constructing an iterator.

NOTE Confidence: 0.876870534

01:09:19.460 --> 01:09:21.596
We're constructing our iterator

NOTE Confidence: 0.876870534

01:09:21.596 --> 01:09:24.266
of constant because we're const

NOTE Confidence: 0.876870534

01:09:24.266 --> 01:09:26.768
from iterator of nonconstant.

NOTE Confidence: 0.876870534

01:09:26.770 --> 01:09:32.926
Yes. OK, so then this is asking.

NOTE Confidence: 0.876870534

01:09:32.930 --> 01:09:34.687
This is mirroring it. It's saying OK,

NOTE Confidence: 0.876870534

01:09:34.690 --> 01:09:36.010
OK, I think I think this is right.

NOTE Confidence: 0.876870534

01:09:36.010 --> 01:09:40.512
Um. Is Nothrow convertible

NOTE Confidence: 0.876870534

01:09:40.512 --> 01:09:44.676
V Iterator T of U types?

NOTE Confidence: 0.876870534

01:09:44.680 --> 01:09:46.395
Not not doing the maybe cons thing.

NOTE Confidence: 0.876870534

01:09:46.400 --> 01:09:49.208
So this is actually.

NOTE Confidence: 0.876870534

01:09:49.210 --> 01:09:52.984
The types within the RHS OK,

NOTE Confidence: 0.876870534

01:09:52.984 --> 01:09:56.710
and can we convert those two iterator T of?

NOTE Confidence: 0.658810933333333

01:09:59.150 --> 01:10:00.986
This is maybe constant, not cost.

NOTE Confidence: 0.658810933333333

01:10:00.990 --> 01:10:03.560
I think this is wrong.

NOTE Confidence: 0.658810933333333

01:10:03.560 --> 01:10:05.378
Because we're converting to us and

NOTE Confidence: 0.658810933333333

01:10:05.378 --> 01:10:07.658
we are is cons, not not as constant.

NOTE Confidence: 0.821705226153846

01:10:09.930 --> 01:10:13.045
Like essentially the the strengthening

NOTE Confidence: 0.821705226153846

01:10:13.045 --> 01:10:15.537
here should substantially mirror

NOTE Confidence: 0.821705226153846

01:10:15.537 --> 01:10:18.828
the requirement for convertibility,

NOTE Confidence: 0.821705226153846

01:10:18.830 --> 01:10:21.230
except it's going to use this

NOTE Confidence: 0.821705226153846

01:10:21.230 --> 01:10:23.390
go through convertible V is the

NOTE Confidence: 0.821705226153846

01:10:23.390 --> 01:10:24.790
requirement is the requirement busted?

NOTE Confidence: 0.821705226153846

01:10:24.790 --> 01:10:27.160
Did I miss that because it's

NOTE Confidence: 0.821705226153846

01:10:27.160 --> 01:10:30.500
using maybe constant constant?

NOTE Confidence: 0.821705226153846

01:10:30.500 --> 01:10:32.726
Standard doesn't use. Maybe cost here.

NOTE Confidence: 0.821705226153846

01:10:32.730 --> 01:10:34.082
Yeah, good point. OK.

NOTE Confidence: 0.821705226153846

01:10:34.082 --> 01:10:36.072
So yeah, you're right.

NOTE Confidence: 0.821705226153846

01:10:36.072 --> 01:10:38.040
Requires is busted.

NOTE Confidence: 0.821705226153846

01:10:38.040 --> 01:10:40.340
And then?

NOTE Confidence: 0.821705226153846

01:10:40.340 --> 01:10:41.864
I'm virtually certain the

NOTE Confidence: 0.821705226153846

01:10:41.864 --> 01:10:43.388
strengthening is not right.

NOTE Confidence: 0.821705226153846

01:10:43.390 --> 01:10:44.570
It they they should mirror,

NOTE Confidence: 0.821705226153846

01:10:44.570 --> 01:10:47.013
essentially it should be is no throw

NOTE Confidence: 0.821705226153846

01:10:47.013 --> 01:10:49.070
convertible V iterator T views to

NOTE Confidence: 0.821705226153846

01:10:49.070 --> 01:10:50.640
iterator T constant views because

NOTE Confidence: 0.821705226153846

01:10:50.640 --> 01:10:53.050
it's not just enough that it can

NOTE Confidence: 0.821705226153846

01:10:53.050 --> 01:10:54.770
be convertible like this describes

NOTE Confidence: 0.821705226153846

01:10:54.770 --> 01:10:56.870
the conversion we're going to do.

NOTE Confidence: 0.821705226153846

01:10:56.870 --> 01:10:57.730
Then we need to ask,

NOTE Confidence: 0.821705226153846

01:10:57.730 --> 01:11:00.286
can you do that without throwing?

NOTE Confidence: 0.821705226153846

01:11:00.290 --> 01:11:01.599
Um, so it needs to use the

NOTE Confidence: 0.821705226153846

01:11:01.599 --> 01:11:02.700
titrate rather than the concept,

NOTE Confidence: 0.821705226153846

01:11:02.700 --> 01:11:06.228
but otherwise it should be identical.

NOTE Confidence: 0.821705226153846

01:11:06.230 --> 01:11:07.598
OK. Yeah, I think, I think this bug,

NOTE Confidence: 0.821705226153846

01:11:07.600 --> 01:11:09.473
I'll comment on that. OK, thanks.

NOTE Confidence: 0.821705226153846

01:11:09.473 --> 01:11:12.014
It's always nice to know that I'm

NOTE Confidence: 0.821705226153846

01:11:12.014 --> 01:11:14.268
not just jumping in phantoms.

NOTE Confidence: 0.821705226153846

01:11:14.270 --> 01:11:15.569
Um, OK uh,

NOTE Confidence: 0.821705226153846

01:11:15.569 --> 01:11:18.167
currents did move RHS current uh

NOTE Confidence: 0.821705226153846

01:11:18.167 --> 01:11:20.723
which will do a component wise

NOTE Confidence: 0.821705226153846

01:11:20.723 --> 01:11:23.999
move of all the stuff in the tuple.

NOTE Confidence: 0.821705226153846

01:11:24.000 --> 01:11:25.610
So at least that's easy.

NOTE Confidence: 0.821705226153846

01:11:25.610 --> 01:11:26.306
You know,

NOTE Confidence: 0.821705226153846

01:11:26.306 --> 01:11:28.794
I'd really love to have no except auto.

NOTE Confidence: 0.821705226153846

01:11:28.794 --> 01:11:30.530
I'd love to have requires like if

NOTE Confidence: 0.821705226153846

01:11:30.587 --> 01:11:32.594
I'm just well for an I know why the

NOTE Confidence: 0.821705226153846

01:11:32.594 --> 01:11:34.211
standard at least doesn't have just

NOTE Confidence: 0.821705226153846

01:11:34.211 --> 01:11:36.162
the requires of the body's well formed,

NOTE Confidence: 0.821705226153846

01:11:36.162 --> 01:11:37.366
I'd really love that.

NOTE Confidence: 0.821705226153846

01:11:37.370 --> 01:11:39.120
No except auto though having to spend.

NOTE Confidence: 0.821705226153846

01:11:39.120 --> 01:11:40.053
I mean look,

NOTE Confidence: 0.821705226153846

01:11:40.053 --> 01:11:41.297
the specification for the

NOTE Confidence: 0.821705226153846

01:11:41.297 --> 01:11:43.238
constructor is like 10 times the

NOTE Confidence: 0.821705226153846

01:11:43.238 --> 01:11:44.813
size of the actual implementation.

NOTE Confidence: 0.821705226153846

01:11:44.820 --> 01:11:45.058
Uh,

NOTE Confidence: 0.821705226153846

01:11:45.058 --> 01:11:46.010
the compiler knows whether

NOTE Confidence: 0.821705226153846

01:11:46.010 --> 01:11:47.520
this stuff is going to throw.

NOTE Confidence: 0.821705226153846

01:11:47.520 --> 01:11:47.930
Um,

NOTE Confidence: 0.821705226153846

01:11:47.930 --> 01:11:49.570
we're definitely working around

NOTE Confidence: 0.821705226153846

01:11:49.570 --> 01:11:51.620
a limitation of language here.

NOTE Confidence: 0.821705226153846

01:11:51.620 --> 01:11:55.498
OK, let's comment here. Should I have?

NOTE Confidence: 0.821705226153846

01:11:55.500 --> 01:11:57.330
Two comments or one comment?

NOTE Confidence: 0.665445957777778

01:11:59.530 --> 01:12:00.578
Cameron's joking that that'll

NOTE Confidence: 0.665445957777778

01:12:00.578 --> 01:12:01.888
be his next hackathon project.

NOTE Confidence: 0.665445957777778

01:12:01.890 --> 01:12:03.965
I think probably 2 comments

NOTE Confidence: 0.665445957777778

01:12:03.965 --> 01:12:05.625
because they are different.

NOTE Confidence: 0.665445957777778

01:12:05.630 --> 01:12:09.620
Let's come in on the requires first.

NOTE Confidence: 0.665445957777778

01:12:09.620 --> 01:12:11.530
Here I will give credit.

NOTE Confidence: 0.665445957777778

01:12:11.530 --> 01:12:18.350
Uh Casey um noticed that?

NOTE Confidence: 0.665445957777778

01:12:18.350 --> 01:12:20.900
Be standardized says

NOTE Confidence: 0.665445957777778

01:12:20.900 --> 01:12:24.300
let's not highlight here,

NOTE Confidence: 0.665445957777778

01:12:24.300 --> 01:12:26.288
let's get everything here.

NOTE Confidence: 0.483737066666667

01:12:30.310 --> 01:12:33.898
Um. But uh.

NOTE Confidence: 0.787166172

01:12:36.240 --> 01:12:39.700
Which doesn't use maybe cost?

NOTE Confidence: 0.844490052

01:12:45.180 --> 01:12:47.167
Actually, now let me say, um,

NOTE Confidence: 0.844490052

01:12:47.167 --> 01:12:51.416
so this you, or so the usage.

NOTE Confidence: 0.844490052

01:12:51.420 --> 01:12:57.100
Of maybe consed here appears to be incorrect.

NOTE Confidence: 0.844490052

01:12:57.100 --> 01:12:59.970
OK, Casey noticed that the standard he

NOTE Confidence: 0.844490052

01:12:59.970 --> 01:13:02.480
says convertible to iterator T views,

NOTE Confidence: 0.844490052

01:13:02.480 --> 01:13:04.778
iterator T const views and dot.

NOTE Confidence: 0.844490052

01:13:04.780 --> 01:13:05.872
So the usage of maybe cons

NOTE Confidence: 0.844490052

01:13:05.872 --> 01:13:07.050
here appears to be incorrect,

NOTE Confidence: 0.844490052

01:13:07.050 --> 01:13:08.973
because that's the one missing thing. OK?

NOTE Confidence: 0.844490052

01:13:08.973 --> 01:13:12.690
Got it. And then a comment about this here.

NOTE Confidence: 0.844490052

01:13:12.690 --> 01:13:14.946
Um, so we think the iterator

NOTE Confidence: 0.844490052

01:13:14.946 --> 01:13:17.050
T view types is right,

NOTE Confidence: 0.844490052

01:13:17.050 --> 01:13:20.718
but this one should really be confused.

NOTE Confidence: 0.844490052

01:13:20.720 --> 01:13:24.378
So and in fact. Even ignoring that

NOTE Confidence: 0.844490052

01:13:24.378 --> 01:13:25.658
like this is maybe Constance.

NOTE Confidence: 0.844490052

01:13:25.660 --> 01:13:27.548
Constance says maybe consent

NOTE Confidence: 0.844490052

01:13:27.548 --> 01:13:31.760
is considered just opposite.

NOTE Confidence: 0.844490052

01:13:31.760 --> 01:13:36.300
I noticed that. This, uh,

NOTE Confidence: 0.844490052

01:13:36.300 --> 01:13:39.774
who should I come in on the whole thing?

NOTE Confidence: 0.844490052

01:13:39.780 --> 01:13:42.293
You know it'd be distracting to get

NOTE Confidence: 0.844490052

01:13:42.293 --> 01:13:44.548
the signature in there that this.

NOTE Confidence: 0.844490052

01:13:44.550 --> 01:13:47.439
Exception specification says.

NOTE Confidence: 0.844490052

01:13:47.439 --> 01:13:51.378
Uh, let's see. Should I just extract?

NOTE Confidence: 0.844490052

01:13:51.378 --> 01:13:52.950
Now extract the whole iterator type.

NOTE Confidence: 0.844490052

01:13:52.950 --> 01:13:54.360
How many angles is that to?

NOTE Confidence: 0.19807339

01:13:56.940 --> 01:14:00.830
Uh. But uh.

NOTE Confidence: 0.82963011

01:14:03.360 --> 01:14:05.340
Let's see. We are.

NOTE Confidence: 0.624408709333333

01:14:09.850 --> 01:14:10.410
There's championed.

NOTE Confidence: 0.624408709333333

01:14:10.410 --> 01:14:11.530
There's two issues here,

NOTE Confidence: 0.624408709333333

01:14:11.530 --> 01:14:15.760
but one that flips the constness.

NOTE Confidence: 0.7921789175

01:14:18.100 --> 01:14:20.408
I wanna say flips.

NOTE Confidence: 0.7921789175

01:14:20.408 --> 01:14:23.293
That has the opposite oneness

NOTE Confidence: 0.7921789175

01:14:23.293 --> 01:14:27.630
of what we're actually.

NOTE Confidence: 0.7921789175

01:14:27.630 --> 01:14:28.560
Converting here.

NOTE Confidence: 0.792526916666667

01:14:32.250 --> 01:14:34.398
Uh, let's see.

NOTE Confidence: 0.792526916666667

01:14:34.400 --> 01:14:36.266
I'll explain because this is confusing.

NOTE Confidence: 0.792526916666667

01:14:36.270 --> 01:14:41.548
This constructor is using a.

NOTE Confidence: 0.792526916666667

01:14:41.548 --> 01:14:45.118
This constructor takes a non

NOTE Confidence: 0.792526916666667

01:14:45.118 --> 01:14:48.739
constant iterator as the source.

NOTE Confidence: 0.792526916666667

01:14:48.740 --> 01:14:51.892
To construct a constant

NOTE Confidence: 0.792526916666667

01:14:51.892 --> 01:14:55.359
iterator destination, so the.

NOTE Confidence: 0.676733154

01:14:57.410 --> 01:15:04.240
Is no throat convertible V. Uh type

NOTE Confidence: 0.676733154

01:15:04.240 --> 01:15:11.620
trait. Is given the. Non. Alright.

NOTE Confidence: 0.8593171592

01:15:16.050 --> 01:15:18.698
Should be given. I want to avoid any

NOTE Confidence: 0.8593171592

01:15:18.698 --> 01:15:20.750
confusion about like what it should

NOTE Confidence: 0.8593171592

01:15:20.750 --> 01:15:23.106
be given versus what we actually wrote

NOTE Confidence: 0.8593171592

01:15:23.106 --> 01:15:26.982
in the source code should be given.

NOTE Confidence: 0.8593171592

01:15:26.982 --> 01:15:31.124
The non constant source

NOTE Confidence: 0.8593171592

01:15:31.124 --> 01:15:34.439
iterator first. Which it is.

NOTE Confidence: 0.531775105

01:15:36.600 --> 01:15:38.040
Iterator TV types.

NOTE Confidence: 0.807989385555555

01:15:41.880 --> 01:15:48.187
Then. Then. It should be given the

NOTE Confidence: 0.807989385555555

01:15:48.187 --> 01:15:50.644
constant iterator destination.

NOTE Confidence: 0.807989385555555

01:15:50.644 --> 01:15:55.876
Second, OK, I think I have explained that.

NOTE Confidence: 0.807989385555555

01:15:55.880 --> 01:15:59.792
Um. OK, and this is big enough

NOTE Confidence: 0.807989385555555

01:15:59.792 --> 01:16:02.230
that I really want bullet points.

NOTE Confidence: 0.807989385555555

01:16:02.230 --> 01:16:08.810
1. Then two. Let's see.

NOTE Confidence: 0.807989385555555

01:16:08.810 --> 01:16:13.980
This should match the requires.

NOTE Confidence: 0.807989385555555

01:16:13.980 --> 01:16:18.962
Clause. Which says. Select again.

NOTE Confidence: 0.807989385555555

01:16:18.962 --> 01:16:21.667
Let's grab the whole thing.

NOTE Confidence: 0.75155056

01:16:27.970 --> 01:16:32.140
Let me explain. Um accept changing.

NOTE Confidence: 0.508848375

01:16:34.210 --> 01:16:35.200
Except using.

NOTE Confidence: 0.43943599

01:16:38.360 --> 01:16:41.272
Is Northrop convertible be?

NOTE Confidence: 0.43943599

01:16:41.272 --> 01:16:49.300
Be instead of. Convertible 2. Says.

NOTE Confidence: 0.459620313333333

01:16:52.820 --> 01:16:54.470
Iterator to confuse.

NOTE Confidence: 0.79894799

01:16:56.770 --> 01:17:02.030
For the second. Argument. OK.

NOTE Confidence: 0.6865448175

01:17:04.980 --> 01:17:07.344
I noticed that this exception specification

NOTE Confidence: 0.6865448175

01:17:07.344 --> 01:17:09.740
says Iterator T may be constant,

NOTE Confidence: 0.6865448175

01:17:09.740 --> 01:17:11.100
not as constant you types.

NOTE Confidence: 0.6865448175

01:17:11.100 --> 01:17:13.123
But that has the opposite constants of

NOTE Confidence: 0.6865448175

01:17:13.123 --> 01:17:14.840
what we're actually converting here.

NOTE Confidence: 0.6865448175

01:17:14.840 --> 01:17:17.534
This constructor takes a non consideration

NOTE Confidence: 0.6865448175

01:17:17.534 --> 01:17:20.661
as the source to construct a fan.

NOTE Confidence: 0.6865448175

01:17:20.661 --> 01:17:21.894
I'm getting confused.

NOTE Confidence: 0.6865448175

01:17:21.894 --> 01:17:23.127
Let me restart.

NOTE Confidence: 0.6865448175

01:17:23.130 --> 01:17:25.032
I noticed that this exception specification

NOTE Confidence: 0.6865448175

01:17:25.032 --> 01:17:27.557
says Iterator T may be not as constant type,

NOTE Confidence: 0.6865448175

01:17:27.560 --> 01:17:28.826
but that has the opposite constants.

NOTE Confidence: 0.6865448175

01:17:28.830 --> 01:17:29.950
While we're actually converting here,

NOTE Confidence: 0.6865448175

01:17:29.950 --> 01:17:31.740
this constructor takes a non

NOTE Confidence: 0.6865448175

01:17:31.740 --> 01:17:34.164
considerate or correct as the source

NOTE Confidence: 0.6865448175

01:17:34.164 --> 01:17:36.294
to construct a consider destination.

NOTE Confidence: 0.6865448175

01:17:36.300 --> 01:17:38.120
So the is nothrow convertible.

NOTE Confidence: 0.6865448175

01:17:38.120 --> 01:17:40.262
V titrate should be given the noncom

NOTE Confidence: 0.6865448175

01:17:40.262 --> 01:17:41.961
source iterator first because we go

NOTE Confidence: 0.6865448175

01:17:41.961 --> 01:17:43.986
from two which it is iterator to view

NOTE Confidence: 0.6865448175

01:17:43.986 --> 01:17:45.869
types and then it should be given

NOTE Confidence: 0.6865448175

01:17:45.869 --> 01:17:47.272
the constant iterator destination.

NOTE Confidence: 0.6865448175

01:17:47.272 --> 01:17:47.703
Second,

NOTE Confidence: 0.6865448175

01:17:47.703 --> 01:17:50.720
bold that because that's the important bit.

NOTE Confidence: 0.67002591375

01:17:55.200 --> 01:17:57.250
OK, two. This should match

NOTE Confidence: 0.67002591375

01:17:57.250 --> 01:17:58.480
the requires clause,

NOTE Confidence: 0.67002591375

01:17:58.480 --> 01:18:00.240
except using is another convertible

NOTE Confidence: 0.67002591375

01:18:00.240 --> 01:18:02.000
V instead of convertible 2,

NOTE Confidence: 0.67002591375

01:18:02.000 --> 01:18:03.670
which says Iterator T confused

NOTE Confidence: 0.67002591375

01:18:03.670 --> 01:18:05.006
for the second argument.

NOTE Confidence: 0.804546854444445

01:18:07.690 --> 01:18:09.342
I'll credit you again,

NOTE Confidence: 0.804546854444445

01:18:09.342 --> 01:18:11.407
similar to what Casey noticed.

NOTE Confidence: 0.8497623

01:18:14.150 --> 01:18:14.430
There.

NOTE Confidence: 0.852440813333333

01:18:17.710 --> 01:18:20.188
OK. That one tiny little character.

NOTE Confidence: 0.852440813333333

01:18:20.190 --> 01:18:22.068
Not expanding to a big comment,

NOTE Confidence: 0.852440813333333

01:18:22.070 --> 01:18:24.158
but I think we got this sorted out.

NOTE Confidence: 0.852440813333333

01:18:24.160 --> 01:18:26.190
Um, this sort of thing is just.

NOTE Confidence: 0.852440813333333

01:18:26.190 --> 01:18:27.638
It's possible to test,

NOTE Confidence: 0.852440813333333

01:18:27.638 --> 01:18:29.810
but it's really obnoxious to test.

NOTE Confidence: 0.852440813333333

01:18:29.810 --> 01:18:31.490
You gotta write a lot of test support

NOTE Confidence: 0.852440813333333

01:18:31.490 --> 01:18:33.129
code to validate this tiny thing.

NOTE Confidence: 0.852440813333333

01:18:33.130 --> 01:18:34.866
So I wouldn't ask for test coverage here.

NOTE Confidence: 0.852440813333333

01:18:34.870 --> 01:18:39.538
It's totally understandable how is missed.

NOTE Confidence: 0.852440813333333

01:18:39.540 --> 01:18:42.235
I'm satisfied if the code expresses the

NOTE Confidence: 0.852440813333333

01:18:42.235 --> 01:18:44.588
conversion that we're actually gonna do.

NOTE Confidence: 0.829397791111111

01:18:46.640 --> 01:18:48.458
I don't think we need test coverage of this.

NOTE Confidence: 0.85323477

01:18:50.630 --> 01:18:55.530
OK. Up the comment middle screen right now.

NOTE Confidence: 0.85323477

01:18:55.530 --> 01:18:56.952
Yeah, you're correct.

NOTE Confidence: 0.85323477

01:18:56.952 --> 01:18:58.848
Appears to be incorrect.

NOTE Confidence: 0.85323477

01:18:58.850 --> 01:19:00.582
Isn't really quite true.

NOTE Confidence: 0.85323477

01:19:00.582 --> 01:19:02.747
It's correct because we we've

NOTE Confidence: 0.85323477

01:19:02.747 --> 01:19:04.729
constrained his consent to be true

NOTE Confidence: 0.85323477

01:19:04.729 --> 01:19:06.870
already by the time we get here.

NOTE Confidence: 0.85323477

01:19:06.870 --> 01:19:09.918
Yeah, it's just a little overcomplicated.

NOTE Confidence: 0.85323477

01:19:09.920 --> 01:19:10.868
OK, good point.

NOTE Confidence: 0.703287754

01:19:13.690 --> 01:19:15.978
Yeah, because we are.

NOTE Confidence: 0.703287754

01:19:15.978 --> 01:19:18.890
Yeah. Requires is constant.

NOTE Confidence: 0.703287754

01:19:18.890 --> 01:19:22.070
OK, good point. Um.

NOTE Confidence: 0.2959869

01:19:24.900 --> 01:19:29.850
Um. We've constrained.

NOTE Confidence: 0.65019214

01:19:32.470 --> 01:19:36.850
Say. The constraint.

NOTE Confidence: 0.65019214

01:19:36.850 --> 01:19:39.475
Has already guaranteed

NOTE Confidence: 0.65019214

01:19:39.475 --> 01:19:42.100
that is constant.

NOTE Confidence: 0.65019214

01:19:42.100 --> 01:19:47.970
Is true um so using.

NOTE Confidence: 0.65019214

01:19:47.970 --> 01:19:49.518
Maybe consist consist?

NOTE Confidence: 0.78239948

01:19:52.410 --> 01:19:57.438
Is correct but. Overly, but unnecessary.

NOTE Confidence: 0.78239948

01:19:57.440 --> 01:20:00.000
Unnecessarily verbose.

NOTE Confidence: 0.78239948

01:20:00.000 --> 01:20:02.308
Yeah, that that'll work.

NOTE Confidence: 0.78239948

01:20:02.310 --> 01:20:04.776
And now I'm wondering if maybe some of this

NOTE Confidence: 0.78239948

01:20:04.776 --> 01:20:09.220
is overly complicated to avoid claying bugs.

NOTE Confidence: 0.78239948

01:20:09.220 --> 01:20:12.788
With, uh, premature substitution.

NOTE Confidence: 0.78239948

01:20:12.790 --> 01:20:14.085
Then then it should be marked as,

NOTE Confidence: 0.78239948

01:20:14.090 --> 01:20:17.790
um, transition. Um yeah, true.

NOTE Confidence: 0.78239948

01:20:17.790 --> 01:20:19.290
Yeah, we'll find out.

NOTE Confidence: 0.78239948

01:20:19.290 --> 01:20:21.540
Constraint has not worried about it.

NOTE Confidence: 0.78239948

01:20:21.540 --> 01:20:22.585
OK, the constraint has already

NOTE Confidence: 0.78239948

01:20:22.585 --> 01:20:23.860
guaranteed that is cost is true.

NOTE Confidence: 0.78239948

01:20:23.860 --> 01:20:25.220
So using maybe constants, constants,

NOTE Confidence: 0.78239948

01:20:25.220 --> 01:20:26.604
correct, but unnecessarily verbose.

NOTE Confidence: 0.78239948

01:20:26.604 --> 01:20:28.760
OK, thank you for that correction.

NOTE Confidence: 0.78239948

01:20:28.760 --> 01:20:29.459
Ah, let's see.

NOTE Confidence: 0.78239948

01:20:29.459 --> 01:20:30.857
I think we can get through.

NOTE Confidence: 0.78239948

01:20:30.860 --> 01:20:32.084
Can we get through the rest of the iterator?

NOTE Confidence: 0.78239948

01:20:32.090 --> 01:20:32.942
This iterator's big.

NOTE Confidence: 0.78239948

01:20:32.942 --> 01:20:34.930
Uh, let's see how much we can

NOTE Confidence: 0.78239948

01:20:34.995 --> 01:20:36.759
get through the next 5 minutes.

NOTE Confidence: 0.78239948

01:20:36.760 --> 01:20:38.781
OK, so we got a draft. Wow.

NOTE Confidence: 0.78239948

01:20:38.781 --> 01:20:42.436
Iterators can dereference constexpr auto.

NOTE Confidence: 0.78239948

01:20:42.440 --> 01:20:44.960
OK, so now we're gonna pay attention

NOTE Confidence: 0.78239948

01:20:44.960 --> 01:20:46.500
to whether things should be noticed.

NOTE Confidence: 0.78239948

01:20:46.500 --> 01:20:47.740
Card after the constructor,

NOTE Confidence: 0.78239948

01:20:47.740 --> 01:20:49.290
dereferencing should absolutely be noticed.

NOTE Confidence: 0.78239948

01:20:49.290 --> 01:20:52.699
Guard context for auto operator star contest.

NOTE Confidence: 0.78239948

01:20:52.700 --> 01:20:55.592
This is going to be strengthened. Um, OK,

NOTE Confidence: 0.78239948

01:20:55.592 --> 01:20:59.064
so we've got a nontrivial strengthening here.

NOTE Confidence: 0.78239948

01:20:59.070 --> 01:21:01.770
We're no except if.

NOTE Confidence: 0.78239948

01:21:01.770 --> 01:21:03.795
This fold expression.

NOTE Confidence: 0.78239948

01:21:03.800 --> 01:21:06.839
Is all true.

NOTE Confidence: 0.78239948

01:21:06.840 --> 01:21:09.619
We need to be able to dereference

NOTE Confidence: 0.78239948

01:21:09.619 --> 01:21:12.831
a stud deco Val of iterator T

NOTE Confidence: 0.78239948

01:21:12.831 --> 01:21:15.236
maybe Const is constantly type,

NOTE Confidence: 0.78239948

01:21:15.240 --> 01:21:17.240
so potentially apply constness to

NOTE Confidence: 0.78239948

01:21:17.240 --> 01:21:19.240
each of our component iterators.

NOTE Confidence: 0.78239948

01:21:19.240 --> 01:21:21.200
They all have to be.

NOTE Confidence: 0.78239948

01:21:21.200 --> 01:21:21.537
No,

NOTE Confidence: 0.78239948

01:21:21.537 --> 01:21:23.896
except because we return a tuple references,

NOTE Confidence: 0.78239948

01:21:23.900 --> 01:21:25.238
so at that point we're fine.

NOTE Confidence: 0.78239948

01:21:25.240 --> 01:21:26.836
This looks correct.

NOTE Confidence: 0.78239948

01:21:26.836 --> 01:21:29.496
The parenthesis here is not

NOTE Confidence: 0.78239948

01:21:29.496 --> 01:21:31.872
necessary because it's unary and

NOTE Confidence: 0.78239948

01:21:31.872 --> 01:21:34.735
there's no other way it could bind.

NOTE Confidence: 0.78239948

01:21:34.740 --> 01:21:35.820
I won't comment on it,

NOTE Confidence: 0.78239948

01:21:35.820 --> 01:21:36.790
it's not wrong, and again,

NOTE Confidence: 0.78239948

01:21:36.790 --> 01:21:38.770
this is a pretty complicated expression,

NOTE Confidence: 0.78239948

01:21:38.770 --> 01:21:39.616
pretty complicated code.

NOTE Confidence: 0.78239948

01:21:39.616 --> 01:21:41.898
If this were a smaller PR and this

NOTE Confidence: 0.78239948

01:21:41.898 --> 01:21:43.634
were like the only issue I found,

NOTE Confidence: 0.78239948

01:21:43.640 --> 01:21:44.700
I'd probably comment on it,

NOTE Confidence: 0.78239948

01:21:44.700 --> 01:21:45.548
but this is fine.

NOTE Confidence: 0.90030184375

01:21:48.070 --> 01:21:49.390
Trying to be a little bit more easy,

NOTE Confidence: 0.90030184375

01:21:49.390 --> 01:21:50.680
going like refused.

NOTE Confidence: 0.90030184375

01:21:50.680 --> 01:21:53.260
OK, and then this is going

NOTE Confidence: 0.90030184375

01:21:53.260 --> 01:21:55.809
to return tuple transform.

NOTE Confidence: 0.90030184375

01:21:55.810 --> 01:21:59.368
Interesting, we have a stateless Lambda.

NOTE Confidence: 0.90030184375

01:21:59.370 --> 01:22:02.527
That takes. An auto ref ITER because

NOTE Confidence: 0.90030184375

01:22:02.527 --> 01:22:05.277
the tuple transform works on every

NOTE Confidence: 0.90030184375

01:22:05.277 --> 01:22:07.903
component of the tuple. Is that right?

NOTE Confidence: 0.90030184375

01:22:07.903 --> 01:22:10.421
Trying to remember, it was like,

NOTE Confidence: 0.90030184375

01:22:10.421 --> 01:22:13.703
yeah, hour ago we reviewed this.

NOTE Confidence: 0.90030184375

01:22:13.710 --> 01:22:15.274
Zip gets smallest distance,

NOTE Confidence: 0.90030184375

01:22:15.274 --> 01:22:18.115
no tuple transform. Apply to every

NOTE Confidence: 0.90030184375

01:22:18.115 --> 01:22:20.890
element that will invoke something.

NOTE Confidence: 0.90030184375

01:22:20.890 --> 01:22:23.710
That's. I powered machinery for.

NOTE Confidence: 0.90030184375

01:22:23.710 --> 01:22:24.985
It's just a Lambda invocation,

NOTE Confidence: 0.90030184375

01:22:24.990 --> 01:22:26.712
but that's fine because it's the

NOTE Confidence: 0.90030184375

01:22:26.712 --> 01:22:28.939
one that we use for users as well

NOTE Confidence: 0.90030184375

01:22:28.940 --> 01:22:30.650
on every element of the tuple.

NOTE Confidence: 0.90030184375

01:22:30.650 --> 01:22:36.870
OK, so. We use it down here.

NOTE Confidence: 0.90030184375

01:22:36.870 --> 01:22:39.138
Here duple transform Lambda

NOTE Confidence: 0.90030184375

01:22:39.138 --> 01:22:41.406
take autograf under Itter.

NOTE Confidence: 0.90030184375

01:22:41.410 --> 01:22:43.629
And we're going to return Decltype auto.

NOTE Confidence: 0.90030184375

01:22:43.630 --> 01:22:44.587
This is necessary.

NOTE Confidence: 0.90030184375

01:22:44.587 --> 01:22:46.501
So don't get any sort of

NOTE Confidence: 0.90030184375

01:22:46.501 --> 01:22:48.189
decay return Derek fitter.

NOTE Confidence: 0.90030184375

01:22:48.190 --> 01:22:50.940
On the current tuple. OK.

NOTE Confidence: 0.90030184375

01:22:50.940 --> 01:22:54.510
And then that will return?

NOTE Confidence: 0.90030184375

01:22:54.510 --> 01:22:57.555
Tuple transform should return a tuple of.

NOTE Confidence: 0.90030184375

01:22:57.560 --> 01:22:57.901
References.

NOTE Confidence: 0.90030184375

01:22:57.901 --> 01:22:59.947
Let's make sure that's right because

NOTE Confidence: 0.90030184375

01:22:59.947 --> 01:23:02.097
we're not directly naming the type here.

NOTE Confidence: 0.90030184375

01:23:02.100 --> 01:23:03.804
I think it is because the

NOTE Confidence: 0.90030184375

01:23:03.804 --> 01:23:05.622
decltype auto and we used invoke

NOTE Confidence: 0.90030184375

01:23:05.622 --> 01:23:08.480
result T tuple transform.

NOTE Confidence: 0.90030184375

01:23:08.480 --> 01:23:10.670
Returns whatever stood apply does.

NOTE Confidence: 0.889076

01:23:13.210 --> 01:23:18.180
Interesting. And then the tule

NOTE Confidence: 0.889076

01:23:18.180 --> 01:23:19.913
transform closure. Returns.

NOTE Confidence: 0.889076

01:23:19.913 --> 01:23:23.617
Here we go a tuple of invoke result.

NOTE Confidence: 0.889076

01:23:23.620 --> 01:23:28.442
So if. The Lambda that we give it

NOTE Confidence: 0.889076

01:23:28.442 --> 01:23:30.921
returns a reference, which it does

NOTE Confidence: 0.889076

01:23:30.921 --> 01:23:33.603
because it returns decltype auto of.

NOTE Confidence: 0.889076

01:23:33.610 --> 01:23:34.876
Dereferencing and ideally,

NOTE Confidence: 0.889076

01:23:34.876 --> 01:23:37.005
that's your return reference. Um.

NOTE Confidence: 0.889076

01:23:37.005 --> 01:23:40.050
Then we're going to get a tuple

NOTE Confidence: 0.889076

01:23:40.050 --> 01:23:41.793
of references. That seems right,

NOTE Confidence: 0.889076

01:23:41.793 --> 01:23:44.260
and if it happens to return AR value,

NOTE Confidence: 0.889076

01:23:44.260 --> 01:23:46.660
which you could get for an input iterator,

NOTE Confidence: 0.889076

01:23:46.660 --> 01:23:49.124
that'll participate in the tuple as well,

NOTE Confidence: 0.889076

01:23:49.130 --> 01:23:51.265
and I'm assuming without looking

NOTE Confidence: 0.889076

01:23:51.265 --> 01:23:54.148
that that is what this does. Yes,

NOTE Confidence: 0.889076

01:23:54.148 --> 01:23:55.816
this is directly translating the standards,

NOTE Confidence: 0.889076

01:23:55.820 --> 01:23:59.080
OK? I'm convinced that's right.

NOTE Confidence: 0.889076

01:23:59.080 --> 01:24:00.595
So that is,

NOTE Confidence: 0.889076

01:24:00.595 --> 01:24:04.170
this effects equivalent two wonderful.

NOTE Confidence: 0.889076

01:24:04.170 --> 01:24:05.961
And. OK, incrementing.

NOTE Confidence: 0.889076

01:24:05.961 --> 01:24:10.140
Not notice card because we can definitely

NOTE Confidence: 0.889076

01:24:10.241 --> 01:24:13.787
discard this context per iterator ref.

NOTE Confidence: 0.889076

01:24:13.790 --> 01:24:15.570
And then this is strengthened,

NOTE Confidence: 0.889076

01:24:15.570 --> 01:24:16.161
we're no except.

NOTE Confidence: 0.889076

01:24:16.161 --> 01:24:17.146
If this is no except,

NOTE Confidence: 0.889076

01:24:17.150 --> 01:24:19.859
can we call tuple foreach with essentially

NOTE Confidence: 0.889076

01:24:19.859 --> 01:24:24.360
what we're doing in the body here? OK.

NOTE Confidence: 0.889076

01:24:24.360 --> 01:24:27.320
It's too bad we can't centralize that Lambda.

NOTE Confidence: 0.889076

01:24:27.320 --> 01:24:30.380
Um, 2 tuple 4 each.

NOTE Confidence: 0.889076

01:24:30.380 --> 01:24:33.116
Ref auto ref fitter in cremator

NOTE Confidence: 0.889076

01:24:33.120 --> 01:24:35.886
on current return dear for this.

NOTE Confidence: 0.889076

01:24:35.890 --> 01:24:37.546
OK, looks good.

NOTE Confidence: 0.889076

01:24:37.546 --> 01:24:41.410
Um, context for void operator plus int.

NOTE Confidence: 0.889076

01:24:41.410 --> 01:24:43.490
This one also strengthens.

NOTE Confidence: 0.889076

01:24:43.490 --> 01:24:46.518
No, except if no except pre increment.

NOTE Confidence: 0.889076

01:24:46.520 --> 01:24:47.840
Again, we're done in parenthesis,

NOTE Confidence: 0.889076

01:24:47.840 --> 01:24:50.978
but it's consistent, which is good.

NOTE Confidence: 0.889076

01:24:50.980 --> 01:24:53.900
Val iterator.

NOTE Confidence: 0.889076

01:24:53.900 --> 01:24:55.990
It's us.

NOTE Confidence: 0.889076

01:24:55.990 --> 01:24:56.188
Uh,

NOTE Confidence: 0.889076

01:24:56.188 --> 01:24:57.772
why can't we just say draft this year?

NOTE Confidence: 0.70766323375

01:24:59.840 --> 01:25:02.000
We have access to drop this and um,

NOTE Confidence: 0.70766323375

01:25:02.000 --> 01:25:03.028
no, except don't we?

NOTE Confidence: 0.70766323375

01:25:03.028 --> 01:25:04.313
We we had problems like.

NOTE Confidence: 0.70766323375

01:25:04.320 --> 01:25:05.505
I'm asking because we had

NOTE Confidence: 0.70766323375

01:25:05.505 --> 01:25:07.090
problems like 12 years ago when

NOTE Confidence: 0.70766323375

01:25:07.090 --> 01:25:08.478
no exception originally occurred.

NOTE Confidence: 0.70766323375

01:25:08.480 --> 01:25:10.670
I'm virtually certain it's OK now.

NOTE Confidence: 0.700465657

01:25:13.660 --> 01:25:15.862
Or that occur so like no

NOTE Confidence: 0.700465657

01:25:15.862 --> 01:25:18.262
except here for this. Or not.

NOTE Confidence: 0.700465657

01:25:18.262 --> 01:25:20.329
I'll do that. Let's do it.

NOTE Confidence: 0.700465657

01:25:20.329 --> 01:25:24.010
Regex search no except dot star, back star.

NOTE Confidence: 0.700465657

01:25:24.010 --> 01:25:28.800
Uh. This? OK, concepts can do that.

NOTE Confidence: 0.700465657

01:25:28.800 --> 01:25:30.688
Yeah, when we when we're comparing to arrays.

NOTE Confidence: 0.700465657

01:25:30.690 --> 01:25:32.914
Yeah, we can totally mention here for this.

NOTE Confidence: 0.700465657

01:25:32.920 --> 01:25:34.614
Um, I think we should do that.

NOTE Confidence: 0.700465657

01:25:34.620 --> 01:25:36.966
Uh. Because it is the body.

NOTE Confidence: 0.829861128888889

01:25:40.570 --> 01:25:47.293
Uh, I believe we should be able to say.

NOTE Confidence: 0.829861128888889

01:25:47.300 --> 01:25:49.684
No. Exceptive no except.

NOTE Confidence: 0.829861128888889

01:25:49.684 --> 01:25:53.980
Of plus plus to your from this.

NOTE Confidence: 0.829861128888889

01:25:53.980 --> 01:25:55.870
And pretend. Yeah.

NOTE Confidence: 0.74139353625

01:25:59.190 --> 01:26:00.960
OK, that's right.

NOTE Confidence: 0.74139353625

01:26:00.960 --> 01:26:03.910
Just do that return void.

NOTE Confidence: 0.74139353625

01:26:03.910 --> 01:26:04.806
And then post increment.

NOTE Confidence: 0.74139353625

01:26:04.806 --> 01:26:06.709
This can be the last one we look at.

NOTE Confidence: 0.74139353625

01:26:06.710 --> 01:26:11.938
Um. Sorry, not post increment.

NOTE Confidence: 0.74139353625

01:26:11.940 --> 01:26:13.398
Alright, it's the other post increment,

NOTE Confidence: 0.74139353625

01:26:13.400 --> 01:26:16.076
um, the one that is constrained

NOTE Confidence: 0.74139353625

01:26:16.076 --> 01:26:19.720
for all four it OK.

NOTE Confidence: 0.74139353625

01:26:19.720 --> 01:26:21.916
Where is that this one here?

NOTE Confidence: 0.74139353625

01:26:21.920 --> 01:26:23.740
So context for iterator again,

NOTE Confidence: 0.74139353625

01:26:23.740 --> 01:26:25.021
discardable plus int.

NOTE Confidence: 0.74139353625

01:26:25.021 --> 01:26:27.156
It's going to have requires,

NOTE Confidence: 0.74139353625

01:26:27.160 --> 01:26:29.630
but first we have a.

NOTE Confidence: 0.74139353625

01:26:29.630 --> 01:26:31.600
Constraint.

NOTE Confidence: 0.74139353625

01:26:31.600 --> 01:26:33.224
This actually occurs repeatedly.

NOTE Confidence: 0.74139353625

01:26:33.224 --> 01:26:34.036
The um.

NOTE Confidence: 0.776661485714286

01:26:36.670 --> 01:26:40.954
Update this occurs below also for decrement.

NOTE Confidence: 0.733318552142857

01:26:44.740 --> 01:26:47.246
Um, so this one here that requires

NOTE Confidence: 0.733318552142857

01:26:47.246 --> 01:26:49.999
no except if we can pre increment?

NOTE Confidence: 0.733318552142857

01:26:50.000 --> 01:26:53.542
Sure. And because we return by value

NOTE Confidence: 0.733318552142857

01:26:53.542 --> 01:26:57.390
is no throw copy constructable V.

NOTE Confidence: 0.733318552142857

01:26:57.390 --> 01:27:00.090
Iterator. Is confused.

NOTE Confidence: 0.639290382833333

01:27:02.450 --> 01:27:04.879
Oh, that's our cost. Why does this

NOTE Confidence: 0.639290382833333

01:27:04.879 --> 01:27:07.250
say iterator is constant iterator?

NOTE Confidence: 0.639290382833333

01:27:07.250 --> 01:27:10.470
Um, using the injected class name? That's us.

NOTE Confidence: 0.737196361111111

01:27:12.830 --> 01:27:14.055
That should just be iterator

NOTE Confidence: 0.737196361111111

01:27:14.055 --> 01:27:15.035
according to our conventions.

NOTE Confidence: 0.708213456

01:27:19.050 --> 01:27:20.950
We've access to the, UM,

NOTE Confidence: 0.708213456

01:27:20.950 --> 01:27:22.010
the injected class name.

NOTE Confidence: 0.708213456

01:27:22.010 --> 01:27:23.522
Even in no accepts, there should.

NOTE Confidence: 0.708213456

01:27:23.522 --> 01:27:25.600
There should be no reason we can't use that.

NOTE Confidence: 0.708213456

01:27:25.600 --> 01:27:29.128
How, how, how, how often did this occur?

NOTE Confidence: 0.708213456

01:27:29.130 --> 01:27:31.290
Very rarely OK.

NOTE Confidence: 0.708213456

01:27:31.290 --> 01:27:34.027
Uh, that's the first occurrence again in,

NOTE Confidence: 0.708213456

01:27:34.030 --> 01:27:38.330
um, post stack. And.

NOTE Confidence: 0.708213456

01:27:38.330 --> 01:27:39.482
This is separate because

NOTE Confidence: 0.708213456

01:27:39.482 --> 01:27:41.210
this is in zip view itself,

NOTE Confidence: 0.708213456

01:27:41.210 --> 01:27:44.762
so we do need to mention is cons

NOTE Confidence: 0.708213456

01:27:44.762 --> 01:27:46.470
there though this is like Sentinel.

NOTE Confidence: 0.708213456

01:27:46.470 --> 01:27:47.858
Yeah Sentinel is constant

NOTE Confidence: 0.708213456

01:27:47.858 --> 01:27:49.246
needs to form iterators.

NOTE Confidence: 0.708213456

01:27:49.250 --> 01:27:52.750
So yeah this is these two are the ones that

NOTE Confidence: 0.708213456

01:27:52.838 --> 01:27:56.100
should just use the injected class name.

NOTE Confidence: 0.708213456

01:27:56.100 --> 01:27:57.174
Let's see.

NOTE Confidence: 0.708213456

01:27:57.174 --> 01:28:00.933
We should be able to use the.

NOTE Confidence: 0.708213456

01:28:00.940 --> 01:28:08.220
Let's be fancy italics injected class name.

NOTE Confidence: 0.708213456

01:28:08.220 --> 01:28:12.000
Under iterator here instead of.

NOTE Confidence: 0.5258650775

01:28:14.810 --> 01:28:18.630
I'm saying there's constant.

NOTE Confidence: 0.5258650775

01:28:18.630 --> 01:28:22.959
Curs. Below. Man.

NOTE Confidence: 0.58315137

01:28:27.520 --> 01:28:28.240
Decrement one.

NOTE Confidence: 0.758951916111111

01:28:30.610 --> 01:28:32.354
OK, we should be able to use the

NOTE Confidence: 0.758951916111111

01:28:32.354 --> 01:28:33.674
injected class name iterator here

NOTE Confidence: 0.758951916111111

01:28:33.674 --> 01:28:35.064
instead of saying iterator is

NOTE Confidence: 0.758951916111111

01:28:35.070 --> 01:28:38.310
below an operator minus minus int.

NOTE Confidence: 0.758951916111111

01:28:38.310 --> 01:28:42.258
Yeah. OK, that's a strengthening

NOTE Confidence: 0.758951916111111

01:28:42.258 --> 01:28:44.826
and then requires clause.

NOTE Confidence: 0.758951916111111

01:28:44.830 --> 01:28:49.247
All forward is constant view types dot.

NOTE Confidence: 0.758951916111111

01:28:49.250 --> 01:28:50.168
We make a.

NOTE Confidence: 0.757690305142857

01:28:52.220 --> 01:28:54.957
Constant auto temp that does not appear

NOTE Confidence: 0.757690305142857

01:28:54.957 --> 01:28:57.338
in the standard is dry for this.

NOTE Confidence: 0.757690305142857

01:28:57.340 --> 01:29:00.370
Increment DRF this return temp.

NOTE Confidence: 0.757690305142857

01:29:00.370 --> 01:29:01.330
Uh, let's see.

NOTE Confidence: 0.757690305142857

01:29:01.330 --> 01:29:02.930
Does that constant interfere with,

NOTE Confidence: 0.757690305142857

01:29:02.930 --> 01:29:05.820
um, the return value optimization

NOTE Confidence: 0.757690305142857

01:29:05.820 --> 01:29:08.710
and the move semantics stuff?

NOTE Confidence: 0.757690305142857

01:29:08.710 --> 01:29:10.510
I think I've actually lost track

NOTE Confidence: 0.757690305142857

01:29:10.510 --> 01:29:11.938
of whether it's, uh important.

NOTE Confidence: 0.757690305142857

01:29:11.938 --> 01:29:13.786
I think we should do what the

NOTE Confidence: 0.757690305142857

01:29:13.786 --> 01:29:15.366
standard says and not market cons.

NOTE Confidence: 0.757690305142857

01:29:15.370 --> 01:29:16.610
That's one of our exceptions,

NOTE Confidence: 0.757690305142857

01:29:16.610 --> 01:29:20.964
to apply cons to everything by default.

NOTE Confidence: 0.757690305142857

01:29:20.970 --> 01:29:24.060
Is that right, Casey? That.

NOTE Confidence: 0.757690305142857

01:29:24.060 --> 01:29:25.748
Uh, this local variable

NOTE Confidence: 0.757690305142857

01:29:25.748 --> 01:29:28.280
should not be for this um,

NOTE Confidence: 0.757690305142857

01:29:28.280 --> 01:29:30.386
post increment where we should say

NOTE Confidence: 0.757690305142857

01:29:30.386 --> 01:29:32.840
where the standard says say auto temp

NOTE Confidence: 0.757690305142857

01:29:32.840 --> 01:29:34.814
is this increment this return temp,

NOTE Confidence: 0.757690305142857

01:29:34.820 --> 01:29:36.844
marking that as consist.

NOTE Confidence: 0.757690305142857

01:29:36.844 --> 01:29:39.880
That inhibits the automatic moving and

NOTE Confidence: 0.757690305142857

01:29:39.964 --> 01:29:43.336
maybe the named return value optimization.

NOTE Confidence: 0.757690305142857

01:29:43.340 --> 01:29:47.306
I think it doesn't inhibit Nervo.

NOTE Confidence: 0.757690305142857

01:29:47.310 --> 01:29:49.030
But yeah, definitely automatically

NOTE Confidence: 0.757690305142857

01:29:49.030 --> 01:29:51.180
is going to be inhibited.

NOTE Confidence: 0.757690305142857

01:29:51.180 --> 01:29:54.148
Yeah, it's not useful for some reason.

NOTE Confidence: 0.757690305142857

01:29:54.150 --> 01:29:55.986
Yeah. So I think we should,

NOTE Confidence: 0.757690305142857

01:29:55.990 --> 01:29:57.760
uh, admit the cons here,

NOTE Confidence: 0.757690305142857

01:29:57.760 --> 01:29:59.506
despite our love of constant everywhere.

NOTE Confidence: 0.757690305142857

01:29:59.510 --> 01:30:01.176
Yeah, I would rather that we didn't

NOTE Confidence: 0.757690305142857

01:30:01.176 --> 01:30:02.750
constant things that we're gonna return.

NOTE Confidence: 0.757690305142857

01:30:02.750 --> 01:30:05.650
Yeah, OK. For that reason.

NOTE Confidence: 0.757690305142857

01:30:05.650 --> 01:30:12.860
OK, um, although. Contest is one of our.

NOTE Confidence: 0.757690305142857

01:30:12.860 --> 01:30:17.576
Favorite keywords and we mark local

NOTE Confidence: 0.757690305142857

01:30:17.576 --> 01:30:22.660
variables with it whenever possible.

NOTE Confidence: 0.757690305142857

01:30:22.660 --> 01:30:29.608
This is a rare exception when returning.

NOTE Confidence: 0.757690305142857

01:30:29.608 --> 01:30:35.560
A local variable. This can inhibit.

NOTE Confidence: 0.757690305142857

01:30:35.560 --> 01:30:40.060
Automatic moving if.

NOTE Confidence: 0.757690305142857

01:30:40.060 --> 01:30:44.615
The named return value optimization

NOTE Confidence: 0.757690305142857

01:30:44.615 --> 01:30:49.170
doesn't activate for whatever reason.

NOTE Confidence: 0.757690305142857

01:30:49.170 --> 01:30:53.678
These standard ease. Depicts.

NOTE Confidence: 0.757690305142857

01:30:53.680 --> 01:30:59.860
Auto temp. And. We should use.

NOTE Confidence: 0.757690305142857

01:30:59.860 --> 01:31:01.256
Uh. None.

NOTE Confidence: 0.757690305142857

01:31:01.256 --> 01:31:04.048
Just skipping words we

NOTE Confidence: 0.757690305142857

01:31:04.048 --> 01:31:06.840
should use non constant.

NOTE Confidence: 0.757690305142857

01:31:06.840 --> 01:31:11.040
Auto here match it.

NOTE Confidence: 0.757690305142857

01:31:11.040 --> 01:31:11.624
Occurs below.

NOTE Confidence: 0.757690305142857

01:31:11.624 --> 01:31:11.916
OK,

NOTE Confidence: 0.757690305142857

01:31:11.916 --> 01:31:13.668
although comps is one of our

NOTE Confidence: 0.757690305142857

01:31:13.668 --> 01:31:15.684
favorite keywords and we mark local

NOTE Confidence: 0.757690305142857

01:31:15.684 --> 01:31:17.354
variables with it whenever possible,

NOTE Confidence: 0.757690305142857

01:31:17.360 --> 01:31:18.704
this is a rare exception when

NOTE Confidence: 0.757690305142857

01:31:18.704 --> 01:31:19.376
returning local variable.

NOTE Confidence: 0.757690305142857

01:31:19.380 --> 01:31:20.742
This can inhibit automatic moving if

NOTE Confidence: 0.757690305142857

01:31:20.742 --> 01:31:22.024
the name return value optimization

NOTE Confidence: 0.757690305142857

01:31:22.024 --> 01:31:23.659
doesn't activate for whatever reason.

NOTE Confidence: 0.757690305142857

01:31:23.660 --> 01:31:25.652
The standard is depicts auto temp and we

NOTE Confidence: 0.757690305142857

01:31:25.652 --> 01:31:27.576
should use non cost auto here to match.

NOTE Confidence: 0.757690305142857

01:31:27.580 --> 01:31:30.250
It occurs below.

NOTE Confidence: 0.757690305142857

01:31:30.250 --> 01:31:30.692
OK.

NOTE Confidence: 0.757690305142857

01:31:30.692 --> 01:31:33.786
And we are now at time limits,

NOTE Confidence: 0.757690305142857

01:31:33.790 --> 01:31:34.705
so I will.

NOTE Confidence: 0.757690305142857

01:31:34.705 --> 01:31:37.300
I think submit a partial review looks like

NOTE Confidence: 0.757690305142857

01:31:37.300 --> 01:31:40.030
we actually got halfway through this letter,

NOTE Confidence: 0.757690305142857

01:31:40.030 --> 01:31:41.602
even though it feels like we've

NOTE Confidence: 0.757690305142857

01:31:41.602 --> 01:31:42.990
haven't gotten that far a lot.

NOTE Confidence: 0.757690305142857

01:31:42.990 --> 01:31:44.664
There's a lot of the logic in the iterator.

NOTE Confidence: 0.757690305142857

01:31:44.670 --> 01:31:46.296
The actual view itself is pretty

NOTE Confidence: 0.757690305142857

01:31:46.296 --> 01:31:48.120
small in comparison to its iterators,

NOTE Confidence: 0.757690305142857

01:31:48.120 --> 01:31:49.325
because iterators are where all

NOTE Confidence: 0.757690305142857

01:31:49.325 --> 01:31:50.289
the fun stuff happens.

NOTE Confidence: 0.757690305142857

01:31:50.290 --> 01:31:53.566
We've already seen how it forms the

NOTE Confidence: 0.757690305142857

01:31:53.566 --> 01:31:55.987
dereference of everything and compares

NOTE Confidence: 0.757690305142857

01:31:55.987 --> 01:31:59.270
2 iterators by using equal or subtraction.

NOTE Confidence: 0.757690305142857

01:31:59.270 --> 01:32:00.958
So it's pretty cool.

NOTE Confidence: 0.757690305142857

01:32:00.958 --> 01:32:01.380
Um,

NOTE Confidence: 0.757690305142857

01:32:01.380 --> 01:32:03.414
I will submit a partial review

NOTE Confidence: 0.757690305142857

01:32:03.414 --> 01:32:05.883
and then come back to this later

NOTE Confidence: 0.757690305142857

01:32:05.883 --> 01:32:07.959
after the tool set update and

NOTE Confidence: 0.757690305142857

01:32:07.959 --> 01:32:10.154
finish reviewing so we can get

NOTE Confidence: 0.757690305142857

01:32:10.154 --> 01:32:12.177
this ideally into 17-5 Preview 2,

NOTE Confidence: 0.757690305142857

01:32:12.177 --> 01:32:13.772
although depending on logistics it

NOTE Confidence: 0.757690305142857

01:32:13.772 --> 01:32:16.149
may or may not get into that release.

NOTE Confidence: 0.757690305142857

01:32:16.150 --> 01:32:18.632
We're gonna try though. Umm, OK.

NOTE Confidence: 0.757690305142857

01:32:18.632 --> 01:32:19.960
I'll submit this offline.

NOTE Confidence: 0.757690305142857

01:32:19.960 --> 01:32:21.020
Um, as always, um,

NOTE Confidence: 0.757690305142857

01:32:21.020 --> 01:32:22.898
thanks for watching this and we'll see

NOTE Confidence: 0.757690305142857

01:32:22.898 --> 01:32:24.802
you next time on the open code reviews.
