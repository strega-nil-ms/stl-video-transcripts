WEBVTT

NOTE duration:"01:40:28"

NOTE recognizability:0.782

NOTE language:en-us

NOTE Confidence: 0.790655707272727

00:00:12.920 --> 00:00:14.678
Hi and welcome back to another

NOTE Confidence: 0.790655707272727

00:00:14.678 --> 00:00:16.300
VC libraries Open code review.

NOTE Confidence: 0.790655707272727

00:00:16.300 --> 00:00:18.988
Today we'll be looking at a PR from

NOTE Confidence: 0.790655707272727

00:00:18.988 --> 00:00:20.702
our contributor superwog implementing

NOTE Confidence: 0.790655707272727

00:00:20.702 --> 00:00:23.690
new algorithms for the C23 standard.

NOTE Confidence: 0.790655707272727

00:00:23.690 --> 00:00:25.790
The paper number is

NOTE Confidence: 0.75951503375

00:00:27.960 --> 00:00:31.824
P1223R5 and the algorithms are find last Umm,

NOTE Confidence: 0.75951503375

00:00:31.830 --> 00:00:33.979
and there's a whole family of them.

NOTE Confidence: 0.75951503375

00:00:33.980 --> 00:00:37.386
The PR that we're looking at in the

NOTE Confidence: 0.75951503375

00:00:37.386 --> 00:00:43.000
Microsoft SQL Repo is 3268, so here's the PR.

NOTE Confidence: 0.75951503375

00:00:43.000 --> 00:00:44.806
This has a link to the

NOTE Confidence: 0.75951503375

00:00:44.806 --> 00:00:46.480
tracking issue that we filed,

NOTE Confidence: 0.75951503375

00:00:46.480 --> 00:00:48.820
um which lists the feature test

NOTE Confidence: 0.75951503375

00:00:48.820 --> 00:00:51.360
macro that should be implemented.

NOTE Confidence: 0.75951503375

00:00:51.360 --> 00:00:55.014
And here is where we link to all of

NOTE Confidence: 0.75951503375

00:00:55.014 --> 00:00:58.475
the relevant papers that were voted in.

NOTE Confidence: 0.75951503375

00:00:58.475 --> 00:01:00.185
Sometimes there's a primary paper and

NOTE Confidence: 0.75951503375

00:01:00.185 --> 00:01:02.218
then patch papers that update it later,

NOTE Confidence: 0.75951503375

00:01:02.220 --> 00:01:04.845
sometimes LWG issues from the

NOTE Confidence: 0.75951503375

00:01:04.845 --> 00:01:06.420
library working group.

NOTE Confidence: 0.75951503375

00:01:06.420 --> 00:01:09.458
In this case, there's just one paper.

NOTE Confidence: 0.75951503375

00:01:09.460 --> 00:01:11.944
And here I've opened it up

NOTE Confidence: 0.75951503375

00:01:11.944 --> 00:01:14.329
to see what wording it has,

NOTE Confidence: 0.75951503375

00:01:14.330 --> 00:01:16.736
and then finally I've opened up

NOTE Confidence: 0.75951503375

00:01:16.736 --> 00:01:18.787
the currency versus working draft

NOTE Confidence: 0.75951503375

00:01:18.787 --> 00:01:20.227
with the current standard's.

NOTE Confidence: 0.75951503375

00:01:20.227 --> 00:01:22.129
I don't believe this has been

NOTE Confidence: 0.75951503375

00:01:22.129 --> 00:01:23.450
patched by anything later,

NOTE Confidence: 0.75951503375

00:01:23.450 --> 00:01:25.790
but when a paper just adds a whole bunch

NOTE Confidence: 0.75951503375

00:01:25.790 --> 00:01:28.165
of new wording and doesn't have like.

NOTE Confidence: 0.75951503375

00:01:28.170 --> 00:01:29.605
Lots of fine grained changes

NOTE Confidence: 0.75951503375

00:01:29.605 --> 00:01:30.466
to existing wording.

NOTE Confidence: 0.75951503375

00:01:30.470 --> 00:01:32.895
It can just be simpler to look at the, uh,

NOTE Confidence: 0.75951503375

00:01:32.895 --> 00:01:35.870
the final version in the working draft.

NOTE Confidence: 0.75951503375

00:01:35.870 --> 00:01:39.629
So we've got the features macro here.

NOTE Confidence: 0.75951503375

00:01:39.630 --> 00:01:42.454
These algorithms are there's

NOTE Confidence: 0.75951503375

00:01:42.454 --> 00:01:45.984
a little bit of interesting.

NOTE Confidence: 0.75951503375

00:01:45.990 --> 00:01:47.718
Detail about how they work with,

NOTE Confidence: 0.75951503375

00:01:47.720 --> 00:01:48.986
um, uh,

NOTE Confidence: 0.75951503375

00:01:48.986 --> 00:01:50.885
forward versus bidirectional

NOTE Confidence: 0.75951503375

00:01:50.885 --> 00:01:54.050
iterators let me actually see

NOTE Confidence: 0.75951503375

00:01:54.156 --> 00:01:58.160
where the wordings being added so.

NOTE Confidence: 0.75951503375

00:01:58.160 --> 00:01:59.840
Here is the.

NOTE Confidence: 0.79416526

00:02:02.040 --> 00:02:03.456
Post wording. This is just the

NOTE Confidence: 0.79416526

00:02:03.456 --> 00:02:04.710
context where it's being added.

NOTE Confidence: 0.79416526

00:02:04.710 --> 00:02:06.170
The new stuff highlighted

NOTE Confidence: 0.79416526

00:02:06.170 --> 00:02:08.360
in cyan here is find last.

NOTE Confidence: 0.79416526

00:02:08.360 --> 00:02:11.476
So we get find last, find last if taking

NOTE Confidence: 0.79416526

00:02:11.476 --> 00:02:14.400
a predicate and then find last if not,

NOTE Confidence: 0.79416526

00:02:14.400 --> 00:02:17.040
and then the actual addition is

NOTE Confidence: 0.79416526

00:02:17.040 --> 00:02:20.220
in a section named Alec find last.

NOTE Confidence: 0.79416526

00:02:20.220 --> 00:02:21.504
And that's it. OK,

NOTE Confidence: 0.79416526

00:02:21.504 --> 00:02:24.599
so there's no aside from the synopsis change,

NOTE Confidence: 0.79416526

00:02:24.600 --> 00:02:28.296
which is just declarations, there's no other.

NOTE Confidence: 0.79416526

00:02:28.300 --> 00:02:30.136
Changes to existing standard's so we

NOTE Confidence: 0.79416526

00:02:30.136 --> 00:02:32.698
can just look at the working draft now.

NOTE Confidence: 0.79416526

00:02:32.700 --> 00:02:36.516
I've already found the relevant section.

NOTE Confidence: 0.79416526

00:02:36.520 --> 00:02:38.894
This is a. It looks like a whole, you know,

NOTE Confidence: 0.79416526

00:02:38.894 --> 00:02:41.096
dense mass of keywords and identifiers.

NOTE Confidence: 0.79416526

00:02:41.100 --> 00:02:44.340
It's not as frightening as it May 1st seem.

NOTE Confidence: 0.79416526

00:02:44.340 --> 00:02:47.000
It's just because this

NOTE Confidence: 0.79416526

00:02:47.000 --> 00:02:49.660
is specifying both the.

NOTE Confidence: 0.79416526

00:02:49.660 --> 00:02:51.814
Predicate forms and the non the

NOTE Confidence: 0.79416526

00:02:51.814 --> 00:02:53.780
inverted form find last if not,

NOTE Confidence: 0.79416526

00:02:53.780 --> 00:02:55.898
and so forth.

NOTE Confidence: 0.79416526

00:02:55.898 --> 00:03:00.088
And it's got 2 forms to handle

NOTE Confidence: 0.79416526

00:03:00.088 --> 00:03:02.673
iterators and Sentinels and ranges,

NOTE Confidence: 0.79416526

00:03:02.680 --> 00:03:04.774
because C plus doesn't provide us

NOTE Confidence: 0.79416526

00:03:04.774 --> 00:03:07.569
a way to sort of unify these in

NOTE Confidence: 0.79416526

00:03:07.569 --> 00:03:09.416
just a single combined declaration.

NOTE Confidence: 0.79416526

00:03:09.416 --> 00:03:11.984
But it's not quite as complicated

NOTE Confidence: 0.79416526

00:03:11.984 --> 00:03:13.340
as it seems.

NOTE Confidence: 0.79416526

00:03:13.340 --> 00:03:15.572
So let's take a look at the PR

NOTE Confidence: 0.79416526

00:03:15.572 --> 00:03:16.918
and then as we see,

NOTE Confidence: 0.79416526

00:03:16.920 --> 00:03:18.290
interesting things all refer back

NOTE Confidence: 0.79416526

00:03:18.290 --> 00:03:22.020
to the standard's. Me magnify this.

NOTE Confidence: 0.79522216

00:03:24.990 --> 00:03:27.470
OK alt Click to on the Chevron to

NOTE Confidence: 0.79522216

00:03:27.470 --> 00:03:29.789
see what files are being added.

NOTE Confidence: 0.79522216

00:03:29.790 --> 00:03:32.387
So we are updating our central internal

NOTE Confidence: 0.79522216

00:03:32.387 --> 00:03:34.948
header to mention the new paper and

NOTE Confidence: 0.79522216

00:03:34.948 --> 00:03:37.018
the feature test macro product code

NOTE Confidence: 0.79522216

00:03:37.086 --> 00:03:39.166
changes in the algorithm header.

NOTE Confidence: 0.79522216

00:03:39.170 --> 00:03:41.543
We have new test being added and

NOTE Confidence: 0.79522216

00:03:41.543 --> 00:03:43.790
then a feature to smacker test.

NOTE Confidence: 0.79522216

00:03:43.790 --> 00:03:45.206
Ever since I was in kindergarten,

NOTE Confidence: 0.79522216

00:03:45.210 --> 00:03:48.269
I like to eat my dessert first,

NOTE Confidence: 0.79522216

00:03:48.270 --> 00:03:50.286
so I'm going to look at the

NOTE Confidence: 0.79522216

00:03:50.286 --> 00:03:51.150
easy changes first.

NOTE Confidence: 0.79522216

00:03:51.150 --> 00:03:53.090
Here is the new declaration

NOTE Confidence: 0.79522216

00:03:53.090 --> 00:03:55.960
or the new list of the paper.

NOTE Confidence: 0.79522216

00:03:55.960 --> 00:03:57.090
Let's make sure it matches

NOTE Confidence: 0.79522216

00:03:57.090 --> 00:03:58.544
the tracking issue. It does.

NOTE Confidence: 0.79522216

00:03:58.544 --> 00:04:01.253
This makes sure that there's no typos

NOTE Confidence: 0.79522216

00:04:01.253 --> 00:04:04.966
or digit transpositions in the paper number.

NOTE Confidence: 0.79522216

00:04:04.970 --> 00:04:06.128
So that's good.

NOTE Confidence: 0.79522216

00:04:06.128 --> 00:04:08.830
This is in sorted order and is

NOTE Confidence: 0.79522216

00:04:08.918 --> 00:04:11.242
this being listed under C23?

NOTE Confidence: 0.79522216

00:04:11.242 --> 00:04:12.026
It is.

NOTE Confidence: 0.79522216

00:04:12.026 --> 00:04:12.810
That's good.

NOTE Confidence: 0.79522216

00:04:12.810 --> 00:04:17.021
And then we've got the feature test macro.

NOTE Confidence: 0.79522216

00:04:17.021 --> 00:04:20.010
So here's an interesting bit where I

NOTE Confidence: 0.79522216

00:04:20.090 --> 00:04:22.988
originally recorded CPP Lib find last,

NOTE Confidence: 0.79522216

00:04:22.990 --> 00:04:24.466
but the feature just macro is

NOTE Confidence: 0.79522216

00:04:24.466 --> 00:04:26.140
actually going to be named ranges.

NOTE Confidence: 0.79522216

00:04:26.140 --> 00:04:28.289
And last and here super wig has

NOTE Confidence: 0.79522216

00:04:28.289 --> 00:04:30.490
added a comment that there's a

NOTE Confidence: 0.79522216

00:04:30.490 --> 00:04:32.098
library working group issue,

NOTE Confidence: 0.79522216

00:04:32.100 --> 00:04:34.656
so I'm gonna use my search shortcut.

NOTE Confidence: 0.79522216

00:04:34.656 --> 00:04:37.022
I just type LWG and this takes

NOTE Confidence: 0.79522216

00:04:37.022 --> 00:04:38.717
me right to the issue.

NOTE Confidence: 0.79522216

00:04:38.720 --> 00:04:40.880
So the paper this was actually

NOTE Confidence: 0.79522216

00:04:40.880 --> 00:04:43.244
opened by Super Rick, thank you.

NOTE Confidence: 0.79522216

00:04:43.244 --> 00:04:45.092
The original paper specifies

NOTE Confidence: 0.79522216

00:04:45.092 --> 00:04:46.940
CPP Lib find glass,

NOTE Confidence: 0.79522216

00:04:46.940 --> 00:04:49.016
but it's only adding ranges algorithms.

NOTE Confidence: 0.79522216

00:04:49.020 --> 00:04:50.380
So for consistency it really

NOTE Confidence: 0.79522216

00:04:50.380 --> 00:04:52.040
should be named ranges find land.

NOTE Confidence: 0.79522216

00:04:52.040 --> 00:04:54.938
So this is already been approved

NOTE Confidence: 0.79522216

00:04:54.940 --> 00:04:56.200
by the library working group.

NOTE Confidence: 0.79522216

00:04:56.200 --> 00:04:58.288
It will be voted in during the next meeting.

NOTE Confidence: 0.79522216

00:04:58.290 --> 00:04:59.650
Totally fine to implement it

NOTE Confidence: 0.79522216

00:04:59.650 --> 00:05:00.466
now by convention.

NOTE Confidence: 0.79522216

00:05:00.470 --> 00:05:02.354
We'll comment when we're

NOTE Confidence: 0.79522216

00:05:02.354 --> 00:05:04.238
sort of implementing things.

NOTE Confidence: 0.79522216

00:05:04.240 --> 00:05:05.976
A little bit advance of the standard,

NOTE Confidence: 0.79522216

00:05:05.980 --> 00:05:09.300
so commenting LWG 3807 here is appropriate.

NOTE Confidence: 0.79522216

00:05:09.300 --> 00:05:10.804
So range is fine.

NOTE Confidence: 0.79522216

00:05:10.804 --> 00:05:13.092
Last and the value is 202207.

NOTE Confidence: 0.79522216

00:05:13.092 --> 00:05:14.700
That has not changed.

NOTE Confidence: 0.79522216

00:05:14.700 --> 00:05:17.080
Um, so this looks cracked.

NOTE Confidence: 0.79522216

00:05:17.080 --> 00:05:18.700
Yep CPP Lib Brain just fine.

NOTE Confidence: 0.79522216

00:05:18.700 --> 00:05:22.614
Last that's sorted order LG 3807.

NOTE Confidence: 0.79522216

00:05:22.614 --> 00:05:25.533
Double check that this is correctly and

NOTE Confidence: 0.79522216

00:05:25.533 --> 00:05:28.672
see what was 23 and not say C + + 20.

NOTE Confidence: 0.79522216

00:05:28.680 --> 00:05:31.400
Correct. OK, which is good.

NOTE Confidence: 0.79522216

00:05:31.400 --> 00:05:33.472
Let's take a look at the feature

NOTE Confidence: 0.79522216

00:05:33.472 --> 00:05:34.360
to smacker test.

NOTE Confidence: 0.79522216

00:05:34.360 --> 00:05:36.136
Uh, we've got the new ranges.

NOTE Confidence: 0.79522216

00:05:36.140 --> 00:05:40.984
Find last. I will check that value.

NOTE Confidence: 0.79522216

00:05:40.990 --> 00:05:42.830
Ah, we've got a typo.

NOTE Confidence: 0.79522216

00:05:42.830 --> 00:05:43.171
OK,

NOTE Confidence: 0.79522216

00:05:43.171 --> 00:05:44.194
so this is.

NOTE Confidence: 0.79522216

00:05:44.194 --> 00:05:46.713
This is why I habitually search for

NOTE Confidence: 0.79522216

00:05:46.713 --> 00:05:49.450
all occurrences of the value to detect.

NOTE Confidence: 0.79522216

00:05:49.450 --> 00:05:52.408
Copy paste those in this case,

NOTE Confidence: 0.79522216

00:05:52.410 --> 00:05:54.000
because this stuff is so repetitive,

NOTE Confidence: 0.79522216

00:05:54.000 --> 00:05:57.230
the the usual way to add it is copy pasting,

NOTE Confidence: 0.79522216

00:05:57.230 --> 00:06:00.450
but one of these was not updated.

NOTE Confidence: 0.79522216

00:06:00.450 --> 00:06:01.460
Where we emitted an error,

NOTE Confidence: 0.79522216

00:06:01.460 --> 00:06:03.638
but this says a different value,

NOTE Confidence: 0.79522216

00:06:03.640 --> 00:06:04.808
so that's a bug.

NOTE Confidence: 0.68265676

00:06:06.890 --> 00:06:09.539
This uh value.

NOTE Confidence: 0.65280602

00:06:12.320 --> 00:06:13.880
Because I'll just say it's incorrect.

NOTE Confidence: 0.815397576363636

00:06:17.700 --> 00:06:19.814
OK, because I expect to see it

NOTE Confidence: 0.815397576363636

00:06:19.814 --> 00:06:21.260
three times repeated exactly.

NOTE Confidence: 0.815397576363636

00:06:21.260 --> 00:06:23.138
I'm assuming that the spelling is

NOTE Confidence: 0.815397576363636

00:06:23.138 --> 00:06:24.755
correct because this would fail

NOTE Confidence: 0.815397576363636

00:06:24.755 --> 00:06:26.320
if it were spelled incorrectly.

NOTE Confidence: 0.815397576363636

00:06:26.320 --> 00:06:28.930
But for completeness, let's double check.

NOTE Confidence: 0.815397576363636

00:06:28.930 --> 00:06:31.037
OK, so all of these were updated.

NOTE Confidence: 0.815397576363636

00:06:31.040 --> 00:06:32.942
Occasionally I will find like a

NOTE Confidence: 0.815397576363636

00:06:32.942 --> 00:06:35.310
copy paste error where one of these

NOTE Confidence: 0.815397576363636

00:06:35.310 --> 00:06:37.035
macro occurrences was not updated,

NOTE Confidence: 0.815397576363636

00:06:37.040 --> 00:06:39.420
but here they're all good.

NOTE Confidence: 0.815397576363636

00:06:39.420 --> 00:06:40.820
Let's see. Jose asked in the chat.

NOTE Confidence: 0.815397576363636

00:06:40.820 --> 00:06:42.920
Can we script these repetitive sections?

NOTE Confidence: 0.815397576363636

00:06:42.920 --> 00:06:44.388
That would be nice.

NOTE Confidence: 0.902296843846154

00:06:46.430 --> 00:06:48.580
Unfortunately, the preprocessor does not

NOTE Confidence: 0.902296843846154

00:06:48.580 --> 00:06:51.578
really have any advanced logic for doing so.

NOTE Confidence: 0.902296843846154

00:06:51.580 --> 00:06:53.992
In theory, we could write an

NOTE Confidence: 0.902296843846154

00:06:53.992 --> 00:06:56.439
actual script that would emit code,

NOTE Confidence: 0.902296843846154

00:06:56.440 --> 00:06:59.008
but then we would need like a build

NOTE Confidence: 0.902296843846154

00:06:59.008 --> 00:07:01.633
step in the test machinery to run

NOTE Confidence: 0.902296843846154

00:07:01.633 --> 00:07:04.509
that script to generate a source file.

NOTE Confidence: 0.902296843846154

00:07:04.510 --> 00:07:06.953
And ultimately it would just be sort

NOTE Confidence: 0.902296843846154

00:07:06.953 --> 00:07:09.598
of the the stuff that would drive

NOTE Confidence: 0.902296843846154

00:07:09.598 --> 00:07:12.436
that script would be kind of repeating

NOTE Confidence: 0.902296843846154

00:07:12.436 --> 00:07:15.872
the just sort of the the declarative

NOTE Confidence: 0.902296843846154

00:07:15.872 --> 00:07:19.099
list of macros and values here.

NOTE Confidence: 0.902296843846154

00:07:19.100 --> 00:07:20.522
So ultimately I don't know of

NOTE Confidence: 0.902296843846154

00:07:20.522 --> 00:07:21.840
a better way to do it.

NOTE Confidence: 0.902296843846154

00:07:21.840 --> 00:07:24.132
This is just sort of repeating

NOTE Confidence: 0.902296843846154

00:07:24.132 --> 00:07:26.391
information twice in different ways to

NOTE Confidence: 0.902296843846154

00:07:26.391 --> 00:07:28.729
make sure that we detect any divergence.

NOTE Confidence: 0.902296843846154

00:07:28.730 --> 00:07:31.322
In uh in in theory I mean this test.

NOTE Confidence: 0.902296843846154

00:07:31.330 --> 00:07:33.580
This test was originally um,

NOTE Confidence: 0.902296843846154

00:07:33.580 --> 00:07:34.690
and it's an interesting question.

NOTE Confidence: 0.902296843846154

00:07:34.690 --> 00:07:37.554
This test was originally added for both

NOTE Confidence: 0.902296843846154

00:07:37.554 --> 00:07:39.606
the compiler and the Standard library.

NOTE Confidence: 0.902296843846154

00:07:39.610 --> 00:07:41.822
When I went into the compiler and

NOTE Confidence: 0.902296843846154

00:07:41.822 --> 00:07:44.582
pretended to be a compiler dev for a day

NOTE Confidence: 0.902296843846154

00:07:44.582 --> 00:07:46.850
and added feature to smacker support,

NOTE Confidence: 0.902296843846154

00:07:46.850 --> 00:07:49.280
it was testing the compilers expansion,

NOTE Confidence: 0.902296843846154

00:07:49.280 --> 00:07:52.448
which could go wrong in all sorts of ways.

NOTE Confidence: 0.902296843846154

00:07:52.450 --> 00:07:54.347
The library macros have always been simpler.

NOTE Confidence: 0.902296843846154

00:07:54.350 --> 00:07:55.995
We just define them or we don't

NOTE Confidence: 0.902296843846154

00:07:55.995 --> 00:07:58.049
and we set them to various values.

NOTE Confidence: 0.902296843846154

00:07:58.050 --> 00:07:58.725
So ever since.

NOTE Confidence: 0.902296843846154

00:07:58.725 --> 00:08:00.609
We carved up this test into half and

NOTE Confidence: 0.902296843846154

00:08:00.609 --> 00:08:02.133
then sent the compiler part back

NOTE Confidence: 0.902296843846154

00:08:02.133 --> 00:08:02.895
to the compiler.

NOTE Confidence: 0.902296843846154

00:08:02.900 --> 00:08:04.238
That's in the internal test harness.

NOTE Confidence: 0.902296843846154

00:08:04.240 --> 00:08:04.628
Now,

NOTE Confidence: 0.902296843846154

00:08:04.628 --> 00:08:06.956
the library part of the harness

NOTE Confidence: 0.902296843846154

00:08:06.956 --> 00:08:09.288
is admittedly not providing super

NOTE Confidence: 0.902296843846154

00:08:09.288 --> 00:08:10.926
duper useful coverage.

NOTE Confidence: 0.902296843846154

00:08:10.930 --> 00:08:13.084
We probably could just eliminate this

NOTE Confidence: 0.902296843846154

00:08:13.084 --> 00:08:15.299
task and wouldn't lose a whole lot.

NOTE Confidence: 0.902296843846154

00:08:15.300 --> 00:08:16.756
We would need to be extra careful

NOTE Confidence: 0.902296843846154

00:08:16.756 --> 00:08:18.293
to make sure that we're guarding

NOTE Confidence: 0.902296843846154

00:08:18.293 --> 00:08:19.733
things and the header properly.

NOTE Confidence: 0.902296843846154

00:08:19.740 --> 00:08:21.483
But there's not a whole lot of

NOTE Confidence: 0.902296843846154

00:08:21.483 --> 00:08:24.760
ways that this can be damaged.

NOTE Confidence: 0.902296843846154

00:08:24.760 --> 00:08:26.496
I suppose it does provide a useful check

NOTE Confidence: 0.902296843846154

00:08:26.496 --> 00:08:28.039
to express things in different ways,

NOTE Confidence: 0.902296843846154

00:08:28.040 --> 00:08:29.196
so this tells us.

NOTE Confidence: 0.902296843846154

00:08:29.196 --> 00:08:31.641
We should only expect to see find last

NOTE Confidence: 0.902296843846154

00:08:31.641 --> 00:08:34.209
when 23 and CPP Lib concepts are enabled.

NOTE Confidence: 0.902296843846154

00:08:34.210 --> 00:08:35.968
This is implied by the structure

NOTE Confidence: 0.902296843846154

00:08:35.968 --> 00:08:36.847
of the header,

NOTE Confidence: 0.902296843846154

00:08:36.850 --> 00:08:38.943
but expressed in a different way because

NOTE Confidence: 0.902296843846154

00:08:38.943 --> 00:08:40.907
it's guarded by of 23 and concepts.

NOTE Confidence: 0.902296843846154

00:08:40.910 --> 00:08:44.004
O if we tried to script this,

NOTE Confidence: 0.902296843846154

00:08:44.010 --> 00:08:45.984
the stuff driving it would end up

NOTE Confidence: 0.902296843846154

00:08:45.984 --> 00:08:47.829
looking more like rivals Core H um.

NOTE Confidence: 0.902296843846154

00:08:47.830 --> 00:08:49.186
So would, I think,

NOTE Confidence: 0.902296843846154

00:08:49.186 --> 00:08:50.881
actually reduce the utility of

NOTE Confidence: 0.902296843846154

00:08:50.881 --> 00:08:53.705
the test a little and in addition

NOTE Confidence: 0.902296843846154

00:08:53.705 --> 00:08:55.317
to significantly complicating the

NOTE Confidence: 0.902296843846154

00:08:55.320 --> 00:08:56.463
the test machinery.

NOTE Confidence: 0.902296843846154

00:08:56.463 --> 00:08:58.749
But perhaps there's a more elegant

NOTE Confidence: 0.902296843846154

00:08:58.749 --> 00:09:01.719
way to do it, I'm not sure.

NOTE Confidence: 0.902296843846154

00:09:01.720 --> 00:09:03.040
OK, so returning here.

NOTE Confidence: 0.902296843846154

00:09:03.040 --> 00:09:05.020
So we've got the macro name

NOTE Confidence: 0.902296843846154

00:09:05.090 --> 00:09:06.280
spelled correctly.

NOTE Confidence: 0.902296843846154

00:09:06.280 --> 00:09:08.690
We've commented about the value

NOTE Confidence: 0.902296843846154

00:09:08.690 --> 00:09:10.136
not occurring here.

NOTE Confidence: 0.902296843846154

00:09:10.140 --> 00:09:11.280
Does everything else look good?

NOTE Confidence: 0.902296843846154

00:09:11.280 --> 00:09:13.359
We are indeed guarded by if has

NOTE Confidence: 0.902296843846154

00:09:13.359 --> 00:09:15.290
23 and defines eclip concepts.

NOTE Confidence: 0.902296843846154

00:09:15.290 --> 00:09:17.418
Here I'm just checking for all the

NOTE Confidence: 0.902296843846154

00:09:17.418 --> 00:09:19.109
underscores and capitals being correct.

NOTE Confidence: 0.902296843846154

00:09:19.110 --> 00:09:20.505
We've got this comment because

NOTE Confidence: 0.902296843846154

00:09:20.505 --> 00:09:22.212
hopefully we won't always need to

NOTE Confidence: 0.902296843846154

00:09:22.212 --> 00:09:23.240
be checking for concepts.

NOTE Confidence: 0.902296843846154

00:09:23.240 --> 00:09:25.796
There's a tracking issue about that.

NOTE Confidence: 0.902296843846154

00:09:25.800 --> 00:09:28.556
There's also a comment about LBG 3807.

NOTE Confidence: 0.902296843846154

00:09:28.556 --> 00:09:29.780
Totally reasonable here.

NOTE Confidence: 0.902296843846154

00:09:29.780 --> 00:09:31.376
Once that's accepted and working paper,

NOTE Confidence: 0.902296843846154

00:09:31.380 --> 00:09:33.288
we'll go back and eliminate all

NOTE Confidence: 0.902296843846154

00:09:33.288 --> 00:09:33.924
these comments.

NOTE Confidence: 0.902296843846154

00:09:33.930 --> 00:09:34.186
Um,

NOTE Confidence: 0.902296843846154

00:09:34.186 --> 00:09:36.490
last thing to check is is it actually in

NOTE Confidence: 0.8337186225

00:09:36.552 --> 00:09:37.310
sorted order?

NOTE Confidence: 0.8337186225

00:09:37.310 --> 00:09:39.574
Um, ranges contains ranges,

NOTE Confidence: 0.8337186225

00:09:39.574 --> 00:09:41.902
find ranges, fold. Yes it is.

NOTE Confidence: 0.8337186225

00:09:41.902 --> 00:09:44.680
OK, so this looks good.

NOTE Confidence: 0.8337186225

00:09:44.680 --> 00:09:47.020
OK, I'm continuing.

NOTE Confidence: 0.819924033846154

00:09:55.250 --> 00:09:56.727
Easy to miss because this is only

NOTE Confidence: 0.819924033846154

00:09:56.727 --> 00:09:58.450
used by the internal test harness.

NOTE Confidence: 0.819924033846154

00:09:58.450 --> 00:10:02.200
Um. This is incorrect.

NOTE Confidence: 0.819924033846154

00:10:02.200 --> 00:10:04.840
Um, it appears that these directories

NOTE Confidence: 0.819924033846154

00:10:04.840 --> 00:10:07.009
were added and then the name

NOTE Confidence: 0.819924033846154

00:10:07.009 --> 00:10:09.250
was updated to add the ranges.

NOTE Confidence: 0.819924033846154

00:10:09.250 --> 00:10:12.678
Alec for consistency with our other tests.

NOTE Confidence: 0.819924033846154

00:10:12.678 --> 00:10:16.262
But then test dot list was not updated.

NOTE Confidence: 0.819924033846154

00:10:16.270 --> 00:10:18.774
So this works in the GitHub harness because

NOTE Confidence: 0.819924033846154

00:10:18.774 --> 00:10:20.973
the Python powered machinery will just

NOTE Confidence: 0.819924033846154

00:10:20.973 --> 00:10:23.235
recurse and find all the directories.

NOTE Confidence: 0.819924033846154

00:10:23.240 --> 00:10:25.176
But in our internal,

NOTE Confidence: 0.819924033846154

00:10:25.176 --> 00:10:28.910
much less advanced Earl power to harness,

NOTE Confidence: 0.819924033846154

00:10:28.910 --> 00:10:30.800
I cringe when I say that.

NOTE Confidence: 0.819924033846154

00:10:30.800 --> 00:10:32.744
Um, these directories just won't exist

NOTE Confidence: 0.819924033846154

00:10:32.744 --> 00:10:35.286
and I think it will emit an error

NOTE Confidence: 0.819924033846154

00:10:35.286 --> 00:10:37.420
or it will just silently skip them.

NOTE Confidence: 0.819924033846154

00:10:37.420 --> 00:10:41.004
In any event, this needs to be updated.

NOTE Confidence: 0.819924033846154

00:10:41.010 --> 00:10:46.518
These test directory names are outdated.

NOTE Confidence: 0.819924033846154

00:10:46.520 --> 00:10:47.792
This is absolutely something

NOTE Confidence: 0.819924033846154

00:10:47.792 --> 00:10:49.064
that could be scripted,

NOTE Confidence: 0.819924033846154

00:10:49.070 --> 00:10:51.401
but we would have to descend into

NOTE Confidence: 0.819924033846154

00:10:51.401 --> 00:10:54.070
Pearl Madness to fix this and we just

NOTE Confidence: 0.819924033846154

00:10:54.070 --> 00:10:56.070
have never actually had the time.

NOTE Confidence: 0.907836958

00:10:59.870 --> 00:11:01.634
In the future, I hope that we

NOTE Confidence: 0.907836958

00:11:01.634 --> 00:11:03.650
will be able to get the internal

NOTE Confidence: 0.907836958

00:11:03.650 --> 00:11:05.450
machinery to run to drive the,

NOTE Confidence: 0.907836958

00:11:05.450 --> 00:11:07.570
uh, Python power test harness.

NOTE Confidence: 0.907836958

00:11:07.570 --> 00:11:08.921
That would require a fair amount of

NOTE Confidence: 0.907836958

00:11:08.921 --> 00:11:10.465
engineering work, but we would be able

NOTE Confidence: 0.907836958

00:11:10.465 --> 00:11:11.950
to eliminate all this legacy stuff.

NOTE Confidence: 0.907836958

00:11:11.950 --> 00:11:13.390
It's on our it's on our To Do List.

NOTE Confidence: 0.907836958

00:11:13.390 --> 00:11:16.036
We've got a project for completing more

NOTE Confidence: 0.907836958

00:11:16.036 --> 00:11:18.552
of the GitHub migration and getting

NOTE Confidence: 0.907836958

00:11:18.552 --> 00:11:21.168
rid of our internal legacy stuff.

NOTE Confidence: 0.907836958

00:11:21.170 --> 00:11:22.370
OK, so comment there.

NOTE Confidence: 0.907836958

00:11:22.370 --> 00:11:24.533
I'm aside from that, at least the,

NOTE Confidence: 0.907836958

00:11:24.533 --> 00:11:26.459
UM, the paper number is OK.

NOTE Confidence: 0.907836958

00:11:26.460 --> 00:11:27.825
I will check.

NOTE Confidence: 0.907836958

00:11:27.825 --> 00:11:30.430
That is what the the guiding principle

NOTE Confidence: 0.907836958

00:11:30.430 --> 00:11:32.966
here that I'm not voicing until now is

NOTE Confidence: 0.907836958

00:11:32.966 --> 00:11:35.410
that when I find something like a typo,

NOTE Confidence: 0.907836958

00:11:35.410 --> 00:11:37.792
sort of, my level of caution

NOTE Confidence: 0.907836958

00:11:37.792 --> 00:11:39.042
immediately goes up a notch.

NOTE Confidence: 0.907836958

00:11:39.042 --> 00:11:40.107
I start looking for care.

NOTE Confidence: 0.907836958

00:11:40.110 --> 00:11:42.014
There other typos or copy paste errors,

NOTE Confidence: 0.907836958

00:11:42.020 --> 00:11:42.575
things like that.

NOTE Confidence: 0.907836958

00:11:42.575 --> 00:11:43.315
Because where there's one,

NOTE Confidence: 0.907836958

00:11:43.320 --> 00:11:45.828
there's usually more.

NOTE Confidence: 0.907836958

00:11:45.830 --> 00:11:47.030
So paper number is correct,

NOTE Confidence: 0.907836958

00:11:47.030 --> 00:11:48.836
so we just need to correct the

NOTE Confidence: 0.907836958

00:11:48.836 --> 00:11:50.618
directories and it is inserted order.

NOTE Confidence: 0.907836958

00:11:50.620 --> 00:11:53.252
Another thing we don't

NOTE Confidence: 0.907836958

00:11:53.252 --> 00:11:57.190
algorithmically enforce. OK, good.

NOTE Confidence: 0.907836958

00:11:57.190 --> 00:12:00.070
Uh, we've got configuration files.

NOTE Confidence: 0.907836958

00:12:00.070 --> 00:12:02.070
Let's look at these first.

NOTE Confidence: 0.907836958

00:12:02.070 --> 00:12:02.336
Uh,

NOTE Confidence: 0.907836958

00:12:02.336 --> 00:12:03.666
we always need our copyright

NOTE Confidence: 0.907836958

00:12:03.666 --> 00:12:04.464
license banner here.

NOTE Confidence: 0.907836958

00:12:04.470 --> 00:12:06.702
I have a personal tudu to maybe add

NOTE Confidence: 0.907836958

00:12:06.702 --> 00:12:08.408
some scripting to validate that each

NOTE Confidence: 0.907836958

00:12:08.408 --> 00:12:10.408
of our files has the banner here.

NOTE Confidence: 0.907836958

00:12:10.408 --> 00:12:12.198
These need concepts because they're

NOTE Confidence: 0.907836958

00:12:12.198 --> 00:12:14.707
powered by ranges and it's a 23 feature,

NOTE Confidence: 0.907836958

00:12:14.710 --> 00:12:16.630
so we need the latest.

NOTE Confidence: 0.907836958

00:12:16.630 --> 00:12:19.066
These matrices have sets of compiler

NOTE Confidence: 0.907836958

00:12:19.066 --> 00:12:21.680
options that we throw at each test.

NOTE Confidence: 0.907836958

00:12:21.680 --> 00:12:24.215
So concepts latest matrix is

NOTE Confidence: 0.907836958

00:12:24.215 --> 00:12:27.092
correct and we do permit the.

NOTE Confidence: 0.907836958

00:12:27.092 --> 00:12:27.776
Permissive mode.

NOTE Confidence: 0.907836958

00:12:27.776 --> 00:12:30.560
So the absence of strict here is good.

NOTE Confidence: 0.907836958

00:12:30.560 --> 00:12:32.020
It increases our test coverage,

NOTE Confidence: 0.907836958

00:12:32.020 --> 00:12:34.400
so concepts latest each time.

NOTE Confidence: 0.907836958

00:12:34.400 --> 00:12:35.372
This is all good.

NOTE Confidence: 0.907836958

00:12:35.372 --> 00:12:37.177
I'll come back to the test files

NOTE Confidence: 0.907836958

00:12:37.177 --> 00:12:38.929
just checking that each of them

NOTE Confidence: 0.907836958

00:12:38.929 --> 00:12:40.749
have the banner before I forget.

NOTE Confidence: 0.907836958

00:12:40.750 --> 00:12:43.696
Yes, OK, that's all good, we'll come back.

NOTE Confidence: 0.907836958

00:12:43.696 --> 00:12:45.760
OK, let's actually look at the algorithm now.

NOTE Confidence: 0.87036992625

00:12:48.930 --> 00:12:50.418
OK, so before I get to the algorithm,

NOTE Confidence: 0.87036992625

00:12:50.420 --> 00:12:51.810
let's take a quick look.

NOTE Confidence: 0.87036992625

00:12:51.810 --> 00:12:54.218
Let me close this at the working

NOTE Confidence: 0.87036992625

00:12:54.218 --> 00:12:57.119
paper UM to give a quick overview

NOTE Confidence: 0.87036992625

00:12:57.119 --> 00:12:59.795
of what these ranges algorithms do.

NOTE Confidence: 0.750809472727273

00:13:02.770 --> 00:13:06.544
OK, so, um, sort of the

NOTE Confidence: 0.750809472727273

00:13:06.544 --> 00:13:09.830
fundamental ones are find last.

NOTE Confidence: 0.750809472727273

00:13:09.830 --> 00:13:11.412
So there are six of them here

NOTE Confidence: 0.750809472727273

00:13:11.412 --> 00:13:12.629
because it's covering find glass,

NOTE Confidence: 0.750809472727273

00:13:12.630 --> 00:13:13.714
find last, find last.

NOTE Confidence: 0.750809472727273

00:13:13.714 --> 00:13:16.930
If not, that's three of them times Iterator,

NOTE Confidence: 0.750809472727273

00:13:16.930 --> 00:13:17.940
Sentinel versus.

NOTE Confidence: 0.750809472727273

00:13:17.940 --> 00:13:21.877
Take an entire range at a time. Um,

NOTE Confidence: 0.750809472727273

00:13:21.877 --> 00:13:25.053
but really the core algorithm is just fine.

NOTE Confidence: 0.750809472727273

00:13:25.060 --> 00:13:27.260
Last, so the reason why we have find

NOTE Confidence: 0.750809472727273

00:13:27.260 --> 00:13:29.377
less if and then finally if not.

NOTE Confidence: 0.750809472727273

00:13:29.380 --> 00:13:31.762
This is very similar to the

NOTE Confidence: 0.750809472727273

00:13:31.762 --> 00:13:33.760
classic design of the STL.

NOTE Confidence: 0.750809472727273

00:13:33.760 --> 00:13:37.820
So let me change to.

NOTE Confidence: 0.750809472727273

00:13:37.820 --> 00:13:39.690
I guess I can just scroll up to find the

NOTE Confidence: 0.750809472727273

00:13:39.741 --> 00:13:41.535
existing ones because the the classic

NOTE Confidence: 0.750809472727273

00:13:41.535 --> 00:13:43.215
signatures that don't take range of

NOTE Confidence: 0.750809472727273

00:13:43.215 --> 00:13:44.935
stuff are sort of simpler to look at.

NOTE Confidence: 0.750809472727273

00:13:44.940 --> 00:13:50.214
So here is classic STL find versus find if.

NOTE Confidence: 0.750809472727273

00:13:50.220 --> 00:13:53.244
So there is a reason why find and

NOTE Confidence: 0.750809472727273

00:13:53.244 --> 00:13:56.120
find if are named differently.

NOTE Confidence: 0.750809472727273

00:13:56.120 --> 00:13:58.360
One takes a range of iterators and

NOTE Confidence: 0.750809472727273

00:13:58.360 --> 00:14:00.538
looks for a specific value and

NOTE Confidence: 0.750809472727273

00:14:00.538 --> 00:14:02.830
is going to use operator equal

NOTE Confidence: 0.750809472727273

00:14:02.830 --> 00:14:04.918
equal to see hey are you equal.

NOTE Confidence: 0.750809472727273

00:14:04.920 --> 00:14:06.540
The other one takes a predicate,

NOTE Confidence: 0.750809472727273

00:14:06.540 --> 00:14:07.719
a function object.

NOTE Confidence: 0.750809472727273

00:14:07.719 --> 00:14:10.470
Returns the first element it can find

NOTE Confidence: 0.750809472727273

00:14:10.549 --> 00:14:12.869
where the predicate returns true.

NOTE Confidence: 0.750809472727273

00:14:12.870 --> 00:14:15.550
These are differently named because,

NOTE Confidence: 0.750809472727273

00:14:15.550 --> 00:14:18.766
especially in the classic C + 98 era,

NOTE Confidence: 0.750809472727273

00:14:18.770 --> 00:14:20.696
the STL could not sense whether

NOTE Confidence: 0.750809472727273

00:14:20.696 --> 00:14:22.666
something given is a value that's

NOTE Confidence: 0.750809472727273

00:14:22.666 --> 00:14:24.829
intended to be used with a quality

NOTE Confidence: 0.750809472727273

00:14:24.829 --> 00:14:26.795
or a function object that's

NOTE Confidence: 0.750809472727273

00:14:26.795 --> 00:14:28.785
invocable with operator in front.

NOTE Confidence: 0.750809472727273

00:14:28.790 --> 00:14:30.715
You could even imagine pathological

NOTE Confidence: 0.750809472727273

00:14:30.715 --> 00:14:33.072
scenarios where you've got an object

NOTE Confidence: 0.750809472727273

00:14:33.072 --> 00:14:35.274
that's comparable with equality to the

NOTE Confidence: 0.750809472727273

00:14:35.274 --> 00:14:37.510
element type and it has a function.

NOTE Confidence: 0.750809472727273

00:14:37.510 --> 00:14:39.288
All operator that accepts the element type.

NOTE Confidence: 0.750809472727273

00:14:39.290 --> 00:14:40.574
There's nothing stopping such

NOTE Confidence: 0.750809472727273

00:14:40.574 --> 00:14:42.179
a strange thing from existing.

NOTE Confidence: 0.750809472727273

00:14:42.180 --> 00:14:45.141
So in theory there is no actual way to

NOTE Confidence: 0.750809472727273

00:14:45.141 --> 00:14:46.546
distinguish the programmer's intent,

NOTE Confidence: 0.750809472727273

00:14:46.546 --> 00:14:48.964
and that's why these have separate

NOTE Confidence: 0.750809472727273

00:14:48.964 --> 00:14:51.327
names and are not just overloaded.

NOTE Confidence: 0.750809472727273

00:14:51.330 --> 00:14:54.338
Sort of less defensible in the modern era,

NOTE Confidence: 0.750809472727273

00:14:54.340 --> 00:14:56.368
but it did need to exist.

NOTE Confidence: 0.750809472727273

00:14:56.370 --> 00:14:57.860
Back in the classic era.

NOTE Confidence: 0.750809472727273

00:14:57.860 --> 00:14:59.920
Is the negated form find.

NOTE Confidence: 0.750809472727273

00:14:59.920 --> 00:15:00.556
If not,

NOTE Confidence: 0.750809472727273

00:15:00.556 --> 00:15:02.782
this takes a predicate but then returns

NOTE Confidence: 0.750809472727273

00:15:02.782 --> 00:15:05.220
the first one where it returns false.

NOTE Confidence: 0.750809472727273

00:15:05.220 --> 00:15:08.174
So the STL in C + 98.

NOTE Confidence: 0.750809472727273

00:15:08.180 --> 00:15:10.344
Decided to provide these,

NOTE Confidence: 0.750809472727273

00:15:10.344 --> 00:15:13.049
not versions because they were,

NOTE Confidence: 0.750809472727273

00:15:13.050 --> 00:15:13.746
you know,

NOTE Confidence: 0.750809472727273

00:15:13.746 --> 00:15:15.834
sort of simple defined in the

NOTE Confidence: 0.750809472727273

00:15:15.834 --> 00:15:17.835
algorithm and it didn't require

NOTE Confidence: 0.750809472727273

00:15:17.835 --> 00:15:19.900
creating a reversed predicate or

NOTE Confidence: 0.750809472727273

00:15:19.900 --> 00:15:22.308
wrapping the predicate in a negator.

NOTE Confidence: 0.750809472727273

00:15:22.310 --> 00:15:25.870
The classic SDL did have.

NOTE Confidence: 0.750809472727273

00:15:25.870 --> 00:15:27.550
A helper machinery to negate

NOTE Confidence: 0.750809472727273

00:15:27.550 --> 00:15:28.894
the results of predicates.

NOTE Confidence: 0.750809472727273

00:15:28.900 --> 00:15:31.560
But it was sort of hard use.

NOTE Confidence: 0.750809472727273

00:15:31.560 --> 00:15:33.832
Um, not generally applicable.

NOTE Confidence: 0.750809472727273

00:15:33.832 --> 00:15:34.400
Um.

NOTE Confidence: 0.750809472727273

00:15:34.400 --> 00:15:36.560
And it was just a pain to use.

NOTE Confidence: 0.750809472727273

00:15:36.560 --> 00:15:38.156
So although I'm not 100% sure

NOTE Confidence: 0.750809472727273

00:15:38.156 --> 00:15:38.980
of the design rationale,

NOTE Confidence: 0.750809472727273

00:15:38.980 --> 00:15:41.368
I believe that these not algorithms

NOTE Confidence: 0.750809472727273

00:15:41.368 --> 00:15:43.620
exist because the negator machinery

NOTE Confidence: 0.750809472727273

00:15:43.620 --> 00:15:46.740
was not as useful as one would hope.

NOTE Confidence: 0.750809472727273

00:15:46.740 --> 00:15:47.796
That is actually changed.

NOTE Confidence: 0.750809472727273

00:15:47.796 --> 00:15:50.227
We now have something in C going off a

NOTE Confidence: 0.750809472727273

00:15:50.227 --> 00:15:52.075
little bit of a tangent on cppreference,

NOTE Confidence: 0.750809472727273

00:15:52.080 --> 00:15:53.046
not fun.

NOTE Confidence: 0.750809472727273

00:15:53.046 --> 00:15:56.427
We now have a generalized negator wrapper.

NOTE Confidence: 0.750809472727273

00:15:56.430 --> 00:15:58.606
Or you can give it a functor and

NOTE Confidence: 0.750809472727273

00:15:58.606 --> 00:16:00.666
a callable object and it will

NOTE Confidence: 0.750809472727273

00:16:00.666 --> 00:16:02.471
return something that will invoke

NOTE Confidence: 0.750809472727273

00:16:02.471 --> 00:16:04.542
that thing and then apply operator

NOTE Confidence: 0.750809472727273

00:16:04.542 --> 00:16:06.798
or not and return the opposite.

NOTE Confidence: 0.750809472727273

00:16:06.800 --> 00:16:07.570
It's opposite,

NOTE Confidence: 0.750809472727273

00:16:07.570 --> 00:16:10.650
stay or because in C plus we can

NOTE Confidence: 0.756608022307692

00:16:10.738 --> 00:16:12.049
now use lambdas.

NOTE Confidence: 0.756608022307692

00:16:12.050 --> 00:16:13.786
It's if you're gonna provide a Lambda,

NOTE Confidence: 0.756608022307692

00:16:13.790 --> 00:16:15.599
it's easy to just write a Lambda and put

NOTE Confidence: 0.756608022307692

00:16:15.599 --> 00:16:17.486
the exclamation mark character in there.

NOTE Confidence: 0.756608022307692

00:16:17.490 --> 00:16:19.666
So I would say that in the modern

NOTE Confidence: 0.756608022307692

00:16:19.666 --> 00:16:22.241
era and C + 23 there is much less of

NOTE Confidence: 0.756608022307692

00:16:22.241 --> 00:16:24.518
a reason to provide not algorithms

NOTE Confidence: 0.756608022307692

00:16:24.518 --> 00:16:26.658
and I imagine library evolution.

NOTE Confidence: 0.756608022307692

00:16:26.660 --> 00:16:29.000
We've talked about this um,

NOTE Confidence: 0.756608022307692

00:16:29.000 --> 00:16:30.560
but currently it is following

NOTE Confidence: 0.756608022307692

00:16:30.560 --> 00:16:31.808
the Convention of hey,

NOTE Confidence: 0.756608022307692

00:16:31.810 --> 00:16:32.866
if you have an if algorithm,

NOTE Confidence: 0.756608022307692

00:16:32.870 --> 00:16:34.604
also provide a not algorithm because

NOTE Confidence: 0.756608022307692

00:16:34.604 --> 00:16:36.450
otherwise it could become a frequently

NOTE Confidence: 0.756608022307692

00:16:36.450 --> 00:16:38.050
asked question where somebody says,

NOTE Confidence: 0.756608022307692

00:16:38.050 --> 00:16:40.150
oh if I have you know,

NOTE Confidence: 0.756608022307692

00:16:40.150 --> 00:16:42.790
find if and find if not how come there's no,

NOTE Confidence: 0.756608022307692

00:16:42.790 --> 00:16:44.722
you know, find last if and

NOTE Confidence: 0.756608022307692

00:16:44.722 --> 00:16:46.990
find last if not counterpart.

NOTE Confidence: 0.756608022307692

00:16:46.990 --> 00:16:51.326
So it provided 6 algorithms instead of four.

NOTE Confidence: 0.756608022307692

00:16:51.330 --> 00:16:52.956
Even though possibly in the modern

NOTE Confidence: 0.756608022307692

00:16:52.956 --> 00:16:54.649
era we don't really need these,

NOTE Confidence: 0.756608022307692

00:16:54.650 --> 00:16:56.135
it's not really much trouble

NOTE Confidence: 0.756608022307692

00:16:56.135 --> 00:16:57.658
for us to define. Um,

NOTE Confidence: 0.756608022307692

00:16:57.658 --> 00:17:00.610
if we were gonna create a completely new STL,

NOTE Confidence: 0.756608022307692

00:17:00.610 --> 00:17:01.618
we probably wouldn't have

NOTE Confidence: 0.756608022307692

00:17:01.618 --> 00:17:02.626
the the NOT versions.

NOTE Confidence: 0.756608022307692

00:17:02.630 --> 00:17:05.230
But that's why these exist.

NOTE Confidence: 0.756608022307692

00:17:05.230 --> 00:17:08.667
And then according to the ranges system,

NOTE Confidence: 0.756608022307692

00:17:08.670 --> 00:17:11.442
there are now these projections which allow

NOTE Confidence: 0.756608022307692

00:17:11.442 --> 00:17:15.086
you to view range of elements through a lens.

NOTE Confidence: 0.756608022307692

00:17:15.090 --> 00:17:17.820
They are projected.

NOTE Confidence: 0.756608022307692

00:17:17.820 --> 00:17:19.608
According to some function object or

NOTE Confidence: 0.756608022307692

00:17:19.608 --> 00:17:22.068
call by object by default just identity,

NOTE Confidence: 0.756608022307692

00:17:22.070 --> 00:17:23.348
so by default it does nothing.

NOTE Confidence: 0.756608022307692

00:17:23.350 --> 00:17:25.070
But occasionally it can be useful to say,

NOTE Confidence: 0.756608022307692

00:17:25.070 --> 00:17:27.044
OK, I've got a range of elements,

NOTE Confidence: 0.756608022307692

00:17:27.050 --> 00:17:27.938
maybe strings,

NOTE Confidence: 0.756608022307692

00:17:27.938 --> 00:17:31.046
and I want to find the first

NOTE Confidence: 0.756608022307692

00:17:31.046 --> 00:17:33.477
one that is bigger than.

NOTE Confidence: 0.756608022307692

00:17:33.480 --> 00:17:35.164
Or find the last one, um,

NOTE Confidence: 0.756608022307692

00:17:35.164 --> 00:17:37.609
with a length of, you know, uh,

NOTE Confidence: 0.756608022307692

00:17:37.609 --> 00:17:39.667
larger than 16 characters or something.

NOTE Confidence: 0.756608022307692

00:17:39.670 --> 00:17:42.415
So I'd like to project the string to just

NOTE Confidence: 0.756608022307692

00:17:42.415 --> 00:17:45.229
its size before invoking some predicate,

NOTE Confidence: 0.756608022307692

00:17:45.230 --> 00:17:48.209
like a Lambda that looks just at the size.

NOTE Confidence: 0.756608022307692

00:17:48.210 --> 00:17:50.882
This can be more useful than having to

NOTE Confidence: 0.756608022307692

00:17:50.882 --> 00:17:53.709
bake that projection into the predicate.

NOTE Confidence: 0.756608022307692

00:17:53.710 --> 00:17:55.210
And it's especially useful when

NOTE Confidence: 0.756608022307692

00:17:55.210 --> 00:17:57.013
you're using the value form because

NOTE Confidence: 0.756608022307692

00:17:57.013 --> 00:17:58.749
you could say if you wanted to,

NOTE Confidence: 0.756608022307692

00:17:58.750 --> 00:18:00.106
say, find the last empty string,

NOTE Confidence: 0.756608022307692

00:18:00.110 --> 00:18:01.630
you could say, find last,

NOTE Confidence: 0.756608022307692

00:18:01.630 --> 00:18:03.486
project the size, and then just look for.

NOTE Confidence: 0.756608022307692

00:18:03.490 --> 00:18:05.688
Ro as the value rather than find

NOTE Confidence: 0.756608022307692

00:18:05.688 --> 00:18:08.496
last if and then test the size again.

NOTE Confidence: 0.756608022307692

00:18:08.500 --> 00:18:09.655
Zero different ways of expressing

NOTE Confidence: 0.756608022307692

00:18:09.655 --> 00:18:10.348
the same thing,

NOTE Confidence: 0.756608022307692

00:18:10.350 --> 00:18:12.646
so that's what the projection is doing.

NOTE Confidence: 0.756608022307692

00:18:12.650 --> 00:18:15.874
Umm, and so this wording um says uh,

NOTE Confidence: 0.756608022307692

00:18:15.880 --> 00:18:17.794
it it handles sort of the

NOTE Confidence: 0.756608022307692

00:18:17.794 --> 00:18:19.070
differences between these um,

NOTE Confidence: 0.756608022307692

00:18:19.070 --> 00:18:22.190
value versus predicate versus

NOTE Confidence: 0.756608022307692

00:18:22.190 --> 00:18:24.530
negated predicate form,

NOTE Confidence: 0.756608022307692

00:18:24.530 --> 00:18:27.344
saying the value form uses operator equal,

NOTE Confidence: 0.756608022307692

00:18:27.350 --> 00:18:29.550
the predicate form will invoke.

NOTE Confidence: 0.756608022307692

00:18:29.550 --> 00:18:31.125
This is the invoke protocol that we've

NOTE Confidence: 0.756608022307692

00:18:31.125 --> 00:18:33.017
talked about in previous code review videos,

NOTE Confidence: 0.756608022307692

00:18:33.020 --> 00:18:36.128
which will handle the syntax differences

NOTE Confidence: 0.756608022307692

00:18:36.128 --> 00:18:38.414
between things like function pointers,

NOTE Confidence: 0.756608022307692

00:18:38.414 --> 00:18:40.178
member member data pointers,

NOTE Confidence: 0.756608022307692

00:18:40.180 --> 00:18:43.064
and call objects or function objects like.

NOTE Confidence: 0.756608022307692

00:18:43.070 --> 00:18:46.005
Lambdas and then the negated

NOTE Confidence: 0.756608022307692

00:18:46.005 --> 00:18:48.940
form says operator not there.

NOTE Confidence: 0.756608022307692

00:18:48.940 --> 00:18:50.872
And what this returns is the

NOTE Confidence: 0.756608022307692

00:18:50.872 --> 00:18:52.986
last iterator in the range for

NOTE Confidence: 0.756608022307692

00:18:52.986 --> 00:18:54.866
which this expression is true,

NOTE Confidence: 0.756608022307692

00:18:54.870 --> 00:18:56.748
and if it doesn't find anything,

NOTE Confidence: 0.756608022307692

00:18:56.750 --> 00:19:01.250
it will return just the last iterator.

NOTE Confidence: 0.756608022307692

00:19:01.250 --> 00:19:03.230
Bringing the range algorithms

NOTE Confidence: 0.756608022307692

00:19:03.230 --> 00:19:05.208
also return a sub range.

NOTE Confidence: 0.756608022307692

00:19:05.210 --> 00:19:06.150
Um, so.

NOTE Confidence: 0.756608022307692

00:19:06.150 --> 00:19:08.970
If you have a input range,

NOTE Confidence: 0.756608022307692

00:19:08.970 --> 00:19:11.674
it will return the answer as a range,

NOTE Confidence: 0.803800281

00:19:11.680 --> 00:19:13.320
which can be useful when

NOTE Confidence: 0.803800281

00:19:13.320 --> 00:19:14.960
chaining these sort of things.

NOTE Confidence: 0.803800281

00:19:14.960 --> 00:19:16.465
And there's a complexity requirement

NOTE Confidence: 0.803800281

00:19:16.465 --> 00:19:18.323
that we don't invoke the predicate

NOTE Confidence: 0.803800281

00:19:18.323 --> 00:19:19.803
and projection more than the

NOTE Confidence: 0.803800281

00:19:19.803 --> 00:19:21.539
number of elements in the range.

NOTE Confidence: 0.803800281

00:19:21.540 --> 00:19:24.150
That says basically, no repeated tests,

NOTE Confidence: 0.803800281

00:19:24.150 --> 00:19:26.206
you get a test each thing exactly once,

NOTE Confidence: 0.803800281

00:19:26.210 --> 00:19:28.718
no more than once.

NOTE Confidence: 0.803800281

00:19:28.720 --> 00:19:30.280
And then the other interesting thing,

NOTE Confidence: 0.803800281

00:19:30.280 --> 00:19:31.894
which I alluded to at the

NOTE Confidence: 0.803800281

00:19:31.894 --> 00:19:33.420
beginning of this code review,

NOTE Confidence: 0.803800281

00:19:33.420 --> 00:19:36.184
is that these algorithms

NOTE Confidence: 0.803800281

00:19:36.184 --> 00:19:38.257
take forward iterators,

NOTE Confidence: 0.803800281

00:19:38.260 --> 00:19:40.140
but it talks about returning

NOTE Confidence: 0.803800281

00:19:40.140 --> 00:19:42.520
the last iterator in the range.

NOTE Confidence: 0.803800281

00:19:42.520 --> 00:19:45.677
So as we go to the implementation,

NOTE Confidence: 0.803800281

00:19:45.680 --> 00:19:47.408
we're going to see something interesting

NOTE Confidence: 0.803800281

00:19:47.408 --> 00:19:48.997
because if you have bidirectional

NOTE Confidence: 0.803800281

00:19:48.997 --> 00:19:50.897
iterators or stronger like random

NOTE Confidence: 0.803800281

00:19:50.897 --> 00:19:52.417
access or contiguous iterators,

NOTE Confidence: 0.803800281

00:19:52.420 --> 00:19:55.040
if you want to find the last element in the

NOTE Confidence: 0.803800281

00:19:55.101 --> 00:19:57.656
range that satisfies a predicate or value,

NOTE Confidence: 0.803800281

00:19:57.660 --> 00:19:59.140
you can just March backwards.

NOTE Confidence: 0.803800281

00:19:59.140 --> 00:20:00.013
From the end,

NOTE Confidence: 0.803800281

00:20:00.013 --> 00:20:02.050
the last iterator and as soon as

NOTE Confidence: 0.803800281

00:20:02.120 --> 00:20:03.902
you find something then you say

NOTE Confidence: 0.803800281

00:20:03.902 --> 00:20:06.050
hey I found the last one done.

NOTE Confidence: 0.803800281

00:20:06.050 --> 00:20:07.898
But if the user gives you

NOTE Confidence: 0.803800281

00:20:07.898 --> 00:20:09.130
a forward only iterator,

NOTE Confidence: 0.803800281

00:20:09.130 --> 00:20:11.392
like a forward listed or forward

NOTE Confidence: 0.803800281

00:20:11.392 --> 00:20:12.146
list Iterator,

NOTE Confidence: 0.803800281

00:20:12.150 --> 00:20:13.110
a singly linked list,

NOTE Confidence: 0.803800281

00:20:13.110 --> 00:20:14.866
then you have no choice but to

NOTE Confidence: 0.803800281

00:20:14.866 --> 00:20:16.166
March from the beginning because

NOTE Confidence: 0.803800281

00:20:16.166 --> 00:20:17.750
you can't ever go backwards.

NOTE Confidence: 0.803800281

00:20:17.750 --> 00:20:20.396
So the algorithm there would be search

NOTE Confidence: 0.803800281

00:20:20.396 --> 00:20:23.188
from the beginning of the list or sequence,

NOTE Confidence: 0.803800281

00:20:23.190 --> 00:20:24.486
as soon as you find something,

NOTE Confidence: 0.803800281

00:20:24.490 --> 00:20:25.610
remember where it is,

NOTE Confidence: 0.803800281

00:20:25.610 --> 00:20:27.290
but then keep going onwards and

NOTE Confidence: 0.803800281

00:20:27.350 --> 00:20:29.149
as soon as you find another value.

NOTE Confidence: 0.803800281

00:20:29.150 --> 00:20:31.334
Toward that as the last value you found,

NOTE Confidence: 0.803800281

00:20:31.340 --> 00:20:31.901
and so on,

NOTE Confidence: 0.803800281

00:20:31.901 --> 00:20:32.836
and then when you're done,

NOTE Confidence: 0.803800281

00:20:32.840 --> 00:20:34.820
return the last one you saw.

NOTE Confidence: 0.803800281

00:20:34.820 --> 00:20:36.296
Of course you must traverse every

NOTE Confidence: 0.803800281

00:20:36.296 --> 00:20:37.550
single element in the list,

NOTE Confidence: 0.803800281

00:20:37.550 --> 00:20:38.810
but that's the best you can do

NOTE Confidence: 0.803800281

00:20:38.810 --> 00:20:39.770
with forward only iterators,

NOTE Confidence: 0.803800281

00:20:39.770 --> 00:20:42.274
and there could be use cases for that.

NOTE Confidence: 0.803800281

00:20:42.280 --> 00:20:44.656
Nice to have the STL do this for

NOTE Confidence: 0.803800281

00:20:44.656 --> 00:20:46.841
you rather than having to call

NOTE Confidence: 0.803800281

00:20:46.841 --> 00:20:48.741
a whole separate algorithm or

NOTE Confidence: 0.803800281

00:20:48.741 --> 00:20:50.778
write something from scratch.

NOTE Confidence: 0.803800281

00:20:50.780 --> 00:20:52.690
But in the case where The thing is not found,

NOTE Confidence: 0.803800281

00:20:52.690 --> 00:20:54.202
in the case when The thing is not found,

NOTE Confidence: 0.803800281

00:20:54.210 --> 00:20:55.820
it's same complexity either way,

NOTE Confidence: 0.803800281

00:20:55.820 --> 00:20:56.944
when it is found,

NOTE Confidence: 0.803800281

00:20:56.944 --> 00:20:58.630
the forward version is to traverse

NOTE Confidence: 0.803800281

00:20:58.689 --> 00:21:00.149
basically all the elements,

NOTE Confidence: 0.803800281

00:21:00.150 --> 00:21:01.698
whereas the bidirectional version

NOTE Confidence: 0.803800281

00:21:01.698 --> 00:21:04.020
is order length of the distance

NOTE Confidence: 0.803800281

00:21:04.082 --> 00:21:05.810
from the end to that element.

NOTE Confidence: 0.803800281

00:21:05.810 --> 00:21:07.805
So that's why it says forward iterator.

NOTE Confidence: 0.803800281

00:21:07.810 --> 00:21:11.254
It does not accept input iterators

NOTE Confidence: 0.803800281

00:21:11.254 --> 00:21:13.490
because and the STL forward iterator

NOTE Confidence: 0.803800281

00:21:13.490 --> 00:21:15.150
means you can March forward,

NOTE Confidence: 0.803800281

00:21:15.150 --> 00:21:16.464
but you can also preserve iterators

NOTE Confidence: 0.803800281

00:21:16.464 --> 00:21:17.593
to an element and dereference

NOTE Confidence: 0.803800281

00:21:17.593 --> 00:21:19.217
it as much as you like and it's

NOTE Confidence: 0.803800281

00:21:19.217 --> 00:21:20.207
going to still be there.

NOTE Confidence: 0.803800281

00:21:20.210 --> 00:21:21.596
It's multi readable.

NOTE Confidence: 0.803800281

00:21:21.596 --> 00:21:22.058
Conceptually,

NOTE Confidence: 0.803800281

00:21:22.058 --> 00:21:25.345
this means that four iterators point to

NOTE Confidence: 0.803800281

00:21:25.345 --> 00:21:27.570
something in memory that's persistent,

NOTE Confidence: 0.803800281

00:21:27.570 --> 00:21:29.170
like a singly linked list.

NOTE Confidence: 0.803800281

00:21:29.170 --> 00:21:30.970
Whereas input iterators are

NOTE Confidence: 0.803800281

00:21:30.970 --> 00:21:33.670
something like from an input stream,

NOTE Confidence: 0.803800281

00:21:33.670 --> 00:21:35.840
an I stream where you can consume

NOTE Confidence: 0.803800281

00:21:35.840 --> 00:21:38.146
something from the stream and look at it,

NOTE Confidence: 0.803800281

00:21:38.150 --> 00:21:40.929
but then if you advance the iterator,

NOTE Confidence: 0.803800281

00:21:40.930 --> 00:21:42.602
that existing value evaporates.

NOTE Confidence: 0.803800281

00:21:42.602 --> 00:21:45.110
It was just returned to you,

NOTE Confidence: 0.803800281

00:21:45.110 --> 00:21:46.835
but it's not existing anywhere

NOTE Confidence: 0.803800281

00:21:46.835 --> 00:21:47.870
persistent in memory.

NOTE Confidence: 0.803800281

00:21:47.870 --> 00:21:50.245
So an input iterator is a input

NOTE Confidence: 0.803800281

00:21:50.245 --> 00:21:52.495
iterator algorithm is a single pass.

NOTE Confidence: 0.803800281

00:21:52.500 --> 00:21:52.740
Algorithm.

NOTE Confidence: 0.803800281

00:21:52.740 --> 00:21:54.180
You don't get to do something

NOTE Confidence: 0.803800281

00:21:54.180 --> 00:21:54.900
like preserve an

NOTE Confidence: 0.8273785825

00:21:54.949 --> 00:21:56.194
iterator March forward and then

NOTE Confidence: 0.8273785825

00:21:56.194 --> 00:21:57.439
look at the previous value.

NOTE Confidence: 0.8273785825

00:21:57.440 --> 00:22:00.536
So that's why this must insist on forward

NOTE Confidence: 0.8273785825

00:22:00.536 --> 00:22:03.794
iterators and nothing weaker than that.

NOTE Confidence: 0.8273785825

00:22:03.794 --> 00:22:07.266
OK, so, um, that's sort of the overview

NOTE Confidence: 0.8273785825

00:22:07.266 --> 00:22:09.450
of what these algorithms are doing.

NOTE Confidence: 0.8273785825

00:22:09.450 --> 00:22:10.656
Let's actually look at the code.

NOTE Confidence: 0.82486956875

00:22:14.780 --> 00:22:18.964
OK, so we are updating the algorithm header.

NOTE Confidence: 0.82486956875

00:22:18.970 --> 00:22:20.906
I'm going to look at the context to

NOTE Confidence: 0.82486956875

00:22:20.906 --> 00:22:22.796
make sure that we are in a C23 zone.

NOTE Confidence: 0.82486956875

00:22:22.796 --> 00:22:24.740
I can see we're calling fold right here,

NOTE Confidence: 0.82486956875

00:22:24.740 --> 00:22:26.348
so I'm almost certain we are.

NOTE Confidence: 0.76172352

00:22:28.520 --> 00:22:29.300
And I just.

NOTE Confidence: 0.77463597

00:22:31.770 --> 00:22:33.804
Expand. If I get bored, I might

NOTE Confidence: 0.77463597

00:22:33.804 --> 00:22:35.780
just open up the STL in VS code

NOTE Confidence: 0.77463597

00:22:35.843 --> 00:22:38.650
because we've got a lot of C23 stuff.

NOTE Confidence: 0.76356719

00:22:42.790 --> 00:22:43.920
Yeah, that's taking too long.

NOTE Confidence: 0.76356719

00:22:43.920 --> 00:22:45.546
Let's just open up the STL.

NOTE Confidence: 0.76356719

00:22:45.550 --> 00:22:47.332
Um, OK and actually I can

NOTE Confidence: 0.76356719

00:22:47.332 --> 00:22:48.790
just check out this PR.

NOTE Confidence: 0.76356719

00:22:48.790 --> 00:22:51.830
Uh what number is this 3268.

NOTE Confidence: 0.76356719

00:22:51.830 --> 00:22:55.890
Use the GitHub command line tool DHCR.

NOTE Confidence: 0.76356719

00:22:55.890 --> 00:22:58.760
Checkout 3268.

NOTE Confidence: 0.88098877625

00:23:02.340 --> 00:23:04.900
Great. And then we want to look at,

NOTE Confidence: 0.88098877625

00:23:04.900 --> 00:23:06.130
now that I've expanded all this,

NOTE Confidence: 0.88098877625

00:23:06.130 --> 00:23:08.531
I want to unexpand. There's no button

NOTE Confidence: 0.88098877625

00:23:08.531 --> 00:23:10.470
to immediately do that. Whoops.

NOTE Confidence: 0.78089035

00:23:12.740 --> 00:23:15.968
OK. Here's where the code begins.

NOTE Confidence: 0.78089035

00:23:15.970 --> 00:23:16.950
I could dip against main,

NOTE Confidence: 0.78089035

00:23:16.950 --> 00:23:18.734
but I can here. I just want to

NOTE Confidence: 0.78089035

00:23:18.734 --> 00:23:20.750
search for this find less fun. OK.

NOTE Confidence: 0.7827785125

00:23:24.580 --> 00:23:26.080
That's on line 2801.

NOTE Confidence: 0.6672076725

00:23:30.870 --> 00:23:31.938
You'll be the guard.

NOTE Confidence: 0.788686183076923

00:23:36.660 --> 00:23:39.330
OK, it was actually 600 lines

NOTE Confidence: 0.788686183076923

00:23:39.330 --> 00:23:42.249
above where um starts with fun um.

NOTE Confidence: 0.788686183076923

00:23:42.250 --> 00:23:44.910
OK, so we are in a C + 23 zone.

NOTE Confidence: 0.788686183076923

00:23:44.910 --> 00:23:47.439
Uh, I guess I could look for the next

NOTE Confidence: 0.788686183076923

00:23:47.439 --> 00:23:49.777
end if to be super duper careful.

NOTE Confidence: 0.788686183076923

00:23:49.780 --> 00:23:51.292
I kind of wish it wouldn't immediately

NOTE Confidence: 0.788686183076923

00:23:51.292 --> 00:23:52.996
navigate me as soon as I type something,

NOTE Confidence: 0.788686183076923

00:23:53.000 --> 00:23:55.904
because I want to see where I was.

NOTE Confidence: 0.788686183076923

00:23:55.910 --> 00:23:58.330
OK. Yeah, we and then.

NOTE Confidence: 0.788686183076923

00:23:58.330 --> 00:24:00.306
In fact it ends after the new algorithm,

NOTE Confidence: 0.788686183076923

00:24:00.310 --> 00:24:03.766
so if I Scroll down I could find it.

NOTE Confidence: 0.788686183076923

00:24:03.770 --> 00:24:06.617
I can just do that here. Yes.

NOTE Confidence: 0.788686183076923

00:24:06.617 --> 00:24:09.153
OK, so we are adding to A to

NOTE Confidence: 0.788686183076923

00:24:09.153 --> 00:24:11.418
an existing HASC X23 region.

NOTE Confidence: 0.788686183076923

00:24:11.418 --> 00:24:12.480
So that's good.

NOTE Confidence: 0.788686183076923

00:24:12.480 --> 00:24:15.140
I checked this because nothing will complain

NOTE Confidence: 0.788686183076923

00:24:15.140 --> 00:24:18.325
if we add something to a too old mode.

NOTE Confidence: 0.788686183076923

00:24:18.330 --> 00:24:20.564
Like if we added this to C20 and

NOTE Confidence: 0.788686183076923

00:24:20.564 --> 00:24:22.374
we didn't depend on something

NOTE Confidence: 0.788686183076923

00:24:22.374 --> 00:24:23.959
that was specifically C + 23,

NOTE Confidence: 0.788686183076923

00:24:23.960 --> 00:24:25.226
that would compile,

NOTE Confidence: 0.788686183076923

00:24:25.226 --> 00:24:27.918
and yet we would be defining these

NOTE Confidence: 0.788686183076923

00:24:27.918 --> 00:24:29.652
identifiers in a mode that they

NOTE Confidence: 0.788686183076923

00:24:29.652 --> 00:24:30.879
really shouldn't exist in yet.

NOTE Confidence: 0.788686183076923

00:24:30.880 --> 00:24:33.376
OK, so we're adding to the correct region,

NOTE Confidence: 0.788686183076923

00:24:33.380 --> 00:24:36.564
so we're going to define a class because.

NOTE Confidence: 0.788686183076923

00:24:36.570 --> 00:24:39.720
These things in the standard that look

NOTE Confidence: 0.788686183076923

00:24:39.720 --> 00:24:42.262
like functions are actually function

NOTE Confidence: 0.788686183076923

00:24:42.262 --> 00:24:45.027
objects in the ranges universe,

NOTE Confidence: 0.788686183076923

00:24:45.030 --> 00:24:46.514
which handles, I think,

NOTE Confidence: 0.788686183076923

00:24:46.514 --> 00:24:47.627
argument dependent lookup.

NOTE Confidence: 0.788686183076923

00:24:47.630 --> 00:24:49.406
It means that they're not subject to ADL,

NOTE Confidence: 0.788686183076923

00:24:49.410 --> 00:24:51.210
which is nice, it's just a new design.

NOTE Confidence: 0.788686183076923

00:24:51.210 --> 00:24:53.746
And that means that what looks like 2

NOTE Confidence: 0.788686183076923

00:24:53.746 --> 00:24:56.282
functions in the STL for each of these

NOTE Confidence: 0.788686183076923

00:24:56.282 --> 00:24:58.329
forms is actually just two operator

NOTE Confidence: 0.788686183076923

00:24:58.330 --> 00:25:01.408
overloads of a single function object.

NOTE Confidence: 0.788686183076923

00:25:01.410 --> 00:25:03.314
The other thing I'm going to verify

NOTE Confidence: 0.788686183076923

00:25:03.314 --> 00:25:05.443
before I look at anything else is

NOTE Confidence: 0.788686183076923

00:25:05.443 --> 00:25:07.013
that we are respecting modules.

NOTE Confidence: 0.788686183076923

00:25:07.020 --> 00:25:09.115
After adding 3000 occurrences of

NOTE Confidence: 0.788686183076923

00:25:09.115 --> 00:25:11.860
the macro export stood to the STL.

NOTE Confidence: 0.788686183076923

00:25:11.860 --> 00:25:14.116
Now we just need to make sure that

NOTE Confidence: 0.788686183076923

00:25:14.116 --> 00:25:16.135
all new user visible identifiers

NOTE Confidence: 0.788686183076923

00:25:16.135 --> 00:25:17.979
are marked as exported.

NOTE Confidence: 0.788686183076923

00:25:17.980 --> 00:25:19.336
So the Convention here,

NOTE Confidence: 0.788686183076923

00:25:19.336 --> 00:25:22.225
the way it works is that the user

NOTE Confidence: 0.788686183076923

00:25:22.225 --> 00:25:24.559
visible object is marked as export.

NOTE Confidence: 0.788686183076923

00:25:24.560 --> 00:25:26.304
We do not need to export the internal

NOTE Confidence: 0.788686183076923

00:25:26.304 --> 00:25:28.142
class or any of the function call

NOTE Confidence: 0.788686183076923

00:25:28.142 --> 00:25:29.492
operators or anything like that.

NOTE Confidence: 0.788686183076923

00:25:29.500 --> 00:25:32.998
So for these three overloaded functions

NOTE Confidence: 0.788686183076923

00:25:32.998 --> 00:25:36.967
we mark as export and here it is.

NOTE Confidence: 0.788686183076923

00:25:36.970 --> 00:25:40.400
And the objects O exports did find

NOTE Confidence: 0.788686183076923

00:25:40.400 --> 00:25:43.200
last exports stood find last if

NOTE Confidence: 0.788686183076923

00:25:43.200 --> 00:25:46.210
and export stood find last if not.

NOTE Confidence: 0.788686183076923

00:25:46.210 --> 00:25:47.410
We don't specifically need

NOTE Confidence: 0.788686183076923

00:25:47.410 --> 00:25:48.610
modules coverage of this.

NOTE Confidence: 0.788686183076923

00:25:48.610 --> 00:25:49.970
Our modules test tests a

NOTE Confidence: 0.788686183076923

00:25:49.970 --> 00:25:51.790
little bit of every STL header,

NOTE Confidence: 0.788686183076923

00:25:51.790 --> 00:25:53.806
but does not go so far as to test

NOTE Confidence: 0.788686183076923

00:25:53.806 --> 00:25:56.233
every single algorithm with every you

NOTE Confidence: 0.788686183076923

00:25:56.233 --> 00:25:57.945
know possible iterator combination.

NOTE Confidence: 0.788686183076923

00:25:57.950 --> 00:26:00.270
That would take years and years to write,

NOTE Confidence: 0.788686183076923

00:26:00.270 --> 00:26:02.526
so here just spot checking that

NOTE Confidence: 0.788686183076923

00:26:02.530 --> 00:26:05.148
all of them are marked as export

NOTE Confidence: 0.788686183076923

00:26:05.148 --> 00:26:06.270
stood is sufficient.

NOTE Confidence: 0.788686183076923

00:26:06.270 --> 00:26:09.030
OK, so let's actually look at this class.

NOTE Confidence: 0.788686183076923

00:26:09.030 --> 00:26:10.969
So we derive from our internal helper.

NOTE Confidence: 0.788686183076923

00:26:10.970 --> 00:26:12.623
Not quite object.

NOTE Confidence: 0.788686183076923

00:26:12.623 --> 00:26:15.929
Then we have public machinery and

NOTE Confidence: 0.788686183076923

00:26:15.929 --> 00:26:19.776
operator pren prens we need to use

NOTE Confidence: 0.788686183076923

00:26:19.776 --> 00:26:21.908
inheriting constructors from it.

NOTE Confidence: 0.788686183076923

00:26:21.910 --> 00:26:23.494
This means that users can't like

NOTE Confidence: 0.788686183076923

00:26:23.494 --> 00:26:24.850
default construct this object thing.

NOTE Confidence: 0.788686183076923

00:26:24.850 --> 00:26:26.485
That's what it's not quite

NOTE Confidence: 0.788686183076923

00:26:26.485 --> 00:26:27.466
object machinery does.

NOTE Confidence: 0.788686183076923

00:26:27.470 --> 00:26:31.043
Let me actually split this so I can at

NOTE Confidence: 0.788686183076923

00:26:31.043 --> 00:26:34.508
least look at the signature real quick.

NOTE Confidence: 0.788686183076923

00:26:34.510 --> 00:26:34.745
OK,

NOTE Confidence: 0.788686183076923

00:26:34.745 --> 00:26:35.450
here we go.

NOTE Confidence: 0.788686183076923

00:26:35.450 --> 00:26:36.860
I don't think we need the

NOTE Confidence: 0.81007642

00:26:36.927 --> 00:26:38.250
tracking issue anymore.

NOTE Confidence: 0.81007642

00:26:38.250 --> 00:26:43.806
OK, um, that is annoyingly small.

NOTE Confidence: 0.81007642

00:26:43.810 --> 00:26:45.010
I want to think big thoughts.

NOTE Confidence: 0.81007642

00:26:45.010 --> 00:26:46.546
Come on, give me longer lines.

NOTE Confidence: 0.81007642

00:26:46.550 --> 00:26:48.750
OK, this uh, maybe if I minimize this.

NOTE Confidence: 0.81007642

00:26:48.750 --> 00:26:50.052
I know that the standard won't be

NOTE Confidence: 0.81007642

00:26:50.052 --> 00:26:51.542
super readable this way, but um.

NOTE Confidence: 0.81007642

00:26:51.542 --> 00:26:55.700
The code is more important here, OK?

NOTE Confidence: 0.81007642

00:26:55.700 --> 00:26:56.900
Maybe one more step.

NOTE Confidence: 0.81007642

00:26:56.900 --> 00:26:57.888
OK, it's kind of tiny.

NOTE Confidence: 0.770368204166667

00:27:00.550 --> 00:27:02.764
OK, so Umm, here I'm looking

NOTE Confidence: 0.770368204166667

00:27:02.764 --> 00:27:04.909
for that a everything is ugly,

NOTE Confidence: 0.770368204166667

00:27:04.910 --> 00:27:07.192
which I'm here I'm not too concerned

NOTE Confidence: 0.770368204166667

00:27:07.192 --> 00:27:09.189
about because super wig has written

NOTE Confidence: 0.770368204166667

00:27:09.189 --> 00:27:11.226
many peers before and to make sure

NOTE Confidence: 0.770368204166667

00:27:11.226 --> 00:27:13.214
that things are mentioned in the right

NOTE Confidence: 0.770368204166667

00:27:13.214 --> 00:27:15.122
order and if there's any divergence

NOTE Confidence: 0.770368204166667

00:27:15.122 --> 00:27:17.189
between what the standard says and

NOTE Confidence: 0.770368204166667

00:27:17.189 --> 00:27:19.295
what the implementation does that I

NOTE Confidence: 0.770368204166667

00:27:19.295 --> 00:27:21.394
understand why it diverges sometimes

NOTE Confidence: 0.770368204166667

00:27:21.394 --> 00:27:24.010
for some optimization or some internal

NOTE Confidence: 0.770368204166667

00:27:24.078 --> 00:27:26.190
unwrapping thing we need to do.

NOTE Confidence: 0.770368204166667

00:27:26.190 --> 00:27:29.310
Also I want to highlight things.

NOTE Confidence: 0.770368204166667

00:27:29.310 --> 00:27:31.062
Where's my little highlighter?

NOTE Confidence: 0.770368204166667

00:27:31.062 --> 00:27:32.376
Here we go.

NOTE Confidence: 0.770368204166667

00:27:32.380 --> 00:27:37.186
Um, OK, so we are looking at find last.

NOTE Confidence: 0.770368204166667

00:27:37.190 --> 00:27:39.296
That's this one, the Iterator Sentinel.

NOTE Confidence: 0.770368204166667

00:27:39.300 --> 00:27:40.560
It's following the standard order.

NOTE Confidence: 0.770368204166667

00:27:40.560 --> 00:27:42.877
So we're templated on a forward iterator,

NOTE Confidence: 0.770368204166667

00:27:42.880 --> 00:27:43.572
named it.

NOTE Confidence: 0.770368204166667

00:27:43.572 --> 00:27:45.994
We need a Sentinel for that iterator.

NOTE Confidence: 0.770368204166667

00:27:46.000 --> 00:27:52.075
C Class Ty class PJ is the identity functor.

NOTE Confidence: 0.770368204166667

00:27:52.080 --> 00:27:55.300
OK, we have a concept requirement that

NOTE Confidence: 0.770368204166667

00:27:55.300 --> 00:27:58.189
it's an indirect binary predicate.

NOTE Confidence: 0.770368204166667

00:27:58.190 --> 00:28:01.564
That if we use ranges equal to

NOTE Confidence: 0.770368204166667

00:28:01.564 --> 00:28:04.040
on the projected iterator.

NOTE Confidence: 0.770368204166667

00:28:04.040 --> 00:28:09.280
Um, and looking at Consti star, uh,

NOTE Confidence: 0.770368204166667

00:28:09.280 --> 00:28:12.640
that essentially dereferencing.

NOTE Confidence: 0.770368204166667

00:28:12.640 --> 00:28:14.535
The iterator and then running

NOTE Confidence: 0.770368204166667

00:28:14.535 --> 00:28:16.430
that through the projection and

NOTE Confidence: 0.770368204166667

00:28:16.499 --> 00:28:18.179
then looking at that value.

NOTE Confidence: 0.770368204166667

00:28:18.180 --> 00:28:20.420
UM here because it's indirect

NOTE Confidence: 0.770368204166667

00:28:20.420 --> 00:28:21.316
binary predicate.

NOTE Confidence: 0.770368204166667

00:28:21.320 --> 00:28:23.763
We say Constance star because it's indirect

NOTE Confidence: 0.770368204166667

00:28:23.763 --> 00:28:26.597
that we can compare them with equal to.

NOTE Confidence: 0.770368204166667

00:28:26.600 --> 00:28:28.280
So that looks right.

NOTE Confidence: 0.770368204166667

00:28:28.280 --> 00:28:30.380
And that matches the standard

NOTE Confidence: 0.770368204166667

00:28:30.380 --> 00:28:32.158
which says Consti star.

NOTE Confidence: 0.770368204166667

00:28:32.160 --> 00:28:34.120
OK, so each of these things should be

NOTE Confidence: 0.770368204166667

00:28:34.120 --> 00:28:35.998
no discard because they're observers.

NOTE Confidence: 0.770368204166667

00:28:36.000 --> 00:28:38.196
We're looking for the last occurrence,

NOTE Confidence: 0.770368204166667

00:28:38.200 --> 00:28:39.964
so we should see six notice cards.

NOTE Confidence: 0.770368204166667

00:28:39.970 --> 00:28:41.685
I'll double check that we have this

NOTE Confidence: 0.770368204166667

00:28:41.685 --> 00:28:43.759
and then I won't refer to it again.

NOTE Confidence: 0.770368204166667

00:28:43.760 --> 00:28:44.090
Um,

NOTE Confidence: 0.770368204166667

00:28:44.090 --> 00:28:46.400
also internal helpers are marked notice card.

NOTE Confidence: 0.770368204166667

00:28:46.400 --> 00:28:47.390
That's nice.

NOTE Confidence: 0.770368204166667

00:28:47.390 --> 00:28:50.855
So two public and then one internal

NOTE Confidence: 0.770368204166667

00:28:50.855 --> 00:28:51.910
again here.

NOTE Confidence: 0.770368204166667

00:28:51.910 --> 00:28:52.247
Ohh,

NOTE Confidence: 0.770368204166667

00:28:52.247 --> 00:28:53.258
we're missing one.

NOTE Confidence: 0.642475944

00:28:55.960 --> 00:28:58.800
Four find last if operator

NOTE Confidence: 0.642475944

00:28:58.800 --> 00:29:01.640
paren paren the range form.

NOTE Confidence: 0.642475944

00:29:01.640 --> 00:29:02.980
This should absolutely be no

NOTE Confidence: 0.642475944

00:29:02.980 --> 00:29:04.320
discard and it's missing here.

NOTE Confidence: 0.412530105

00:29:07.420 --> 00:29:08.510
No discard.

NOTE Confidence: 0.835952124

00:29:11.670 --> 00:29:13.730
OK, so again paranoia increases.

NOTE Confidence: 0.835952124

00:29:13.730 --> 00:29:17.490
Let me double check um find last two

NOTE Confidence: 0.835952124

00:29:17.490 --> 00:29:19.939
public functions internal helper.

NOTE Confidence: 0.835952124

00:29:19.940 --> 00:29:22.328
Find last if one public function

NOTE Confidence: 0.835952124

00:29:22.328 --> 00:29:24.544
but not the second commented

NOTE Confidence: 0.835952124

00:29:24.544 --> 00:29:26.728
and then internal helper.

NOTE Confidence: 0.835952124

00:29:26.730 --> 00:29:29.100
And then find last if not.

NOTE Confidence: 0.835952124

00:29:29.100 --> 00:29:32.135
Public one again missing here

NOTE Confidence: 0.835952124

00:29:32.135 --> 00:29:34.563
and then internal helper.

NOTE Confidence: 0.835952124

00:29:34.570 --> 00:29:40.428
OK, so this one also missing no discard. OK.

NOTE Confidence: 0.623781145

00:29:42.850 --> 00:29:45.980
Count it. Correct.

NOTE Confidence: 0.618940453333333

00:29:48.500 --> 00:29:51.398
OK, going back. Um, pure observer.

NOTE Confidence: 0.618940453333333

00:29:51.400 --> 00:29:52.408
So it's no discard.

NOTE Confidence: 0.618940453333333

00:29:52.408 --> 00:29:55.788
OK, these things need to be constexpr.

NOTE Confidence: 0.618940453333333

00:29:55.788 --> 00:29:57.996
We had long e-mail discussions on

NOTE Confidence: 0.618940453333333

00:29:57.996 --> 00:30:00.320
the C Plus standard mailing list

NOTE Confidence: 0.618940453333333

00:30:00.320 --> 00:30:02.994
about should you know things in the

NOTE Confidence: 0.618940453333333

00:30:03.062 --> 00:30:05.309
STL be marked as no discard eagerly

NOTE Confidence: 0.618940453333333

00:30:05.309 --> 00:30:08.365
or should we only do it on the

NOTE Confidence: 0.618940453333333

00:30:08.365 --> 00:30:11.100
most dire cases like vector empty?

NOTE Confidence: 0.618940453333333

00:30:11.100 --> 00:30:12.220
Lots and lots of discussion.

NOTE Confidence: 0.618940453333333

00:30:12.220 --> 00:30:15.330
The committee eventually decided to.

NOTE Confidence: 0.618940453333333

00:30:15.330 --> 00:30:16.906
Follow the status quo, which is not mark.

NOTE Confidence: 0.618940453333333

00:30:16.910 --> 00:30:18.898
Everything is no discard.

NOTE Confidence: 0.618940453333333

00:30:18.898 --> 00:30:21.195
That means that implementations need

NOTE Confidence: 0.618940453333333

00:30:21.195 --> 00:30:23.940
to sort of do their own homework as to

NOTE Confidence: 0.618940453333333

00:30:24.020 --> 00:30:27.143
whether to mark things as no discard or not,

NOTE Confidence: 0.618940453333333

00:30:27.150 --> 00:30:28.590
and provide additional, you know,

NOTE Confidence: 0.618940453333333

00:30:28.590 --> 00:30:30.760
quality of implementation as they call it.

NOTE Confidence: 0.618940453333333

00:30:30.760 --> 00:30:32.416
We'd love no discarding the STL.

NOTE Confidence: 0.618940453333333

00:30:32.420 --> 00:30:34.238
We're up to like 7000 or

NOTE Confidence: 0.618940453333333

00:30:34.238 --> 00:30:35.450
something occurrences of it.

NOTE Confidence: 0.618940453333333

00:30:35.450 --> 00:30:37.298
I don't even know how many

NOTE Confidence: 0.618940453333333

00:30:37.298 --> 00:30:38.530
I'd have to search.

NOTE Confidence: 0.618940453333333

00:30:38.530 --> 00:30:40.936
And every everyone is valuable as

NOTE Confidence: 0.618940453333333

00:30:40.936 --> 00:30:43.909
long as we avoid false positives,

NOTE Confidence: 0.618940453333333

00:30:43.910 --> 00:30:45.846
and this is a clear slam dunk case.

NOTE Confidence: 0.618940453333333

00:30:45.850 --> 00:30:47.086
That it's useful.

NOTE Confidence: 0.618940453333333

00:30:47.086 --> 00:30:49.146
OK, so constexpr return a

NOTE Confidence: 0.618940453333333

00:30:49.146 --> 00:30:51.368
sub range for the iterator,

NOTE Confidence: 0.618940453333333

00:30:51.370 --> 00:30:52.700
and this is ranges finglass.

NOTE Confidence: 0.618940453333333

00:30:52.700 --> 00:30:54.564
This name is provided by the function object.

NOTE Confidence: 0.618940453333333

00:30:54.570 --> 00:30:56.748
Below we take the iterator first,

NOTE Confidence: 0.618940453333333

00:30:56.750 --> 00:30:57.767
the Sentinel last.

NOTE Confidence: 0.618940453333333

00:30:57.767 --> 00:31:00.140
In this case this is called sent.

NOTE Confidence: 0.618940453333333

00:31:00.140 --> 00:31:01.150
That's fine.

NOTE Confidence: 0.734874391666667

00:31:03.840 --> 00:31:05.598
What is oh I'm scrolled down.

NOTE Confidence: 0.734874391666667

00:31:05.600 --> 00:31:06.800
I'm looking at find Elastic

NOTE Confidence: 0.734874391666667

00:31:06.800 --> 00:31:08.000
and I want find last.

NOTE Confidence: 0.734874391666667

00:31:08.000 --> 00:31:10.322
I was like why is there a predicate here?

NOTE Confidence: 0.734874391666667

00:31:10.330 --> 00:31:14.434
OK find last let me double check context

NOTE Confidence: 0.734874391666667

00:31:14.434 --> 00:31:17.692
for subrange it operand Pran it first

NOTE Confidence: 0.734874391666667

00:31:17.692 --> 00:31:21.570
ccent OK here we go tonsai ref value.

NOTE Confidence: 0.734874391666667

00:31:21.570 --> 00:31:27.296
OK and PJ projection is brace brace.

NOTE Confidence: 0.734874391666667

00:31:27.300 --> 00:31:29.390
It's constant on the function.

NOTE Confidence: 0.734874391666667

00:31:29.390 --> 00:31:31.388
The function call operator is constant

NOTE Confidence: 0.734874391666667

00:31:31.388 --> 00:31:33.340
because the object is constexpr.

NOTE Confidence: 0.734874391666667

00:31:33.340 --> 00:31:35.776
OK, and so now let's actually

NOTE Confidence: 0.734874391666667

00:31:35.776 --> 00:31:37.400
look at the implementation.

NOTE Confidence: 0.734874391666667

00:31:37.400 --> 00:31:40.040
So we are being given a user defined

NOTE Confidence: 0.734874391666667

00:31:40.040 --> 00:31:41.520
potentially iterator and Sentinel.

NOTE Confidence: 0.734874391666667

00:31:41.520 --> 00:31:43.438
So we want to verify that these

NOTE Confidence: 0.734874391666667

00:31:43.438 --> 00:31:44.866
iterators are valid and for

NOTE Confidence: 0.734874391666667

00:31:44.866 --> 00:31:46.516
example belong to the same range.

NOTE Confidence: 0.734874391666667

00:31:46.520 --> 00:31:47.966
Aren't reversed if they're random access.

NOTE Confidence: 0.734874391666667

00:31:47.970 --> 00:31:49.716
We have a helper addl verifier

NOTE Confidence: 0.734874391666667

00:31:49.716 --> 00:31:50.880
range that does that.

NOTE Confidence: 0.734874391666667

00:31:50.880 --> 00:31:53.141
Now we can remove checking from them

NOTE Confidence: 0.734874391666667

00:31:53.141 --> 00:31:55.358
because we know it's a valid range,

NOTE Confidence: 0.734874391666667

00:31:55.360 --> 00:31:56.990
or we hope it is.

NOTE Confidence: 0.734874391666667

00:31:56.990 --> 00:32:00.054
So we can call our internal helper find

NOTE Confidence: 0.734874391666667

00:32:00.054 --> 00:32:02.950
last unchecked down here and we're going to.

NOTE Confidence: 0.734874391666667

00:32:02.950 --> 00:32:04.198
Call our unwrap helper,

NOTE Confidence: 0.734874391666667

00:32:04.198 --> 00:32:06.390
so there's some common machinery for this.

NOTE Confidence: 0.734874391666667

00:32:06.390 --> 00:32:07.710
I won't go into exactly how it works,

NOTE Confidence: 0.734874391666667

00:32:07.710 --> 00:32:09.294
but we need to essentially provide

NOTE Confidence: 0.734874391666667

00:32:09.294 --> 00:32:11.030
the Sentinel type to the iterator,

NOTE Confidence: 0.734874391666667

00:32:11.030 --> 00:32:12.056
and vice versa,

NOTE Confidence: 0.734874391666667

00:32:12.056 --> 00:32:14.108
provide the iterator type to the

NOTE Confidence: 0.734874391666667

00:32:14.108 --> 00:32:16.227
one that unwraps the Sentinel.

NOTE Confidence: 0.734874391666667

00:32:16.230 --> 00:32:17.730
So I actually forget why.

NOTE Confidence: 0.734874391666667

00:32:17.730 --> 00:32:19.585
I could go look at the definitions,

NOTE Confidence: 0.734874391666667

00:32:19.590 --> 00:32:21.156
but this is the right convention

NOTE Confidence: 0.734874391666667

00:32:21.156 --> 00:32:23.361
where we say unwrap it or C and then

NOTE Confidence: 0.734874391666667

00:32:23.361 --> 00:32:25.147
move in the first iterator, unwrap,

NOTE Confidence: 0.734874391666667

00:32:25.147 --> 00:32:29.209
Sentinel it, move in the Sentinel.

NOTE Confidence: 0.734874391666667

00:32:29.210 --> 00:32:30.813
Looks right and they're not constant so

NOTE Confidence: 0.734874391666667

00:32:30.813 --> 00:32:32.418
the moving will actually take effect.

NOTE Confidence: 0.734874391666667

00:32:32.420 --> 00:32:34.913
We pass value by consti ref and then rods

NOTE Confidence: 0.734874391666667

00:32:34.913 --> 00:32:37.307
we pass through this helper *** phone.

NOTE Confidence: 0.734874391666667

00:32:37.307 --> 00:32:40.100
This helps with the back end code Gen or did.

NOTE Confidence: 0.734874391666667

00:32:40.100 --> 00:32:42.444
I think this may be less necessary now

NOTE Confidence: 0.734874391666667

00:32:42.444 --> 00:32:45.383
but I haven't gone through and verified

NOTE Confidence: 0.734874391666667

00:32:45.383 --> 00:32:46.836
whether this is still necessary.

NOTE Confidence: 0.734874391666667

00:32:46.836 --> 00:32:48.081
This is correct according to

NOTE Confidence: 0.734874391666667

00:32:48.081 --> 00:32:49.259
our current conventions.

NOTE Confidence: 0.734874391666667

00:32:49.260 --> 00:32:53.348
This returns a sub range which we're going

NOTE Confidence: 0.734874391666667

00:32:53.348 --> 00:32:58.019
to use a structured binding to decompose.

NOTE Confidence: 0.734874391666667

00:32:58.020 --> 00:32:59.780
This will give us unwrapped.

NOTE Confidence: 0.734874391666667

00:32:59.780 --> 00:33:01.740
1st and unwrapped last,

NOTE Confidence: 0.734874391666667

00:33:01.740 --> 00:33:02.804
uh, return values.

NOTE Confidence: 0.734874391666667

00:33:02.804 --> 00:33:04.813
But then we need to reapply wrapping.

NOTE Confidence: 0.734874391666667

00:33:04.820 --> 00:33:07.510
This is the potential layer

NOTE Confidence: 0.734874391666667

00:33:07.510 --> 00:33:09.124
of iterator checking.

NOTE Confidence: 0.734874391666667

00:33:09.130 --> 00:33:11.090
Give us something like STD vector iterators.

NOTE Confidence: 0.734874391666667

00:33:11.090 --> 00:33:13.178
We verify that they're not swapped and that

NOTE Confidence: 0.734874391666667

00:33:13.178 --> 00:33:15.127
they belong to the same parent container.

NOTE Confidence: 0.734874391666667

00:33:15.130 --> 00:33:16.630
Then we unwrap down to pointers,

NOTE Confidence: 0.734874391666667

00:33:16.630 --> 00:33:18.270
run the algorithm real quickly,

NOTE Confidence: 0.734874391666667

00:33:18.270 --> 00:33:20.552
and then wrap them back with our

NOTE Confidence: 0.734874391666667

00:33:20.552 --> 00:33:21.530
iterator debugging technology.

NOTE Confidence: 0.734874391666667

00:33:21.530 --> 00:33:23.980
That's what this is for.

NOTE Confidence: 0.734874391666667

00:33:23.980 --> 00:33:25.150
So.

NOTE Confidence: 0.750057967

00:33:27.880 --> 00:33:30.076
Here we go O we return

NOTE Confidence: 0.750057967

00:33:30.076 --> 00:33:31.540
a subrange of iterators.

NOTE Confidence: 0.750057967

00:33:31.540 --> 00:33:34.450
What came in was an iterator

NOTE Confidence: 0.750057967

00:33:34.450 --> 00:33:37.110
Sentinel pair O we can't reuse sent,

NOTE Confidence: 0.750057967

00:33:37.110 --> 00:33:39.456
it could be a different type.

NOTE Confidence: 0.750057967

00:33:39.460 --> 00:33:42.196
That's why we need to make a new

NOTE Confidence: 0.750057967

00:33:42.196 --> 00:33:45.630
iterator last brace initialized.

NOTE Confidence: 0.750057967

00:33:45.630 --> 00:33:48.090
Then we're going to seacraft,

NOTE Confidence: 0.750057967

00:33:48.090 --> 00:33:49.990
which is essentially an assignment,

NOTE Confidence: 0.750057967

00:33:49.990 --> 00:33:52.888
um 1st, and then move in.

NOTE Confidence: 0.750057967

00:33:52.890 --> 00:33:56.530
You first, last move you last, it is.

NOTE Confidence: 0.750057967

00:33:56.530 --> 00:33:58.240
Unclear to me.

NOTE Confidence: 0.750057967

00:33:58.240 --> 00:34:01.327
Do we need to brace initialize last?

NOTE Confidence: 0.750057967

00:34:01.330 --> 00:34:02.563
I'm not going to worry about it too much.

NOTE Confidence: 0.750057967

00:34:02.570 --> 00:34:04.383
I sort of believe that everything should

NOTE Confidence: 0.750057967

00:34:04.383 --> 00:34:06.268
be initialized and see what's all the time.

NOTE Confidence: 0.750057967

00:34:06.270 --> 00:34:08.307
In theory it might be possible to

NOTE Confidence: 0.750057967

00:34:08.307 --> 00:34:10.281
use a singular iterator here because

NOTE Confidence: 0.750057967

00:34:10.281 --> 00:34:12.345
this is just going to assign.

NOTE Confidence: 0.750057967

00:34:12.350 --> 00:34:14.430
That's what crap does.

NOTE Confidence: 0.750057967

00:34:14.430 --> 00:34:16.235
UM, I think we might brace

NOTE Confidence: 0.750057967

00:34:16.235 --> 00:34:16.749
initialized elsewhere.

NOTE Confidence: 0.750057967

00:34:16.750 --> 00:34:17.354
This is.

NOTE Confidence: 0.750057967

00:34:17.354 --> 00:34:19.770
I'm going to check for my own education.

NOTE Confidence: 0.750057967

00:34:19.770 --> 00:34:21.978
Seek wrap let me just pull

NOTE Confidence: 0.750057967

00:34:21.978 --> 00:34:23.082
up random occurrences,

NOTE Confidence: 0.750057967

00:34:23.090 --> 00:34:24.210
which is pretty uncommon that

NOTE Confidence: 0.750057967

00:34:24.210 --> 00:34:25.330
we make a fresh iterator.

NOTE Confidence: 0.750057967

00:34:25.330 --> 00:34:27.010
That's why this looks new to me.

NOTE Confidence: 0.750057967

00:34:27.010 --> 00:34:28.900
Usually we're seeking an existing

NOTE Confidence: 0.750057967

00:34:28.900 --> 00:34:30.790
iterator and just resetting it.

NOTE Confidence: 0.750057967

00:34:30.790 --> 00:34:32.494
Let me actually look at the

NOTE Confidence: 0.750057967

00:34:32.494 --> 00:34:34.063
definition because I think secret

NOTE Confidence: 0.750057967

00:34:34.063 --> 00:34:35.948
just essentially does an assignment.

NOTE Confidence: 0.750057967

00:34:35.950 --> 00:34:43.280
Or go ah if, um, it provides a seek to.

NOTE Confidence: 0.750057967

00:34:43.280 --> 00:34:45.760
Member function, we call it.

NOTE Confidence: 0.750057967

00:34:45.760 --> 00:34:47.380
Otherwise we do an assignment.

NOTE Confidence: 0.750057967

00:34:47.380 --> 00:34:48.885
OK, at some point we got this.

NOTE Confidence: 0.750057967

00:34:48.890 --> 00:34:50.330
I think historically we might have

NOTE Confidence: 0.750057967

00:34:50.330 --> 00:34:51.820
just always done the assignment,

NOTE Confidence: 0.750057967

00:34:51.820 --> 00:34:54.400
but in our new machine we've got the seek to.

NOTE Confidence: 0.750057967

00:34:54.400 --> 00:34:55.616
I think this avoids.

NOTE Confidence: 0.750057967

00:34:55.616 --> 00:34:57.908
I want to say this avoids unnecessary

NOTE Confidence: 0.750057967

00:34:57.908 --> 00:35:00.290
debugging logic to like make a

NOTE Confidence: 0.750057967

00:35:00.290 --> 00:35:02.210
fresh iterator or something.

NOTE Confidence: 0.750057967

00:35:02.210 --> 00:35:04.350
Um.

NOTE Confidence: 0.750057967

00:35:04.350 --> 00:35:04.545
No,

NOTE Confidence: 0.750057967

00:35:04.545 --> 00:35:05.715
this is when you're wrapped you

NOTE Confidence: 0.750057967

00:35:05.715 --> 00:35:07.354
call seek 2 because these are these

NOTE Confidence: 0.750057967

00:35:07.354 --> 00:35:08.619
are different types and otherwise

NOTE Confidence: 0.750057967

00:35:08.619 --> 00:35:09.867
you just do the assignment.

NOTE Confidence: 0.750057967

00:35:09.870 --> 00:35:11.110
OK, so I think,

NOTE Confidence: 0.750057967

00:35:11.110 --> 00:35:12.660
I think it historically called

NOTE Confidence: 0.750057967

00:35:12.660 --> 00:35:15.082
C2 and then later we added this

NOTE Confidence: 0.750057967

00:35:15.082 --> 00:35:15.848
optimization here.

NOTE Confidence: 0.750057967

00:35:15.850 --> 00:35:17.488
So when Iterator supports seek two,

NOTE Confidence: 0.750057967

00:35:17.490 --> 00:35:21.108
they just assign the internal pointer.

NOTE Confidence: 0.750057967

00:35:21.110 --> 00:35:21.550
Uh.

NOTE Confidence: 0.750057967

00:35:21.550 --> 00:35:24.630
In the case when you respect iterator

NOTE Confidence: 0.750057967

00:35:24.630 --> 00:35:28.420
debugging, you're a class type and.

NOTE Confidence: 0.750057967

00:35:28.420 --> 00:35:31.280
Usually.

NOTE Confidence: 0.750057967

00:35:31.280 --> 00:35:32.865
Default initialization should be the

NOTE Confidence: 0.750057967

00:35:32.865 --> 00:35:35.560
same as value initialization, but.

NOTE Confidence: 0.750057967

00:35:35.560 --> 00:35:36.700
It's certainly correct.

NOTE Confidence: 0.750057967

00:35:36.700 --> 00:35:38.220
He's value initialization here.

NOTE Confidence: 0.750057967

00:35:38.220 --> 00:35:39.648
I'm not 100% certain it would be

NOTE Confidence: 0.750057967

00:35:39.648 --> 00:35:41.177
correct to get rid of those braces.

NOTE Confidence: 0.750057967

00:35:41.180 --> 00:35:44.750
So this is good. I like it.

NOTE Confidence: 0.750057967

00:35:44.750 --> 00:35:46.106
OK, seek first to you first,

NOTE Confidence: 0.750057967

00:35:46.110 --> 00:35:49.305
last to you last and then move them out.

NOTE Confidence: 0.750057967

00:35:49.310 --> 00:35:53.235
OK, that looks right. Ohh go what?

NOTE Confidence: 0.750057967

00:35:53.235 --> 00:35:57.530
What is the concern? So um.

NOTE Confidence: 0.750057967

00:35:57.530 --> 00:36:02.100
What we have here is.

NOTE Confidence: 0.750057967

00:36:02.100 --> 00:36:05.880
So first here it the iterator first

NOTE Confidence: 0.750057967

00:36:05.880 --> 00:36:08.238
like the idea behind seacraft is.

NOTE Confidence: 0.51766144

00:36:10.520 --> 00:36:12.460
Um. Your.

NOTE Confidence: 0.8073473875

00:36:15.400 --> 00:36:17.840
You are taking the

NOTE Confidence: 0.8073473875

00:36:17.840 --> 00:36:20.280
provenance of this iterator.

NOTE Confidence: 0.8073473875

00:36:20.280 --> 00:36:21.870
Keeping it the same like

NOTE Confidence: 0.8073473875

00:36:21.870 --> 00:36:23.460
it has the same container.

NOTE Confidence: 0.8073473875

00:36:23.460 --> 00:36:26.670
And then assigning any new

NOTE Confidence: 0.8073473875

00:36:26.670 --> 00:36:29.238
pointer like iterator value.

NOTE Confidence: 0.8073473875

00:36:29.240 --> 00:36:31.480
And so this default constructed

NOTE Confidence: 0.8073473875

00:36:31.480 --> 00:36:33.720
iterator does not have the

NOTE Confidence: 0.8073473875

00:36:33.797 --> 00:36:35.957
Providence of any container,

NOTE Confidence: 0.8073473875

00:36:35.960 --> 00:36:37.380
and therefore you're right.

NOTE Confidence: 0.850861616666667

00:36:42.220 --> 00:36:43.150
Totally missed it.

NOTE Confidence: 0.850861616666667

00:36:43.150 --> 00:36:44.080
You're absolutely right,

NOTE Confidence: 0.850861616666667

00:36:44.080 --> 00:36:46.948
this has no parent.

NOTE Confidence: 0.850861616666667

00:36:46.950 --> 00:36:48.034
This this can't possibly

NOTE Confidence: 0.850861616666667

00:36:48.034 --> 00:36:49.389
know what the parent is,

NOTE Confidence: 0.850861616666667

00:36:49.390 --> 00:36:51.990
so we really we should be copying it

NOTE Confidence: 0.850861616666667

00:36:51.990 --> 00:36:54.447
from first here and then seeking it.

NOTE Confidence: 0.850861616666667

00:36:54.450 --> 00:36:55.104
OK, that's like,

NOTE Confidence: 0.850861616666667

00:36:55.104 --> 00:36:56.412
so that there was like something

NOTE Confidence: 0.850861616666667

00:36:56.412 --> 00:36:57.825
in my brain was telling me that

NOTE Confidence: 0.850861616666667

00:36:57.825 --> 00:36:59.104
this was a little weird because

NOTE Confidence: 0.850861616666667

00:36:59.104 --> 00:37:00.254
we're making a fresh iterator

NOTE Confidence: 0.850861616666667

00:37:00.254 --> 00:37:02.002
here and we almost never do that.

NOTE Confidence: 0.850861616666667

00:37:02.002 --> 00:37:03.054
But I totally missed.

NOTE Confidence: 0.850861616666667

00:37:03.060 --> 00:37:05.560
Thank you for finding that.

NOTE Confidence: 0.850861616666667

00:37:05.560 --> 00:37:08.668
That applies to all of these.

NOTE Confidence: 0.850861616666667

00:37:08.670 --> 00:37:09.633
Yeah, this one,

NOTE Confidence: 0.850861616666667

00:37:09.633 --> 00:37:10.596
I believe that.

NOTE Confidence: 0.80796134

00:37:13.510 --> 00:37:19.140
2. I believe that unwrap interior should be.

NOTE Confidence: 0.80796134

00:37:19.140 --> 00:37:21.216
Letters should have ranges on it.

NOTE Confidence: 0.80796134

00:37:21.220 --> 00:37:23.806
I think that's our new convention.

NOTE Confidence: 0.80796134

00:37:23.810 --> 00:37:25.946
Oh, they're qualify it.

NOTE Confidence: 0.80796134

00:37:25.946 --> 00:37:27.926
Umm, yeah, I think we have an

NOTE Confidence: 0.80796134

00:37:27.926 --> 00:37:29.760
issue to go apply qualification.

NOTE Confidence: 0.80796134

00:37:29.760 --> 00:37:31.308
We haven't done that globally yet.

NOTE Confidence: 0.80796134

00:37:31.310 --> 00:37:34.010
Um, I think most occurrences

NOTE Confidence: 0.80796134

00:37:34.010 --> 00:37:36.710
here are not yet qualified.

NOTE Confidence: 0.80796134

00:37:36.710 --> 00:37:39.224
Check leave when I did the

NOTE Confidence: 0.80796134

00:37:39.224 --> 00:37:41.740
upper unwrap it or changes.

NOTE Confidence: 0.80796134

00:37:41.740 --> 00:37:42.668
Maybe I didn't. Yeah,

NOTE Confidence: 0.80796134

00:37:42.668 --> 00:37:45.029
we have tons and tons of unqualified calls,

NOTE Confidence: 0.80796134

00:37:45.030 --> 00:37:47.006
so I think this is conventional right now.

NOTE Confidence: 0.80796134

00:37:47.010 --> 00:37:49.287
Um, I think in the future we can just

NOTE Confidence: 0.80796134

00:37:49.287 --> 00:37:51.408
have a global change to apply this.

NOTE Confidence: 0.80796134

00:37:51.410 --> 00:37:53.600
Um, we did decide to start

NOTE Confidence: 0.80796134

00:37:53.600 --> 00:37:55.400
qualifying everything in the STL,

NOTE Confidence: 0.80796134

00:37:55.400 --> 00:37:58.746
even though it's gonna be horribly verbose.

NOTE Confidence: 0.80796134

00:37:58.750 --> 00:38:01.599
But I would rather have that done

NOTE Confidence: 0.80796134

00:38:01.600 --> 00:38:03.728
all at once rather than piece meal.

NOTE Confidence: 0.74589015

00:38:06.030 --> 00:38:07.276
Yeah, so I think I won't request

NOTE Confidence: 0.74589015

00:38:07.276 --> 00:38:08.480
changes for that, but absolutely

NOTE Confidence: 0.74589015

00:38:08.480 --> 00:38:10.155
request changes for the parent.

NOTE Confidence: 0.74589015

00:38:10.160 --> 00:38:11.910
This indicates a, I would say a

NOTE Confidence: 0.74589015

00:38:11.910 --> 00:38:13.670
massive hole in our test coverage.

NOTE Confidence: 0.74589015

00:38:13.670 --> 00:38:14.990
Why are we not finding this?

NOTE Confidence: 0.74589015

00:38:14.990 --> 00:38:16.718
There should be any use of

NOTE Confidence: 0.74589015

00:38:16.718 --> 00:38:17.870
vector should find this.

NOTE Confidence: 0.74589015

00:38:17.870 --> 00:38:18.726
Yeah, go ahead Casey,

NOTE Confidence: 0.74589015

00:38:18.726 --> 00:38:20.510
I go look at the test coverage.

NOTE Confidence: 0.74589015

00:38:20.510 --> 00:38:22.526
I want to point out that I've been

NOTE Confidence: 0.74589015

00:38:22.526 --> 00:38:24.492
looking for trying to figure out why

NOTE Confidence: 0.74589015

00:38:24.492 --> 00:38:26.339
we don't have this problem already

NOTE Confidence: 0.74589015

00:38:26.339 --> 00:38:28.289
elsewhere since before Nicole mentioned

NOTE Confidence: 0.74589015

00:38:28.289 --> 00:38:30.338
that this rewrapping is weird.

NOTE Confidence: 0.74589015

00:38:30.338 --> 00:38:34.242
We have a helper called Rewrap sub range.

NOTE Confidence: 0.74589015

00:38:34.250 --> 00:38:36.644
That we use for search in the

NOTE Confidence: 0.74589015

00:38:36.644 --> 00:38:38.577
algorithm I'm looking at right

NOTE Confidence: 0.74589015

00:38:38.577 --> 00:38:40.657
now and we desperately looking

NOTE Confidence: 0.74589015

00:38:40.657 --> 00:38:42.622
for another occurrence to figure

NOTE Confidence: 0.74589015

00:38:42.622 --> 00:38:44.869
out how we deal with this before.

NOTE Confidence: 0.74589015

00:38:44.870 --> 00:38:47.480
Yeah like where where we screwed

NOTE Confidence: 0.74589015

00:38:47.480 --> 00:38:49.960
this up for so we say.

NOTE Confidence: 0.74589015

00:38:49.960 --> 00:38:54.789
Paper. First pass result.

NOTE Confidence: 0.74589015

00:38:54.790 --> 00:38:56.716
OK, so here this just demands

NOTE Confidence: 0.74589015

00:38:56.716 --> 00:38:58.749
that one iterator have the parent,

NOTE Confidence: 0.74589015

00:38:58.750 --> 00:39:01.216
and then it will make um.

NOTE Confidence: 0.711938054285714

00:39:03.580 --> 00:39:06.037
Ohh, this is expecting search into result.

NOTE Confidence: 0.711938054285714

00:39:06.040 --> 00:39:08.974
The search in helper to return a sub

NOTE Confidence: 0.711938054285714

00:39:08.974 --> 00:39:10.359
range of the unwrapped iterators.

NOTE Confidence: 0.711938054285714

00:39:10.360 --> 00:39:12.390
Is that what's going on?

NOTE Confidence: 0.711938054285714

00:39:12.390 --> 00:39:15.350
Is is this one essentially.

NOTE Confidence: 0.711938054285714

00:39:15.350 --> 00:39:19.300
We haven't rewrapped first here, yeah?

NOTE Confidence: 0.711938054285714

00:39:19.300 --> 00:39:21.172
There's always the returns of sub

NOTE Confidence: 0.711938054285714

00:39:21.172 --> 00:39:22.420
range of unwrapped iterators,

NOTE Confidence: 0.711938054285714

00:39:22.420 --> 00:39:24.880
and rewrap subrange turns that into

NOTE Confidence: 0.711938054285714

00:39:24.880 --> 00:39:27.320
a subrange of wrapped iterators.

NOTE Confidence: 0.711938054285714

00:39:27.320 --> 00:39:28.400
Oh, I see this is a.

NOTE Confidence: 0.711938054285714

00:39:28.400 --> 00:39:31.298
It's taking a whole range here.

NOTE Confidence: 0.711938054285714

00:39:31.300 --> 00:39:33.554
OK, and then given a single iterator,

NOTE Confidence: 0.711938054285714

00:39:33.560 --> 00:39:36.056
it'll apply that parent to both of them.

NOTE Confidence: 0.711938054285714

00:39:36.060 --> 00:39:39.358
OK. Is that what we're doing here?

NOTE Confidence: 0.711938054285714

00:39:39.360 --> 00:39:43.160
We've got two unwrapped iterators, OK.

NOTE Confidence: 0.711938054285714

00:39:43.160 --> 00:39:45.200
It's just we they they come

NOTE Confidence: 0.711938054285714

00:39:45.200 --> 00:39:46.621
out as on actually, no,

NOTE Confidence: 0.711938054285714

00:39:46.621 --> 00:39:48.860
they they actually come out as a subrange,

NOTE Confidence: 0.711938054285714

00:39:48.860 --> 00:39:51.158
but then they were decomposed here.

NOTE Confidence: 0.711938054285714

00:39:51.160 --> 00:39:52.654
So it would actually be simpler

NOTE Confidence: 0.711938054285714

00:39:52.654 --> 00:39:53.650
to use Rewrap subrange.

NOTE Confidence: 0.711938054285714

00:39:53.650 --> 00:39:54.976
OK, great catch.

NOTE Confidence: 0.711938054285714

00:39:54.976 --> 00:39:55.860
Thank you.

NOTE Confidence: 0.703637182727273

00:39:58.810 --> 00:40:00.868
Like I can do this pattern anatomy

NOTE Confidence: 0.703637182727273

00:40:00.868 --> 00:40:02.450
elsewhere in the algorithms.

NOTE Confidence: 0.703637182727273

00:40:02.450 --> 00:40:03.818
It's like we've done it before,

NOTE Confidence: 0.703637182727273

00:40:03.820 --> 00:40:04.950
how did we do it?

NOTE Confidence: 0.703637182727273

00:40:04.950 --> 00:40:06.266
And that's super big.

NOTE Confidence: 0.703637182727273

00:40:06.266 --> 00:40:08.800
Did ask for help with the the

NOTE Confidence: 0.703637182727273

00:40:08.800 --> 00:40:10.540
rewrapping because this is new and

NOTE Confidence: 0.703637182727273

00:40:10.540 --> 00:40:12.050
it's apparently new to me too.

NOTE Confidence: 0.703637182727273

00:40:12.050 --> 00:40:14.866
I'm learning all this new range of stuff.

NOTE Confidence: 0.703637182727273

00:40:14.870 --> 00:40:17.446
It's like I know how it used

NOTE Confidence: 0.703637182727273

00:40:17.446 --> 00:40:18.550
to historically work.

NOTE Confidence: 0.703637182727273

00:40:18.550 --> 00:40:20.993
OK, so let's uh find some context

NOTE Confidence: 0.703637182727273

00:40:20.993 --> 00:40:23.509
here and provide this in the comment.

NOTE Confidence: 0.703637182727273

00:40:23.510 --> 00:40:25.574
Let's look for the first occurrence

NOTE Confidence: 0.703637182727273

00:40:25.574 --> 00:40:27.827
of Rewrap subrange and then I want

NOTE Confidence: 0.703637182727273

00:40:27.827 --> 00:40:29.731
to know before I add this comment,

NOTE Confidence: 0.703637182727273

00:40:29.740 --> 00:40:31.432
why are we not seeing this in the test?

NOTE Confidence: 0.703637182727273

00:40:31.440 --> 00:40:33.519
Is the test machinery which is used

NOTE Confidence: 0.703637182727273

00:40:33.519 --> 00:40:36.159
in some of this instantiate or stuff?

NOTE Confidence: 0.703637182727273

00:40:36.160 --> 00:40:38.456
Why is this not using like wrapped iterators?

NOTE Confidence: 0.703637182727273

00:40:38.460 --> 00:40:41.015
Is it just the test forward instantiated

NOTE Confidence: 0.703637182727273

00:40:41.015 --> 00:40:42.958
just doesn't use vector iterators

NOTE Confidence: 0.703637182727273

00:40:42.958 --> 00:40:45.695
ever or anything that behaves like it?

NOTE Confidence: 0.703637182727273

00:40:45.700 --> 00:40:47.488
It uses test colon,

NOTE Confidence: 0.703637182727273

00:40:47.488 --> 00:40:49.276
colon iterator from range,

NOTE Confidence: 0.703637182727273

00:40:49.280 --> 00:40:53.890
range support, range algorithm support?

NOTE Confidence: 0.703637182727273

00:40:53.890 --> 00:40:57.558
And they don't have a problem with

NOTE Confidence: 0.703637182727273

00:40:57.558 --> 00:40:59.825
rewrapping things. In this manner.

NOTE Confidence: 0.703637182727273

00:40:59.825 --> 00:41:02.255
OK, so there's no sense of.

NOTE Confidence: 0.703637182727273

00:41:02.260 --> 00:41:04.330
The original iterator has apparent that

NOTE Confidence: 0.703637182727273

00:41:04.330 --> 00:41:06.380
distinguishes it from value initialized.

NOTE Confidence: 0.703637182727273

00:41:06.380 --> 00:41:08.432
There is not, and there ought to be. Do we?

NOTE Confidence: 0.703637182727273

00:41:08.432 --> 00:41:09.970
There is not, and there ought to be.

NOTE Confidence: 0.703637182727273

00:41:09.970 --> 00:41:12.594
We should all file an issue for that.

NOTE Confidence: 0.703637182727273

00:41:12.600 --> 00:41:14.440
OK, awesome. Thank you.

NOTE Confidence: 0.703637182727273

00:41:14.440 --> 00:41:18.140
Expand that bit of coverage in the range.

NOTE Confidence: 0.703637182727273

00:41:18.140 --> 00:41:18.345
Yeah,

NOTE Confidence: 0.703637182727273

00:41:18.345 --> 00:41:20.190
and that that the nice thing about that is,

NOTE Confidence: 0.703637182727273

00:41:20.190 --> 00:41:21.660
yeah it'll it'll be annoying to write.

NOTE Confidence: 0.703637182727273

00:41:21.660 --> 00:41:22.022
Um,

NOTE Confidence: 0.703637182727273

00:41:22.022 --> 00:41:23.832
because the the parent checking

NOTE Confidence: 0.703637182727273

00:41:23.832 --> 00:41:25.280
logic is always annoying.

NOTE Confidence: 0.703637182727273

00:41:25.280 --> 00:41:26.900
But once we write it,

NOTE Confidence: 0.703637182727273

00:41:26.900 --> 00:41:29.630
it will provide validation to everything,

NOTE Confidence: 0.703637182727273

00:41:29.630 --> 00:41:31.844
which is like zillions and zillions

NOTE Confidence: 0.703637182727273

00:41:31.844 --> 00:41:33.821
of branches algorithms going through

NOTE Confidence: 0.703637182727273

00:41:33.821 --> 00:41:35.573
this very useful instantiated

NOTE Confidence: 0.703637182727273

00:41:35.573 --> 00:41:37.763
machinery and prevent further problems

NOTE Confidence: 0.703637182727273

00:41:37.828 --> 00:41:39.558
of this nature from occurring.

NOTE Confidence: 0.703637182727273

00:41:39.560 --> 00:41:40.790
OK, so thanks for finding that.

NOTE Confidence: 0.703637182727273

00:41:40.790 --> 00:41:42.398
Let me find the Rewrap subrange.

NOTE Confidence: 0.703637182727273

00:41:42.400 --> 00:41:47.520
This is search N. Let me get here.

NOTE Confidence: 0.703637182727273

00:41:47.520 --> 00:41:50.328
This is saying size Sentinel fours any

NOTE Confidence: 0.703637182727273

00:41:50.328 --> 00:41:53.009
one of these better than the others.

NOTE Confidence: 0.777675612857143

00:41:55.960 --> 00:41:58.200
This one is simpler, the unsized one,

NOTE Confidence: 0.777675612857143

00:41:58.200 --> 00:41:59.620
because we don't need to

NOTE Confidence: 0.777675612857143

00:41:59.620 --> 00:42:00.756
separately compute the Dist.

NOTE Confidence: 0.777675612857143

00:42:00.760 --> 00:42:02.776
So I'll give that as the example.

NOTE Confidence: 0.777675612857143

00:42:02.780 --> 00:42:05.000
Hit Y to get a permalink,

NOTE Confidence: 0.777675612857143

00:42:05.000 --> 00:42:07.870
and then there we go.

NOTE Confidence: 0.777675612857143

00:42:07.870 --> 00:42:11.558
OK. So let's go up.

NOTE Confidence: 0.765272277272727

00:42:14.700 --> 00:42:16.793
And go down because I made the

NOTE Confidence: 0.765272277272727

00:42:16.793 --> 00:42:18.100
mistake of expanding stuff.

NOTE Confidence: 0.765272277272727

00:42:18.100 --> 00:42:22.018
OK, so here's where it is.

NOTE Confidence: 0.873984876666667

00:42:24.460 --> 00:42:24.970
There we go.

NOTE Confidence: 0.88235104

00:42:28.670 --> 00:42:36.760
OK. Expand this. OK, so. Nicole.

NOTE Confidence: 0.35944948

00:42:40.560 --> 00:42:42.350
Noticed um.

NOTE Confidence: 0.720182996

00:42:44.580 --> 00:42:48.260
A major problem here, um.

NOTE Confidence: 0.643744506666667

00:42:51.130 --> 00:42:55.260
The argument um. It.

NOTE Confidence: 0.783604893333333

00:42:57.940 --> 00:43:00.360
No, that's a parameter,

NOTE Confidence: 0.783604893333333

00:43:00.360 --> 00:43:06.490
the parameter. It. First um.

NOTE Confidence: 0.783604893333333

00:43:06.490 --> 00:43:11.758
Is a wrapped iterator with a.

NOTE Confidence: 0.783604893333333

00:43:11.760 --> 00:43:14.160
Parent. In the general case.

NOTE Confidence: 0.715655813333333

00:43:18.880 --> 00:43:22.720
Like a vector. Federator.

NOTE Confidence: 0.824853791666667

00:43:24.880 --> 00:43:30.130
But it. But the freshly constructed.

NOTE Confidence: 0.824853791666667

00:43:30.130 --> 00:43:33.574
Let's say let's be proper and say

NOTE Confidence: 0.824853791666667

00:43:33.574 --> 00:43:35.778
value initialized. Um, it last.

NOTE Confidence: 0.71922744

00:43:38.420 --> 00:43:41.428
Um has no parent.

NOTE Confidence: 0.40784799

00:43:43.840 --> 00:43:47.650
Uh. Therefore um.

NOTE Confidence: 0.706918278

00:43:49.660 --> 00:43:52.068
Calling um, seek wrapped.

NOTE Confidence: 0.706918278

00:43:52.068 --> 00:43:55.680
I just copy this whole thing.

NOTE Confidence: 0.7618742

00:43:58.920 --> 00:44:00.100
There's no there for yet,

NOTE Confidence: 0.7618742

00:44:00.100 --> 00:44:03.130
ccrap last. You've moved you last.

NOTE Confidence: 0.911901791428572

00:44:06.260 --> 00:44:09.830
Doesn't have any parent information

NOTE Confidence: 0.911901791428572

00:44:09.830 --> 00:44:16.698
to add. Um. Causeway you last is

NOTE Confidence: 0.911901791428572

00:44:16.698 --> 00:44:21.150
a raw pointer. When unwrapped.

NOTE Confidence: 0.7419251

00:44:23.220 --> 00:44:24.375
For example, not saying it's

NOTE Confidence: 0.7419251

00:44:24.375 --> 00:44:25.810
a raw pointer all the time.

NOTE Confidence: 0.7419251

00:44:25.810 --> 00:44:28.202
Just provide an example.

NOTE Confidence: 0.7419251

00:44:28.202 --> 00:44:31.880
Um, so we end up.

NOTE Confidence: 0.7419251

00:44:31.880 --> 00:44:36.101
Returning um incompatible.

NOTE Confidence: 0.7419251

00:44:36.101 --> 00:44:37.508
Iterators.

NOTE Confidence: 0.91776075

00:44:40.030 --> 00:44:40.980
Let's see.

NOTE Confidence: 0.717084138

00:44:49.000 --> 00:44:51.790
Going to provide credit here. Thanks, Nicole.

NOTE Confidence: 0.50449547

00:44:59.370 --> 00:45:01.296
And it's time for ask points.

NOTE Confidence: 0.768394036666667

00:45:04.510 --> 00:45:12.910
Yeah. And then. Can you see notes that the?

NOTE Confidence: 0.768394036666667

00:45:12.910 --> 00:45:19.170
Ranges instantiated or machinery used

NOTE Confidence: 0.768394036666667

00:45:19.170 --> 00:45:27.142
by our tests could have detected this,

NOTE Confidence: 0.768394036666667

00:45:27.142 --> 00:45:34.065
but currently. Doesn't have validation.

NOTE Confidence: 0.768394036666667

00:45:34.065 --> 00:45:39.318
Or. Matching parents the way

NOTE Confidence: 0.768394036666667

00:45:39.318 --> 00:45:43.795
that vector iterators do. Umm.

NOTE Confidence: 0.768394036666667

00:45:43.795 --> 00:45:47.920
Instead, the granges test machinery

NOTE Confidence: 0.768394036666667

00:45:47.920 --> 00:45:52.820
has its own test iterators.

NOTE Confidence: 0.768394036666667

00:45:52.820 --> 00:45:56.048
Is filing an issue?

NOTE Confidence: 0.768394036666667

00:45:56.048 --> 00:46:00.393
Um to add. Such coverage, um.

NOTE Confidence: 0.768394036666667

00:46:00.393 --> 00:46:06.459
So it doesn't need to be added in this PR.

NOTE Confidence: 0.895801949

00:46:08.550 --> 00:46:11.738
Casey explained that the

NOTE Confidence: 0.895801949

00:46:11.738 --> 00:46:16.520
proper way to fix this issue.

NOTE Confidence: 0.895801949

00:46:16.520 --> 00:46:17.810
Let me Scroll down. Oh no,

NOTE Confidence: 0.895801949

00:46:17.810 --> 00:46:18.668
that's not going to get me.

NOTE Confidence: 0.895801949

00:46:18.670 --> 00:46:21.610
That is to call.

NOTE Confidence: 0.60420342625

00:46:24.740 --> 00:46:27.575
Rewrap subrange. I'll verify I'm

NOTE Confidence: 0.60420342625

00:46:27.575 --> 00:46:32.139
not typing this, um as other

NOTE Confidence: 0.60420342625

00:46:32.139 --> 00:46:35.810
ranges algorithms do. Example.

NOTE Confidence: 0.7779541

00:46:38.260 --> 00:46:40.620
I mean, look at the example for context.

NOTE Confidence: 0.7779541

00:46:40.620 --> 00:46:43.614
Um. Yeah, so it's basically

NOTE Confidence: 0.7779541

00:46:43.614 --> 00:46:44.969
you provide a single iterator.

NOTE Confidence: 0.7779541

00:46:44.970 --> 00:46:46.770
I'm trying to describe it in human terms.

NOTE Confidence: 0.7779541

00:46:46.770 --> 00:46:49.409
Uh, for super wig, provide a parented

NOTE Confidence: 0.7779541

00:46:49.409 --> 00:46:52.215
iterator and an unwrapped sub range and

NOTE Confidence: 0.7779541

00:46:52.215 --> 00:46:55.000
it will make a wrapped subrange. OK.

NOTE Confidence: 0.772673339

00:46:59.110 --> 00:47:04.342
This is given a parented iterator

NOTE Confidence: 0.772673339

00:47:04.342 --> 00:47:08.500
and an unwrapped subrange. Which?

NOTE Confidence: 0.868435360769231

00:47:10.610 --> 00:47:15.522
Is simpler. Since we don't need to decompose

NOTE Confidence: 0.868435360769231

00:47:15.522 --> 00:47:22.483
it with a structured binding and returns a.

NOTE Confidence: 0.868435360769231

00:47:22.483 --> 00:47:25.726
Wrapped subbranch um.

NOTE Confidence: 0.868435360769231

00:47:25.730 --> 00:47:30.688
Occurs below in all. Algorithms.

NOTE Confidence: 0.868435360769231

00:47:30.688 --> 00:47:34.078
I'll grow them over this.

NOTE Confidence: 0.868435360769231

00:47:34.080 --> 00:47:37.818
OK awesome uh proofread uh Nicole uh,

NOTE Confidence: 0.868435360769231

00:47:37.820 --> 00:47:39.314
noticed major problem here that parameter

NOTE Confidence: 0.868435360769231

00:47:39.314 --> 00:47:41.158
it first is wrapped iterator with a parent

NOTE Confidence: 0.868435360769231

00:47:41.158 --> 00:47:43.059
in the general case like a vector iterator.

NOTE Confidence: 0.868435360769231

00:47:43.060 --> 00:47:44.775
But the freshly value initialized

NOTE Confidence: 0.868435360769231

00:47:44.775 --> 00:47:47.159
it last brace brace has no parent.

NOTE Confidence: 0.868435360769231

00:47:47.160 --> 00:47:48.924
Seacraft last you move stood move

NOTE Confidence: 0.868435360769231

00:47:48.924 --> 00:47:50.729
you last doesn't have any parent

NOTE Confidence: 0.868435360769231

00:47:50.729 --> 00:47:52.717
information to add because you last is

NOTE Confidence: 0.868435360769231

00:47:52.717 --> 00:47:54.929
our pointer when unwrapped for example.

NOTE Confidence: 0.868435360769231

00:47:54.930 --> 00:47:56.230
So we end up returning

NOTE Confidence: 0.868435360769231

00:47:56.230 --> 00:47:56.750
incompatible iterators.

NOTE Confidence: 0.868435360769231

00:47:56.750 --> 00:47:58.472
Thanks Nicole for finding this amazing

NOTE Confidence: 0.868435360769231

00:47:58.472 --> 00:48:00.798
issue that I totally missed on first glance.

NOTE Confidence: 0.868435360769231

00:48:00.800 --> 00:48:02.282
Casey notes that the range is

NOTE Confidence: 0.868435360769231

00:48:02.282 --> 00:48:03.546
instantiated machine are used by

NOTE Confidence: 0.868435360769231

00:48:03.546 --> 00:48:04.696
our tests could have detected.

NOTE Confidence: 0.868435360769231

00:48:04.700 --> 00:48:06.080
But currently does not have

NOTE Confidence: 0.868435360769231

00:48:06.080 --> 00:48:07.460
validation for matching parents the

NOTE Confidence: 0.868435360769231

00:48:07.510 --> 00:48:08.740
way the vector iterators do.

NOTE Confidence: 0.868435360769231

00:48:08.740 --> 00:48:08.959
Instead,

NOTE Confidence: 0.868435360769231

00:48:08.959 --> 00:48:10.054
the range is test machinery

NOTE Confidence: 0.868435360769231

00:48:10.054 --> 00:48:11.390
has its own test iterators.

NOTE Confidence: 0.868435360769231

00:48:11.390 --> 00:48:13.038
He's filing an issue to add such coverage,

NOTE Confidence: 0.868435360769231

00:48:13.040 --> 00:48:15.440
so it doesn't need to be added in this PR,

NOTE Confidence: 0.868435360769231

00:48:15.440 --> 00:48:16.952
Casey explained that the proper way

NOTE Confidence: 0.868435360769231

00:48:16.952 --> 00:48:19.093
to fix this issue is to call Rewrap

NOTE Confidence: 0.868435360769231

00:48:19.093 --> 00:48:20.719
subrange as other ranges algorithms do.

NOTE Confidence: 0.868435360769231

00:48:20.720 --> 00:48:21.596
Example.

NOTE Confidence: 0.868435360769231

00:48:21.596 --> 00:48:25.976
So call the unwrapped version

NOTE Confidence: 0.868435360769231

00:48:25.980 --> 00:48:27.540
that matches and then.

NOTE Confidence: 0.868435360769231

00:48:27.540 --> 00:48:29.490
We can just return here.

NOTE Confidence: 0.868435360769231

00:48:29.490 --> 00:48:31.308
So it would basically crunch these,

NOTE Confidence: 0.868435360769231

00:48:31.310 --> 00:48:31.717
uh,

NOTE Confidence: 0.868435360769231

00:48:31.717 --> 00:48:34.973
what is that 5 lines with wrapping ignore

NOTE Confidence: 0.868435360769231

00:48:34.973 --> 00:48:37.729
wrapping down to two ignoring wrapping,

NOTE Confidence: 0.868435360769231

00:48:37.730 --> 00:48:38.669
which is great.

NOTE Confidence: 0.868435360769231

00:48:38.669 --> 00:48:40.547
This is given a parented iterator

NOTE Confidence: 0.868435360769231

00:48:40.547 --> 00:48:42.277
and an unwrapped sub range,

NOTE Confidence: 0.868435360769231

00:48:42.280 --> 00:48:43.848
which is simpler since we don't need

NOTE Confidence: 0.868435360769231

00:48:43.848 --> 00:48:45.401
to decompose it with the structured

NOTE Confidence: 0.868435360769231

00:48:45.401 --> 00:48:47.069
binding and returns a ramped subrange.

NOTE Confidence: 0.868435360769231

00:48:47.070 --> 00:48:50.238
OK. Add or view comment excellent.

NOTE Confidence: 0.76883257

00:48:52.850 --> 00:48:55.010
OK, so, uh, going onwards.

NOTE Confidence: 0.76883257

00:48:55.010 --> 00:48:58.916
Uh, the rest should hopefully be um.

NOTE Confidence: 0.76883257

00:48:58.920 --> 00:48:59.841
Very systematic. Uh.

NOTE Confidence: 0.76883257

00:48:59.841 --> 00:49:01.990
We are looking at the find last

NOTE Confidence: 0.76883257

00:49:02.050 --> 00:49:03.877
for the one that takes a range.

NOTE Confidence: 0.76883257

00:49:03.880 --> 00:49:06.768
So template forward range R or range class

NOTE Confidence: 0.76883257

00:49:06.768 --> 00:49:09.593
TIE class PGA identity requires indirect

NOTE Confidence: 0.76883257

00:49:09.593 --> 00:49:12.635
binary predicate range equal to projected,

NOTE Confidence: 0.76883257

00:49:12.640 --> 00:49:14.350
the iterator type for the

NOTE Confidence: 0.76883257

00:49:14.350 --> 00:49:16.632
range and the prog consti star.

NOTE Confidence: 0.76883257

00:49:16.632 --> 00:49:19.824
We got the notice card on this

NOTE Confidence: 0.76883257

00:49:19.824 --> 00:49:23.010
one constexpr Bard subrange TR.

NOTE Confidence: 0.76883257

00:49:23.010 --> 00:49:25.118
Operator Renren take range

NOTE Confidence: 0.76883257

00:49:25.118 --> 00:49:27.226
ref ref range constant,

NOTE Confidence: 0.76883257

00:49:27.230 --> 00:49:30.541
high ref value J rod is brace

NOTE Confidence: 0.76883257

00:49:30.541 --> 00:49:33.169
brace constant on the object.

NOTE Confidence: 0.76883257

00:49:33.170 --> 00:49:35.366
OK, so going to be doing.

NOTE Confidence: 0.76883257

00:49:35.370 --> 00:49:37.010
I'm going to ignore all the wrapping stuff.

NOTE Confidence: 0.76883257

00:49:37.010 --> 00:49:40.890
Now we get ranges begin from the range.

NOTE Confidence: 0.76883257

00:49:40.890 --> 00:49:42.978
And that's auto. First we're going

NOTE Confidence: 0.76883257

00:49:42.978 --> 00:49:46.870
to call the unchecked helper with.

NOTE Confidence: 0.76883257

00:49:46.870 --> 00:49:49.430
Unwrap range hitter for the

NOTE Confidence: 0.76883257

00:49:49.430 --> 00:49:51.990
range stood move you first.

NOTE Confidence: 0.76883257

00:49:51.990 --> 00:49:53.550
This is uh, it's not.

NOTE Confidence: 0.76883257

00:49:53.550 --> 00:49:55.870
Obviously not new, but um,

NOTE Confidence: 0.76883257

00:49:55.870 --> 00:49:58.006
I don't remember what this does.

NOTE Confidence: 0.76883257

00:49:58.010 --> 00:50:01.006
I've got tons of usage of it.

NOTE Confidence: 0.76883257

00:50:01.010 --> 00:50:02.634
OK, so you give it a range,

NOTE Confidence: 0.76883257

00:50:02.640 --> 00:50:05.216
you give it the original range type.

NOTE Confidence: 0.76883257

00:50:05.220 --> 00:50:07.800
And.

NOTE Confidence: 0.76883257

00:50:07.800 --> 00:50:09.128
Why is this special?

NOTE Confidence: 0.753793558571429

00:50:13.930 --> 00:50:17.185
Ohh because it passes the Sentinel type.

NOTE Confidence: 0.753793558571429

00:50:17.190 --> 00:50:18.970
OK, because the unwrap thing.

NOTE Confidence: 0.753793558571429

00:50:18.970 --> 00:50:20.594
As I mentioned earlier,

NOTE Confidence: 0.753793558571429

00:50:20.594 --> 00:50:23.430
the unwrap ITER requires the Sentinel type.

NOTE Confidence: 0.753793558571429

00:50:23.430 --> 00:50:26.184
But it would be annoying to have to say

NOTE Confidence: 0.753793558571429

00:50:26.190 --> 00:50:28.574
Sentinel T range all the time when we

NOTE Confidence: 0.753793558571429

00:50:28.574 --> 00:50:31.033
just could just say range by itself. OK.

NOTE Confidence: 0.753793558571429

00:50:31.033 --> 00:50:32.977
And we check that the thing that we're

NOTE Confidence: 0.753793558571429

00:50:32.977 --> 00:50:35.153
giving it is the iterator type for the range.

NOTE Confidence: 0.753793558571429

00:50:35.160 --> 00:50:36.544
So there's a bit of validation in addition

NOTE Confidence: 0.753793558571429

00:50:36.544 --> 00:50:38.099
to the convenience of grabbing Sentinel.

NOTE Confidence: 0.753793558571429

00:50:38.100 --> 00:50:39.820
So that's what this is doing. OK.

NOTE Confidence: 0.698711404

00:50:42.400 --> 00:50:44.096
Uh, so we unwrap.

NOTE Confidence: 0.698711404

00:50:44.096 --> 00:50:45.724
Uh, move stood move first.

NOTE Confidence: 0.698711404

00:50:45.724 --> 00:50:47.400
It's not constant. It's good.

NOTE Confidence: 0.698711404

00:50:47.400 --> 00:50:50.095
Past the unchecked end for the range,

NOTE Confidence: 0.698711404

00:50:50.100 --> 00:50:52.080
give the value constant ref,

NOTE Confidence: 0.698711404

00:50:52.080 --> 00:50:53.496
pass the projection.

NOTE Confidence: 0.698711404

00:50:53.496 --> 00:50:55.856
Then we won't decompose this.

NOTE Confidence: 0.698711404

00:50:55.860 --> 00:50:58.652
We'll use the Rewrap subrange, excuse me.

NOTE Confidence: 0.698711404

00:50:58.652 --> 00:51:00.365
And then return it. Good.

NOTE Confidence: 0.698711404

00:51:00.365 --> 00:51:04.590
OK, private helper template iterator,

NOTE Confidence: 0.698711404

00:51:04.590 --> 00:51:06.342
Sentinel, Ty PJ.

NOTE Confidence: 0.698711404

00:51:06.342 --> 00:51:07.510
Notice guard.

NOTE Confidence: 0.698711404

00:51:07.510 --> 00:51:09.838
This is static because it doesn't

NOTE Confidence: 0.698711404

00:51:09.838 --> 00:51:12.770
need anything from the class. Uh,

NOTE Confidence: 0.698711404

00:51:12.770 --> 00:51:16.910
Constexpr helper returning subrange of it.

NOTE Confidence: 0.698711404

00:51:16.910 --> 00:51:19.990
Uh this is the unchecked.

NOTE Confidence: 0.698711404

00:51:19.990 --> 00:51:21.154
I said Ohh there because I'm

NOTE Confidence: 0.698711404

00:51:21.154 --> 00:51:22.449
like what are we looking at?

NOTE Confidence: 0.698711404

00:51:22.450 --> 00:51:25.426
This is the unchecked algorithm helper.

NOTE Confidence: 0.698711404

00:51:25.430 --> 00:51:27.810
So it here is unchecked.

NOTE Confidence: 0.698711404

00:51:27.810 --> 00:51:28.990
So it's a returning a

NOTE Confidence: 0.698711404

00:51:28.990 --> 00:51:29.934
sub range of unchecked.

NOTE Confidence: 0.803857742727273

00:51:32.050 --> 00:51:34.090
It makes me mildly nervous

NOTE Confidence: 0.803857742727273

00:51:34.090 --> 00:51:36.660
to use the same type here.

NOTE Confidence: 0.803857742727273

00:51:36.660 --> 00:51:38.140
I think this is entirely

NOTE Confidence: 0.803857742727273

00:51:38.140 --> 00:51:39.028
consistent with precedent.

NOTE Confidence: 0.803857742727273

00:51:39.030 --> 00:51:42.495
So the principle that I prefer to

NOTE Confidence: 0.803857742727273

00:51:42.495 --> 00:51:45.230
follow is same names for same things,

NOTE Confidence: 0.803857742727273

00:51:45.230 --> 00:51:47.170
different names for different things.

NOTE Confidence: 0.803857742727273

00:51:47.170 --> 00:51:49.865
Because the way I always explain it,

NOTE Confidence: 0.803857742727273

00:51:49.870 --> 00:51:51.052
in templated code,

NOTE Confidence: 0.803857742727273

00:51:51.052 --> 00:51:53.810
we kind of have no type system.

NOTE Confidence: 0.803857742727273

00:51:53.810 --> 00:51:55.190
This is not entirely true

NOTE Confidence: 0.803857742727273

00:51:55.190 --> 00:51:56.570
now that we have concepts.

NOTE Confidence: 0.803857742727273

00:51:56.570 --> 00:52:01.106
So concepts provide a type system over types.

NOTE Confidence: 0.803857742727273

00:52:01.110 --> 00:52:03.798
But. Not to the level that you know

NOTE Confidence: 0.803857742727273

00:52:03.798 --> 00:52:05.979
actual type serve for variables.

NOTE Confidence: 0.803857742727273

00:52:05.980 --> 00:52:08.030
Um, and especially when you're

NOTE Confidence: 0.803857742727273

00:52:08.030 --> 00:52:09.670
just rewriting helper wrappers

NOTE Confidence: 0.803857742727273

00:52:09.670 --> 00:52:11.826
that aren't incredibly concept

NOTE Confidence: 0.803857742727273

00:52:11.826 --> 00:52:14.438
constrained or static asserted.

NOTE Confidence: 0.803857742727273

00:52:14.440 --> 00:52:15.770
You can just type anything.

NOTE Confidence: 0.803857742727273

00:52:15.770 --> 00:52:17.194
Like you can give things a name and

NOTE Confidence: 0.803857742727273

00:52:17.194 --> 00:52:18.500
then pass it to some other thing,

NOTE Confidence: 0.803857742727273

00:52:18.500 --> 00:52:22.108
and then that name of that type parameter.

NOTE Confidence: 0.803857742727273

00:52:22.110 --> 00:52:24.180
That template type template type

NOTE Confidence: 0.803857742727273

00:52:24.180 --> 00:52:26.636
parameter is sort of all that

NOTE Confidence: 0.803857742727273

00:52:26.636 --> 00:52:28.820
is telling you what it does and

NOTE Confidence: 0.803857742727273

00:52:28.820 --> 00:52:31.117
how to use it and mismatches.

NOTE Confidence: 0.803857742727273

00:52:31.120 --> 00:52:32.484
Yeah, maybe they'll cause.

NOTE Confidence: 0.803857742727273

00:52:32.484 --> 00:52:33.166
Tyler errors,

NOTE Confidence: 0.803857742727273

00:52:33.170 --> 00:52:36.308
but without you know definition checking.

NOTE Confidence: 0.803857742727273

00:52:36.310 --> 00:52:36.685
Um,

NOTE Confidence: 0.803857742727273

00:52:36.685 --> 00:52:39.310
if you are passing around like an

NOTE Confidence: 0.803857742727273

00:52:39.310 --> 00:52:41.290
unchecked type or checked type,

NOTE Confidence: 0.803857742727273

00:52:41.290 --> 00:52:42.850
and then you pass it to something where

NOTE Confidence: 0.803857742727273

00:52:42.850 --> 00:52:44.468
the name suggests that it's unchecked,

NOTE Confidence: 0.803857742727273

00:52:44.470 --> 00:52:44.745
well,

NOTE Confidence: 0.803857742727273

00:52:44.745 --> 00:52:46.120
you get confused about what

NOTE Confidence: 0.803857742727273

00:52:46.120 --> 00:52:46.945
you're looking at.

NOTE Confidence: 0.803857742727273

00:52:46.950 --> 00:52:48.539
Just the other day and we found

NOTE Confidence: 0.803857742727273

00:52:48.539 --> 00:52:50.142
a bug where we were sending

NOTE Confidence: 0.803857742727273

00:52:50.142 --> 00:52:51.882
the wrong type to some helper

NOTE Confidence: 0.803857742727273

00:52:51.882 --> 00:52:53.573
machinery where we were sending a

NOTE Confidence: 0.803857742727273

00:52:53.573 --> 00:52:55.189
wrapped type which could be like

NOTE Confidence: 0.803857742727273

00:52:55.189 --> 00:52:56.803
a vector iterator instead of an

NOTE Confidence: 0.803857742727273

00:52:56.803 --> 00:52:58.330
unwrapped type like a raw pointer,

NOTE Confidence: 0.803857742727273

00:52:58.330 --> 00:53:00.280
and then that caused some

NOTE Confidence: 0.803857742727273

00:53:00.280 --> 00:53:02.230
optimization code to not activate.

NOTE Confidence: 0.803857742727273

00:53:02.230 --> 00:53:02.618
Properly.

NOTE Confidence: 0.803857742727273

00:53:02.618 --> 00:53:03.006
Um.

NOTE Confidence: 0.803857742727273

00:53:03.006 --> 00:53:05.334
So it helps when writing heavily

NOTE Confidence: 0.803857742727273

00:53:05.334 --> 00:53:08.088
template code to be extremely disciplined

NOTE Confidence: 0.803857742727273

00:53:08.088 --> 00:53:09.996
about having descriptive names.

NOTE Confidence: 0.803857742727273

00:53:10.000 --> 00:53:12.280
And then if you change the nature of

NOTE Confidence: 0.803857742727273

00:53:12.280 --> 00:53:14.866
a thing like unwrapping or adding a

NOTE Confidence: 0.803857742727273

00:53:14.866 --> 00:53:17.659
pointer to something or changing to unsigned,

NOTE Confidence: 0.803857742727273

00:53:17.660 --> 00:53:17.988
or.

NOTE Confidence: 0.803857742727273

00:53:17.988 --> 00:53:19.956
All these transformations we can do

NOTE Confidence: 0.803857742727273

00:53:19.960 --> 00:53:22.360
at each layer of templated machinery,

NOTE Confidence: 0.803857742727273

00:53:22.360 --> 00:53:23.842
change the name that's being used

NOTE Confidence: 0.803857742727273

00:53:23.842 --> 00:53:25.910
if you know it's always going to be

NOTE Confidence: 0.803857742727273

00:53:25.910 --> 00:53:27.452
like the unchecked version or the

NOTE Confidence: 0.803857742727273

00:53:27.502 --> 00:53:29.476
unsigned version or something like that.

NOTE Confidence: 0.803857742727273

00:53:29.480 --> 00:53:31.244
Here, I'm a little bit uncomfortable

NOTE Confidence: 0.803857742727273

00:53:31.244 --> 00:53:32.420
in going on this.

NOTE Confidence: 0.803857742727273

00:53:32.420 --> 00:53:33.200
Side um.

NOTE Confidence: 0.803857742727273

00:53:33.200 --> 00:53:35.930
Cause we've got a wrapped iterator being

NOTE Confidence: 0.803857742727273

00:53:35.930 --> 00:53:40.144
passed to the user algorithm, we unwrap it.

NOTE Confidence: 0.803857742727273

00:53:40.144 --> 00:53:40.882
And.

NOTE Confidence: 0.803857742727273

00:53:40.882 --> 00:53:43.760
In this helper overload here,

NOTE Confidence: 0.803857742727273

00:53:43.760 --> 00:53:45.740
this helper algorithm not an overload.

NOTE Confidence: 0.803857742727273

00:53:45.740 --> 00:53:46.072
Um,

NOTE Confidence: 0.803857742727273

00:53:46.072 --> 00:53:48.396
instead of being named something like you,

NOTE Confidence: 0.803857742727273

00:53:48.400 --> 00:53:49.920
it which would signal, hey,

NOTE Confidence: 0.803857742727273

00:53:49.920 --> 00:53:50.980
this is the unwrapped iterator.

NOTE Confidence: 0.803857742727273

00:53:50.980 --> 00:53:53.716
It's just named it so it's reusing the name.

NOTE Confidence: 0.803857742727273

00:53:53.720 --> 00:53:55.495
But for something that is

NOTE Confidence: 0.803857742727273

00:53:55.495 --> 00:53:57.270
different makes me mildly nervous.

NOTE Confidence: 0.803857742727273

00:53:57.270 --> 00:53:58.082
Now, it's not incorrect,

NOTE Confidence: 0.803857742727273

00:53:58.082 --> 00:53:59.300
and I think it is actually

NOTE Confidence: 0.803857742727273

00:53:59.343 --> 00:54:00.300
consistent with Preston,

NOTE Confidence: 0.803857742727273

00:54:00.300 --> 00:54:01.748
so I'm not going to request changes here,

NOTE Confidence: 0.803857742727273

00:54:01.750 --> 00:54:04.498
I'm just going to double check.

NOTE Confidence: 0.803857742727273

00:54:04.500 --> 00:54:07.332
But it's pretty conventional.

NOTE Confidence: 0.803857742727273

00:54:07.332 --> 00:54:08.040
Yeah.

NOTE Confidence: 0.803857742727273

00:54:08.040 --> 00:54:09.699
Ideally I'd like to change the Convention,

NOTE Confidence: 0.803857742727273

00:54:09.700 --> 00:54:11.303
but I certainly don't think we would

NOTE Confidence: 0.803857742727273

00:54:11.303 --> 00:54:12.760
want to change this in this PR.

NOTE Confidence: 0.803857742727273

00:54:12.760 --> 00:54:14.200
And it's probably not even I'm.

NOTE Confidence: 0.803857742727273

00:54:14.200 --> 00:54:16.416
I'm just nervous because I've seen it occur.

NOTE Confidence: 0.803857742727273

00:54:16.420 --> 00:54:17.112
And The thing is,

NOTE Confidence: 0.803857742727273

00:54:17.112 --> 00:54:18.769
is the sort of thing that you can get

NOTE Confidence: 0.803857742727273

00:54:18.769 --> 00:54:20.099
away with like almost all the time.

NOTE Confidence: 0.803857742727273

00:54:20.100 --> 00:54:22.220
Every once in a while it gets you.

NOTE Confidence: 0.793190944

00:54:22.220 --> 00:54:25.316
So I worry about it because I try to

NOTE Confidence: 0.793190944

00:54:25.316 --> 00:54:26.980
make code as defragged free as possible.

NOTE Confidence: 0.793190944

00:54:26.980 --> 00:54:28.700
So like, here's an example,

NOTE Confidence: 0.793190944

00:54:28.700 --> 00:54:30.260
the search engine size thing

NOTE Confidence: 0.793190944

00:54:30.260 --> 00:54:32.330
that we look for the rewrap.

NOTE Confidence: 0.793190944

00:54:32.330 --> 00:54:34.955
And yeah, this is just given it.

NOTE Confidence: 0.793190944

00:54:34.960 --> 00:54:38.293
Even though it in general is unchecked

NOTE Confidence: 0.793190944

00:54:38.293 --> 00:54:40.808
O OK consistent with precedent.

NOTE Confidence: 0.793190944

00:54:40.810 --> 00:54:41.895
I wish the precedent were

NOTE Confidence: 0.793190944

00:54:41.895 --> 00:54:42.763
a little bit different,

NOTE Confidence: 0.793190944

00:54:42.770 --> 00:54:44.460
but it is certainly not

NOTE Confidence: 0.793190944

00:54:44.460 --> 00:54:45.474
worth commenting here.

NOTE Confidence: 0.565931311764706

00:54:47.700 --> 00:54:50.514
OK. O template on unwrapped iterator

NOTE Confidence: 0.565931311764706

00:54:50.514 --> 00:54:54.052
CTI PJ notice card static on the

NOTE Confidence: 0.565931311764706

00:54:54.052 --> 00:54:56.148
object constexpr subrange it.

NOTE Confidence: 0.565931311764706

00:54:56.150 --> 00:54:57.270
This is the unwrapped version.

NOTE Confidence: 0.565931311764706

00:54:57.270 --> 00:54:59.150
Fine. Last unchecked it first.

NOTE Confidence: 0.565931311764706

00:54:59.150 --> 00:55:00.734
See last constar value PJ project

NOTE Confidence: 0.565931311764706

00:55:00.734 --> 00:55:02.394
it's static so it doesn't need

NOTE Confidence: 0.565931311764706

00:55:02.394 --> 00:55:04.026
to be constant and cannot be.

NOTE Confidence: 0.565931311764706

00:55:04.030 --> 00:55:06.574
In fact, this doesn't need to be concept

NOTE Confidence: 0.565931311764706

00:55:06.574 --> 00:55:08.267
constrained because it's just a helper.

NOTE Confidence: 0.565931311764706

00:55:08.270 --> 00:55:10.782
But we do static cert that all the

NOTE Confidence: 0.565931311764706

00:55:10.782 --> 00:55:13.450
concepts we expect hold in test machinery.

NOTE Confidence: 0.565931311764706

00:55:13.450 --> 00:55:16.050
STL internal Static Cert expands only to.

NOTE Confidence: 0.565931311764706

00:55:16.050 --> 00:55:18.031
Static assert in our tests that we're

NOTE Confidence: 0.565931311764706

00:55:18.031 --> 00:55:19.870
dealing with a forward iterator,

NOTE Confidence: 0.565931311764706

00:55:19.870 --> 00:55:21.368
that C is a Sentinel for it,

NOTE Confidence: 0.565931311764706

00:55:21.370 --> 00:55:23.236
and then we've got the indirect

NOTE Confidence: 0.565931311764706

00:55:23.236 --> 00:55:24.169
binary predicate thing.

NOTE Confidence: 0.565931311764706

00:55:24.170 --> 00:55:26.970
Um.

NOTE Confidence: 0.565931311764706

00:55:26.970 --> 00:55:29.490
Thing that I'm thinking about is for

NOTE Confidence: 0.565931311764706

00:55:29.490 --> 00:55:32.447
the equal 2 do we say range is double

NOTE Confidence: 0.565931311764706

00:55:32.447 --> 00:55:35.448
colon or do we use the capital ranges?

NOTE Confidence: 0.565931311764706

00:55:35.450 --> 00:55:37.326
I don't want to look at Navas.

NOTE Confidence: 0.778697528666667

00:55:42.360 --> 00:55:45.024
UH-4 the names of the parameter we do

NOTE Confidence: 0.778697528666667

00:55:45.024 --> 00:55:47.719
just say lane range is double colon.

NOTE Confidence: 0.778697528666667

00:55:47.720 --> 00:55:49.440
For function calls we say

NOTE Confidence: 0.778697528666667

00:55:49.440 --> 00:55:50.816
under score capital ranges,

NOTE Confidence: 0.778697528666667

00:55:50.820 --> 00:55:52.668
but here this is an unambiguous.

NOTE Confidence: 0.832848786666667

00:55:55.300 --> 00:55:59.538
OK, that's fine. Is it ranges corn

NOTE Confidence: 0.832848786666667

00:55:59.538 --> 00:56:03.340
corn equal to and not just two?

NOTE Confidence: 0.832848786666667

00:56:03.340 --> 00:56:06.098
Uh, correct it is ranges double colon

NOTE Confidence: 0.832848786666667

00:56:06.098 --> 00:56:10.220
equal to um, because that one is uh,

NOTE Confidence: 0.832848786666667

00:56:10.220 --> 00:56:11.543
it's not templated.

NOTE Confidence: 0.832848786666667

00:56:11.543 --> 00:56:14.630
The classic equal to does have template

NOTE Confidence: 0.832848786666667

00:56:14.711 --> 00:56:17.360
arguments, even though you can give

NOTE Confidence: 0.832848786666667

00:56:17.360 --> 00:56:19.720
it the diamond my diamond that.

NOTE Confidence: 0.832848786666667

00:56:19.720 --> 00:56:21.328
Makes its function call operator templated,

NOTE Confidence: 0.832848786666667

00:56:21.330 --> 00:56:23.031
but the ranges version of the predicate

NOTE Confidence: 0.832848786666667

00:56:23.031 --> 00:56:24.980
is sort of the way the predicate

NOTE Confidence: 0.832848786666667

00:56:24.980 --> 00:56:26.440
should have always been defined.

NOTE Confidence: 0.832848786666667

00:56:26.440 --> 00:56:29.104
They've got that transparent

NOTE Confidence: 0.832848786666667

00:56:29.104 --> 00:56:31.768
functionality baked into them,

NOTE Confidence: 0.832848786666667

00:56:31.770 --> 00:56:33.345
so that's why this uses the range of thing.

NOTE Confidence: 0.832848786666667

00:56:33.350 --> 00:56:34.848
I think they might do something else.

NOTE Confidence: 0.832848786666667

00:56:34.850 --> 00:56:36.565
Did they have some other fancy machinery

NOTE Confidence: 0.832848786666667

00:56:36.565 --> 00:56:38.080
that the classic one doesn't have?

NOTE Confidence: 0.832848786666667

00:56:38.080 --> 00:56:41.730
Actually don't know. Let's check.

NOTE Confidence: 0.832848786666667

00:56:41.730 --> 00:56:44.640
Same thing? I think so.

NOTE Confidence: 0.832848786666667

00:56:44.640 --> 00:56:46.885
They have concept constraints instead

NOTE Confidence: 0.832848786666667

00:56:46.885 --> 00:56:49.130
of return types feeding constraints,

NOTE Confidence: 0.832848786666667

00:56:49.130 --> 00:56:51.956
but no, they're not that much.

NOTE Confidence: 0.832848786666667

00:56:51.960 --> 00:56:53.695
OK. Uh, what was that, Nicole,

NOTE Confidence: 0.832848786666667

00:56:53.695 --> 00:56:55.670
you you were saying something?

NOTE Confidence: 0.832848786666667

00:56:55.670 --> 00:57:00.210
Does ranges last do the?

NOTE Confidence: 0.832848786666667

00:57:00.210 --> 00:57:03.360
Great thing with pointers that like.

NOTE Confidence: 0.832848786666667

00:57:03.360 --> 00:57:05.558
Ohh yeah yeah four non flat memory

NOTE Confidence: 0.832848786666667

00:57:05.558 --> 00:57:07.969
yeah I think yeah I think that

NOTE Confidence: 0.832848786666667

00:57:07.969 --> 00:57:09.714
is specified in the standard.

NOTE Confidence: 0.832848786666667

00:57:09.720 --> 00:57:12.002
Not that it makes a difference for

NOTE Confidence: 0.832848786666667

00:57:12.002 --> 00:57:14.025
replication month of my life figuring

NOTE Confidence: 0.832848786666667

00:57:14.025 --> 00:57:16.168
out how to write the standard's to

NOTE Confidence: 0.832848786666667

00:57:16.168 --> 00:57:17.736
make sure that all of the ranges,

NOTE Confidence: 0.832848786666667

00:57:17.740 --> 00:57:20.050
ordering functions and all this stood

NOTE Confidence: 0.832848786666667

00:57:20.050 --> 00:57:22.297
ordering functions did the same thing

NOTE Confidence: 0.832848786666667

00:57:22.297 --> 00:57:24.211
with pointers and that they all

NOTE Confidence: 0.832848786666667

00:57:24.211 --> 00:57:26.337
observed a consistent ordering and

NOTE Confidence: 0.832848786666667

00:57:26.337 --> 00:57:28.276
I still didn't get it quite right.

NOTE Confidence: 0.832848786666667

00:57:28.280 --> 00:57:30.288
And Gaspar,

NOTE Confidence: 0.832848786666667

00:57:30.288 --> 00:57:33.300
Ashman and W.

NOTE Confidence: 0.832848786666667

00:57:33.300 --> 00:57:35.364
821 had to fix one last plug in.

NOTE Confidence: 0.832848786666667

00:57:35.370 --> 00:57:38.793
The wording is dead last void do

NOTE Confidence: 0.832848786666667

00:57:38.793 --> 00:57:40.260
the right thing?

NOTE Confidence: 0.832848786666667

00:57:40.260 --> 00:57:42.102
Because I feel like I heard

NOTE Confidence: 0.832848786666667

00:57:42.102 --> 00:57:43.686
something about how studless void

NOTE Confidence: 0.832848786666667

00:57:43.686 --> 00:57:45.462
doesn't impose a strict order or

NOTE Confidence: 0.832848786666667

00:57:45.462 --> 00:57:47.069
a total ordering on pointers.

NOTE Confidence: 0.661523045

00:57:49.900 --> 00:57:53.516
The issue. I'm sorry, what was that Casey,

NOTE Confidence: 0.661523045

00:57:53.520 --> 00:57:54.680
I was talking over you.

NOTE Confidence: 0.661523045

00:57:54.680 --> 00:57:56.346
It does now do the correct thing.

NOTE Confidence: 0.661523045

00:57:56.350 --> 00:57:59.094
Yes it does. OK, what's funny is that

NOTE Confidence: 0.661523045

00:57:59.094 --> 00:58:02.023
violates my my original design for the

NOTE Confidence: 0.661523045

00:58:02.023 --> 00:58:04.645
diamonds because the philosophy for the

NOTE Confidence: 0.661523045

00:58:04.645 --> 00:58:07.291
diamonds was you get what operator less

NOTE Confidence: 0.661523045

00:58:07.291 --> 00:58:11.098
than gives you no extra intelligence.

NOTE Confidence: 0.661523045

00:58:11.100 --> 00:58:12.050
And I was like, OK,

NOTE Confidence: 0.661523045

00:58:12.050 --> 00:58:14.186
well if you say let's diamond for pointers

NOTE Confidence: 0.661523045

00:58:14.186 --> 00:58:16.139
you're going to get what you you deserve.

NOTE Confidence: 0.661523045

00:58:16.140 --> 00:58:17.544
But I guess they went in

NOTE Confidence: 0.661523045

00:58:17.544 --> 00:58:18.480
and enhanced it anyways.

NOTE Confidence: 0.661523045

00:58:18.480 --> 00:58:20.181
So I guess that's fine it again

NOTE Confidence: 0.661523045

00:58:20.181 --> 00:58:21.840
it doesn't make a difference for.

NOTE Confidence: 0.661523045

00:58:21.840 --> 00:58:22.938
Our implementation.

NOTE Confidence: 0.661523045

00:58:22.938 --> 00:58:25.683
Are there actually any actual

NOTE Confidence: 0.661523045

00:58:25.683 --> 00:58:28.280
implementations of C + + 14 for?

NOTE Confidence: 0.687771901428571

00:58:31.030 --> 00:58:32.776
For my architecture.

NOTE Confidence: 0.687771901428571

00:58:32.776 --> 00:58:35.104
I don't believe so.

NOTE Confidence: 0.687771901428571

00:58:35.110 --> 00:58:37.870
Um, uh, in fact, uh,

NOTE Confidence: 0.687771901428571

00:58:37.870 --> 00:58:39.736
I think I could be wrong.

NOTE Confidence: 0.687771901428571

00:58:39.740 --> 00:58:41.459
I think all good news systems say that hey,

NOTE Confidence: 0.687771901428571

00:58:41.460 --> 00:58:43.716
we just expect flat 32 bit spaces are

NOTE Confidence: 0.687771901428571

00:58:43.716 --> 00:58:45.863
larger and that would be the systems

NOTE Confidence: 0.687771901428571

00:58:45.863 --> 00:58:47.786
where you would expect the segmented

NOTE Confidence: 0.687771901428571

00:58:47.786 --> 00:58:50.124
to possibly be an issue because they

NOTE Confidence: 0.687771901428571

00:58:50.124 --> 00:58:52.904
cover such diverse family of computers.

NOTE Confidence: 0.687771901428571

00:58:52.904 --> 00:58:55.534
Certainly for no window systems,

NOTE Confidence: 0.687771901428571

00:58:55.540 --> 00:58:56.580
windows is like, yeah,

NOTE Confidence: 0.687771901428571

00:58:56.580 --> 00:58:58.540
everything is going to be flat memory.

NOTE Confidence: 0.687771901428571

00:58:58.540 --> 00:59:01.308
There has been some talk of keeping around

NOTE Confidence: 0.687771901428571

00:59:01.308 --> 00:59:03.870
all that, oh, we could handle segmented.

NOTE Confidence: 0.687771901428571

00:59:03.870 --> 00:59:04.998
Memory pointers,

NOTE Confidence: 0.687771901428571

00:59:04.998 --> 00:59:08.211
things like that for future architectures

NOTE Confidence: 0.687771901428571

00:59:08.211 --> 00:59:11.700
where maybe your address space is 128 bit,

NOTE Confidence: 0.687771901428571

00:59:11.700 --> 00:59:13.989
but the 1st 64 bit tells you like you know,

NOTE Confidence: 0.687771901428571

00:59:13.990 --> 00:59:16.190
what kind of storage you're in or whatever.

NOTE Confidence: 0.687771901428571

00:59:16.190 --> 00:59:17.849
That's why they've kept that language around.

NOTE Confidence: 0.687771901428571

00:59:17.850 --> 00:59:20.125
My understanding, but I don't

NOTE Confidence: 0.687771901428571

00:59:20.125 --> 00:59:22.790
think it's actually a concern for.

NOTE Confidence: 0.687771901428571

00:59:22.790 --> 00:59:23.720
Any real systems?

NOTE Confidence: 0.687771901428571

00:59:23.720 --> 00:59:25.270
I forget what Constexpr does.

NOTE Confidence: 0.687771901428571

00:59:25.270 --> 00:59:27.000
If Constexpr lets you compare

NOTE Confidence: 0.687771901428571

00:59:27.000 --> 00:59:28.384
the addresses of things,

NOTE Confidence: 0.687771901428571

00:59:28.390 --> 00:59:29.454
I think it doesn't.

NOTE Confidence: 0.687771901428571

00:59:29.454 --> 00:59:31.050
Right now they have to exist

NOTE Confidence: 0.687771901428571

00:59:31.114 --> 00:59:32.170
at the same memory.

NOTE Confidence: 0.687771901428571

00:59:32.170 --> 00:59:34.018
If you try to compare addresses

NOTE Confidence: 0.687771901428571

00:59:34.018 --> 00:59:36.105
of unrelated things, it says whoa,

NOTE Confidence: 0.687771901428571

00:59:36.105 --> 00:59:38.800
I can't do this because it's unspecified.

NOTE Confidence: 0.687771901428571

00:59:38.800 --> 00:59:41.056
So in practice, it's the there's.

NOTE Confidence: 0.687771901428571

00:59:41.060 --> 00:59:43.188
There's no no work needed from implementers.

NOTE Confidence: 0.87432817

00:59:45.960 --> 00:59:47.850
Uh, OK. So returning from the

NOTE Confidence: 0.87432817

00:59:47.850 --> 00:59:50.300
land of comparisons, uh equal to

NOTE Confidence: 0.87432817

00:59:50.300 --> 00:59:52.800
projected iterator T range project,

NOTE Confidence: 0.87432817

00:59:52.800 --> 00:59:56.552
we looked at the signature. OK, const.

NOTE Confidence: 0.87432817

00:59:56.552 --> 00:59:59.432
Umm. And then we grab ranges.

NOTE Confidence: 0.87432817

00:59:59.432 --> 01:00:01.036
Begin first, find lesson checked,

NOTE Confidence: 0.87432817

01:00:01.036 --> 01:00:02.384
unwrap. OK, I looked at this.

NOTE Confidence: 0.87432817

01:00:02.384 --> 01:00:04.410
Ohh wait no I was I was down in

NOTE Confidence: 0.87432817

01:00:04.410 --> 01:00:06.560
fine last unchecked. Here we go. OK.

NOTE Confidence: 0.8223642

01:00:08.590 --> 01:00:09.830
My brain is now resuming.

NOTE Confidence: 0.8223642

01:00:09.830 --> 01:00:11.635
Uh, indirect binary predicate range

NOTE Confidence: 0.8223642

01:00:11.635 --> 01:00:14.115
is equal to projected at PJ star.

NOTE Confidence: 0.8223642

01:00:14.115 --> 01:00:17.995
OK, so here is where we see the.

NOTE Confidence: 0.8223642

01:00:18.000 --> 01:00:19.636
Multiple implementations of the

NOTE Confidence: 0.8223642

01:00:19.636 --> 01:00:22.090
algorithm that I originally talked about.

NOTE Confidence: 0.8223642

01:00:22.090 --> 01:00:24.510
So this says if constexpr,

NOTE Confidence: 0.8223642

01:00:24.510 --> 01:00:28.360
um if the iterator and the Sentinel

NOTE Confidence: 0.8223642

01:00:28.360 --> 01:00:30.790
are bidirectional and common,

NOTE Confidence: 0.8223642

01:00:30.790 --> 01:00:32.500
meaning that they're the same type

NOTE Confidence: 0.8223642

01:00:32.500 --> 01:00:33.926
and we're bidirectional so we

NOTE Confidence: 0.8223642

01:00:33.926 --> 01:00:35.330
can March backward from the end,

NOTE Confidence: 0.8223642

01:00:35.330 --> 01:00:38.594
then we can have the cool fast algorithm.

NOTE Confidence: 0.8223642

01:00:38.594 --> 01:00:41.426
So for auto result is last

NOTE Confidence: 0.8223642

01:00:41.426 --> 01:00:43.670
past the end iterator.

NOTE Confidence: 0.782946085833333

01:00:47.210 --> 01:00:49.219
Henry read it because we were working

NOTE Confidence: 0.782946085833333

01:00:49.219 --> 01:00:50.970
with an inclusive exclusive range.

NOTE Confidence: 0.782946085833333

01:00:50.970 --> 01:00:52.862
Result is last O.

NOTE Confidence: 0.782946085833333

01:00:52.862 --> 01:00:55.227
We're going to want to.

NOTE Confidence: 0.782946085833333

01:00:55.230 --> 01:00:56.980
And I can see it on the the next line

NOTE Confidence: 0.782946085833333

01:00:57.036 --> 01:00:58.765
we're going to want to pre decrement

NOTE Confidence: 0.782946085833333

01:00:58.765 --> 01:01:00.789
result and then look at the element there.

NOTE Confidence: 0.782946085833333

01:01:00.790 --> 01:01:02.694
So that's valid for the final iterator

NOTE Confidence: 0.782946085833333

01:01:02.694 --> 01:01:04.208
because we point past the end.

NOTE Confidence: 0.782946085833333

01:01:04.210 --> 01:01:05.818
So when we decrement we get

NOTE Confidence: 0.782946085833333

01:01:05.818 --> 01:01:06.890
the actual last element.

NOTE Confidence: 0.782946085833333

01:01:06.890 --> 01:01:10.264
But if first and last are identical,

NOTE Confidence: 0.782946085833333

01:01:10.270 --> 01:01:11.920
we're talking about an empty range.

NOTE Confidence: 0.782946085833333

01:01:11.920 --> 01:01:14.230
We do not want to decrement anymore.

NOTE Confidence: 0.782946085833333

01:01:14.230 --> 01:01:15.958
So we want to keep going as long as

NOTE Confidence: 0.782946085833333

01:01:15.958 --> 01:01:17.635
the result is not equal to first,

NOTE Confidence: 0.782946085833333

01:01:17.640 --> 01:01:18.832
because when it is,

NOTE Confidence: 0.782946085833333

01:01:18.832 --> 01:01:20.322
we've exhausted all the elements.

NOTE Confidence: 0.782946085833333

01:01:20.330 --> 01:01:21.848
So that is the correct condition.

NOTE Confidence: 0.782946085833333

01:01:21.850 --> 01:01:23.292
I always like to think about my

NOTE Confidence: 0.782946085833333

01:01:23.292 --> 01:01:25.540
binary conditions, especially or my.

NOTE Confidence: 0.782946085833333

01:01:25.540 --> 01:01:26.760
Boundary conditions,

NOTE Confidence: 0.782946085833333

01:01:26.760 --> 01:01:28.240
especially when marching backwards,

NOTE Confidence: 0.782946085833333

01:01:28.240 --> 01:01:30.090
because everything is topsy turvy

NOTE Confidence: 0.782946085833333

01:01:30.090 --> 01:01:31.939
and it's easy to get confused with

NOTE Confidence: 0.782946085833333

01:01:31.939 --> 01:01:33.838
off by ones like reverse iterator is

NOTE Confidence: 0.782946085833333

01:01:33.838 --> 01:01:35.626
just a recipe for confusion here.

NOTE Confidence: 0.782946085833333

01:01:35.630 --> 01:01:37.520
We're not directly using reverse iterator,

NOTE Confidence: 0.782946085833333

01:01:37.520 --> 01:01:39.416
but we're doing the same sort of thing.

NOTE Confidence: 0.782946085833333

01:01:39.420 --> 01:01:42.580
Um, and then we've got a fancy update.

NOTE Confidence: 0.782946085833333

01:01:42.580 --> 01:01:44.260
So there's no plus, plus or minus,

NOTE Confidence: 0.782946085833333

01:01:44.260 --> 01:01:45.120
minus here.

NOTE Confidence: 0.782946085833333

01:01:45.120 --> 01:01:47.700
O as I mentioned we dereference

NOTE Confidence: 0.782946085833333

01:01:47.700 --> 01:01:49.390
pre decrement of result.

NOTE Confidence: 0.782946085833333

01:01:49.390 --> 01:01:51.310
We look at it through the

NOTE Confidence: 0.782946085833333

01:01:51.310 --> 01:01:52.270
projection by invoking.

NOTE Confidence: 0.782946085833333

01:01:52.270 --> 01:01:55.546
It stood invoke and then if that is operator

NOTE Confidence: 0.782946085833333

01:01:55.546 --> 01:01:58.468
equal equal the value then return stuff,

NOTE Confidence: 0.782946085833333

01:01:58.470 --> 01:02:01.090
return stood move the result

NOTE Confidence: 0.782946085833333

01:02:01.090 --> 01:02:03.850
and stood move last which is.

NOTE Confidence: 0.782946085833333

01:02:03.850 --> 01:02:06.490
This here, and we can do that because

NOTE Confidence: 0.782946085833333

01:02:06.561 --> 01:02:09.088
even though this is a Sentinel type,

NOTE Confidence: 0.782946085833333

01:02:09.090 --> 01:02:11.099
we have verified that it is common.

NOTE Confidence: 0.782946085833333

01:02:11.100 --> 01:02:12.689
It's the same type as the iterator,

NOTE Confidence: 0.782946085833333

01:02:12.690 --> 01:02:14.226
so we can move it out.

NOTE Confidence: 0.782946085833333

01:02:14.230 --> 01:02:14.422
OK.

NOTE Confidence: 0.782946085833333

01:02:14.422 --> 01:02:16.866
And then if we don't find it, return last,

NOTE Confidence: 0.782946085833333

01:02:16.866 --> 01:02:20.702
last as mandated by the standard here?

NOTE Confidence: 0.782946085833333

01:02:20.710 --> 01:02:24.090
OK, that looks good. Um.

NOTE Confidence: 0.782946085833333

01:02:24.090 --> 01:02:28.608
I was quickly thinking of um.

NOTE Confidence: 0.782946085833333

01:02:28.610 --> 01:02:33.306
It is interesting that we go and define

NOTE Confidence: 0.782946085833333

01:02:33.310 --> 01:02:35.711
find last separately and not just in

NOTE Confidence: 0.782946085833333

01:02:35.711 --> 01:02:38.456
terms of find last if with an equal 2.

NOTE Confidence: 0.782946085833333

01:02:38.460 --> 01:02:39.375
I think this is consistent

NOTE Confidence: 0.782946085833333

01:02:39.375 --> 01:02:40.290
with what we do elsewhere.

NOTE Confidence: 0.782946085833333

01:02:40.290 --> 01:02:42.271
We spam out a definition of separate

NOTE Confidence: 0.782946085833333

01:02:42.271 --> 01:02:43.650
algorithms rather than saying oh,

NOTE Confidence: 0.782946085833333

01:02:43.650 --> 01:02:46.016
we can just implement this in terms

NOTE Confidence: 0.782946085833333

01:02:46.016 --> 01:02:48.366
of like the equal to PRED because

NOTE Confidence: 0.782946085833333

01:02:48.366 --> 01:02:50.779
it does kind of save 1 inlined

NOTE Confidence: 0.782946085833333

01:02:50.779 --> 01:02:53.425
invocation is better in debug mode.

NOTE Confidence: 0.782946085833333

01:02:53.430 --> 01:02:53.701
Interestingly,

NOTE Confidence: 0.782946085833333

01:02:53.701 --> 01:02:55.869
this is not the approach that we took

NOTE Confidence: 0.782946085833333

01:02:55.869 --> 01:02:57.204
with the classic algorithms where

NOTE Confidence: 0.782946085833333

01:02:57.204 --> 01:02:59.199
we did unify them a long time ago.

NOTE Confidence: 0.782946085833333

01:02:59.200 --> 01:03:02.008
With um, predicates like if we look at uh,

NOTE Confidence: 0.782946085833333

01:03:02.010 --> 01:03:05.220
what's a good example? Um.

NOTE Confidence: 0.782946085833333

01:03:05.220 --> 01:03:06.453
Try to think.

NOTE Confidence: 0.782946085833333

01:03:06.453 --> 01:03:08.508
Something that compares find find.

NOTE Confidence: 0.782946085833333

01:03:08.510 --> 01:03:09.989
I'll do it.

NOTE Confidence: 0.782946085833333

01:03:09.990 --> 01:03:11.466
Why am I thinking hard about

NOTE Confidence: 0.782946085833333

01:03:11.466 --> 01:03:13.472
look for a pretty, uh uh,

NOTE Confidence: 0.782946085833333

01:03:13.472 --> 01:03:16.027
precedent when there's just fined.

NOTE Confidence: 0.782946085833333

01:03:16.030 --> 01:03:17.548
Of course find it occurs in

NOTE Confidence: 0.782946085833333

01:03:17.548 --> 01:03:18.830
Asian places in the STL.

NOTE Confidence: 0.782946085833333

01:03:18.830 --> 01:03:20.050
I wanna look at algorithm.

NOTE Confidence: 0.782946085833333

01:03:20.050 --> 01:03:22.185
Or it might actually be in no,

NOTE Confidence: 0.782946085833333

01:03:22.190 --> 01:03:24.490
it's an extra utility.

NOTE Confidence: 0.782946085833333

01:03:24.490 --> 01:03:25.666
Love to play the game of word.

NOTE Confidence: 0.782946085833333

01:03:25.670 --> 01:03:26.414
We define this thing.

NOTE Confidence: 0.782946085833333

01:03:26.414 --> 01:03:28.685
OK, here we go.

NOTE Confidence: 0.782946085833333

01:03:28.685 --> 01:03:29.380
Um.

NOTE Confidence: 0.782946085833333

01:03:29.380 --> 01:03:31.636
Oh no, we would need we would need

NOTE Confidence: 0.782946085833333

01:03:31.636 --> 01:03:33.624
a Lambda because fine, take it.

NOTE Confidence: 0.782946085833333

01:03:33.624 --> 01:03:35.136
It's a predicate versus a value.

NOTE Confidence: 0.809307421428571

01:03:35.140 --> 01:03:36.946
So we actually do define separate things.

NOTE Confidence: 0.809307421428571

01:03:36.950 --> 01:03:38.420
We would need to bind like a.

NOTE Confidence: 0.809307421428571

01:03:38.420 --> 01:03:40.814
OK, so it wouldn't be trivial to unify them.

NOTE Confidence: 0.809307421428571

01:03:40.820 --> 01:03:42.944
We we could with the Lambda, but we

NOTE Confidence: 0.809307421428571

01:03:42.944 --> 01:03:45.036
have historically not done that, so OK,

NOTE Confidence: 0.809307421428571

01:03:45.036 --> 01:03:47.340
so that's why we define all separate thing.

NOTE Confidence: 0.809307421428571

01:03:47.340 --> 01:03:49.092
OK, we're discovering things.

NOTE Confidence: 0.809307421428571

01:03:49.092 --> 01:03:51.035
OK, so that's good for the eye case.

NOTE Confidence: 0.809307421428571

01:03:51.040 --> 01:03:52.700
Otherwise we're either not

NOTE Confidence: 0.809307421428571

01:03:52.700 --> 01:03:54.775
bidirectional so we're forward only,

NOTE Confidence: 0.809307421428571

01:03:54.780 --> 01:03:57.820
or they are different types,

NOTE Confidence: 0.809307421428571

01:03:57.820 --> 01:04:01.546
so the next case is well.

NOTE Confidence: 0.809307421428571

01:04:01.550 --> 01:04:04.142
What if you have the same

NOTE Confidence: 0.809307421428571

01:04:04.142 --> 01:04:05.870
iterator and Sentinel types?

NOTE Confidence: 0.809307421428571

01:04:05.870 --> 01:04:07.725
Which would imply that they

NOTE Confidence: 0.809307421428571

01:04:07.725 --> 01:04:09.209
are weaker than bidirectional.

NOTE Confidence: 0.809307421428571

01:04:09.210 --> 01:04:10.842
So forward only then let's do

NOTE Confidence: 0.809307421428571

01:04:10.842 --> 01:04:11.930
the forward only algorithm.

NOTE Confidence: 0.809307421428571

01:04:11.930 --> 01:04:13.940
But we can assume commonality

NOTE Confidence: 0.809307421428571

01:04:13.940 --> 01:04:15.950
that they're the same type.

NOTE Confidence: 0.809307421428571

01:04:15.950 --> 01:04:17.660
So here's the forward version.

NOTE Confidence: 0.809307421428571

01:04:17.660 --> 01:04:19.592
We have auto results as last because

NOTE Confidence: 0.809307421428571

01:04:19.592 --> 01:04:21.890
we are going to need to preserve that.

NOTE Confidence: 0.809307421428571

01:04:21.890 --> 01:04:23.626
We will need to return it sometimes,

NOTE Confidence: 0.809307421428571

01:04:23.630 --> 01:04:25.958
actually all the time.

NOTE Confidence: 0.809307421428571

01:04:25.958 --> 01:04:27.744
Yes, all the time. Um.

NOTE Confidence: 0.809307421428571

01:04:27.744 --> 01:04:30.558
So result will be the thing that we March,

NOTE Confidence: 0.809307421428571

01:04:30.560 --> 01:04:32.380
um. Ohh not, sorry,

NOTE Confidence: 0.809307421428571

01:04:32.380 --> 01:04:34.488
not March backwards, marching forwards.

NOTE Confidence: 0.809307421428571

01:04:34.488 --> 01:04:37.440
Um, result is the best one we've found

NOTE Confidence: 0.809307421428571

01:04:37.508 --> 01:04:39.406
found so far, the one that matches.

NOTE Confidence: 0.809307421428571

01:04:39.406 --> 01:04:40.990
So if we don't find anything,

NOTE Confidence: 0.809307421428571

01:04:40.990 --> 01:04:42.205
we want to return last, last.

NOTE Confidence: 0.809307421428571

01:04:42.205 --> 01:04:44.245
So that's why we initialize it to last,

NOTE Confidence: 0.809307421428571

01:04:44.250 --> 01:04:44.567
correct?

NOTE Confidence: 0.809307421428571

01:04:44.567 --> 01:04:46.469
And then we've already initialized first

NOTE Confidence: 0.809307421428571

01:04:46.469 --> 01:04:48.910
as long as first has not reached last.

NOTE Confidence: 0.809307421428571

01:04:48.910 --> 01:04:51.030
We're going to step forward 1st every time,

NOTE Confidence: 0.809307421428571

01:04:51.030 --> 01:04:52.885
and then look at Derek 1st through

NOTE Confidence: 0.809307421428571

01:04:52.885 --> 01:04:54.090
the projections to invoke.

NOTE Confidence: 0.809307421428571

01:04:54.090 --> 01:04:55.650
If that's equal to the value we want,

NOTE Confidence: 0.809307421428571

01:04:55.650 --> 01:04:56.498
update result,

NOTE Confidence: 0.809307421428571

01:04:56.498 --> 01:04:59.466
set it to the current value 1st,

NOTE Confidence: 0.809307421428571

01:04:59.470 --> 01:05:01.914
and then when we're done, returns to.

NOTE Confidence: 0.809307421428571

01:05:01.914 --> 01:05:03.174
Move results to move last.

NOTE Confidence: 0.809307421428571

01:05:03.180 --> 01:05:05.346
That achieves this.

NOTE Confidence: 0.809307421428571

01:05:05.346 --> 01:05:06.068
Perfect.

NOTE Confidence: 0.809307421428571

01:05:06.070 --> 01:05:07.372
OK, otherwise, um,

NOTE Confidence: 0.809307421428571

01:05:07.372 --> 01:05:09.976
we're not MIDI common and we're

NOTE Confidence: 0.809307421428571

01:05:09.976 --> 01:05:11.299
not coming up.

NOTE Confidence: 0.809307421428571

01:05:11.300 --> 01:05:14.569
So that means we're looking at um,

NOTE Confidence: 0.809307421428571

01:05:14.570 --> 01:05:15.012
right?

NOTE Confidence: 0.809307421428571

01:05:15.012 --> 01:05:18.106
This is if you're bidirectional and common.

NOTE Confidence: 0.793021521666667

01:05:25.390 --> 01:05:26.626
This is interesting. Is there a

NOTE Confidence: 0.793021521666667

01:05:26.626 --> 01:05:27.989
fourth case that we're missing here?

NOTE Confidence: 0.793021521666667

01:05:27.990 --> 01:05:29.800
So I'm mentally working through

NOTE Confidence: 0.793021521666667

01:05:29.800 --> 01:05:31.248
the matrix of possibilities.

NOTE Confidence: 0.793021521666667

01:05:31.250 --> 01:05:32.168
I need to sketch it out,

NOTE Confidence: 0.793021521666667

01:05:32.170 --> 01:05:34.222
cause four things is apparently too

NOTE Confidence: 0.793021521666667

01:05:34.222 --> 01:05:36.817
much for my brain to handle at once.

NOTE Confidence: 0.793021521666667

01:05:36.820 --> 01:05:38.234
Without seeing it in front of me,

NOTE Confidence: 0.793021521666667

01:05:38.240 --> 01:05:43.388
O we've got, uh, bite eye we've got common.

NOTE Confidence: 0.793021521666667

01:05:43.390 --> 01:05:45.558
Binary, so yes, yes.

NOTE Confidence: 0.793021521666667

01:05:45.558 --> 01:05:52.140
Make a little table yes, no no yes no no.

NOTE Confidence: 0.793021521666667

01:05:52.140 --> 01:05:55.740
OK, so if the range is byte I and common,

NOTE Confidence: 0.793021521666667

01:05:55.740 --> 01:05:57.164
so the same types,

NOTE Confidence: 0.793021521666667

01:05:57.164 --> 01:05:59.300
then we've already handled that handle.

NOTE Confidence: 0.793021521666667

01:05:59.300 --> 01:06:01.694
This is the byte icon in case.

NOTE Confidence: 0.793021521666667

01:06:01.700 --> 01:06:04.320
OK, Umm, let's come back.

NOTE Confidence: 0.793021521666667

01:06:04.320 --> 01:06:06.378
So if you're not both of them,

NOTE Confidence: 0.793021521666667

01:06:06.380 --> 01:06:08.347
then we've got one of these cases.

NOTE Confidence: 0.793021521666667

01:06:08.350 --> 01:06:11.518
So all these elses when same as Iterator,

NOTE Confidence: 0.793021521666667

01:06:11.520 --> 01:06:13.840
Sentinel, then that would catch

NOTE Confidence: 0.793021521666667

01:06:13.840 --> 01:06:17.188
this case not by dye, but common.

NOTE Confidence: 0.793021521666667

01:06:17.188 --> 01:06:19.758
So this is the handled.

NOTE Confidence: 0.793021521666667

01:06:19.760 --> 01:06:23.884
Same as. As itsy don't know,

NOTE Confidence: 0.793021521666667

01:06:23.884 --> 01:06:26.064
I'm putting effort in getting

NOTE Confidence: 0.793021521666667

01:06:26.064 --> 01:06:28.400
all the underscores right.

NOTE Confidence: 0.793021521666667

01:06:28.400 --> 01:06:30.510
OK, otherwise this else here

NOTE Confidence: 0.793021521666667

01:06:30.510 --> 01:06:33.135
is handling 2 cases and that's

NOTE Confidence: 0.793021521666667

01:06:33.135 --> 01:06:35.300
what my brain was asking.

NOTE Confidence: 0.793021521666667

01:06:35.300 --> 01:06:35.486
OK,

NOTE Confidence: 0.793021521666667

01:06:35.486 --> 01:06:36.416
we know they're not common.

NOTE Confidence: 0.649124862

01:06:40.230 --> 01:06:41.250
Right, and yet not common.

NOTE Confidence: 0.649124862

01:06:41.250 --> 01:06:42.580
This would be the case of like.

NOTE Confidence: 0.649124862

01:06:42.580 --> 01:06:46.270
Let me see if I get this right. Um.

NOTE Confidence: 0.649124862

01:06:46.270 --> 01:06:49.384
It could be as simple as a stood list

NOTE Confidence: 0.649124862

01:06:49.384 --> 01:06:52.446
iterator and a stood list constant iterator.

NOTE Confidence: 0.649124862

01:06:52.450 --> 01:06:53.728
Is that right?

NOTE Confidence: 0.649124862

01:06:53.728 --> 01:06:56.710
Where they are usable as a Sentinel,

NOTE Confidence: 0.649124862

01:06:56.710 --> 01:06:58.964
but they aren't exactly the same type.

NOTE Confidence: 0.649124862

01:06:58.970 --> 01:07:00.130
This is something that the

NOTE Confidence: 0.649124862

01:07:00.130 --> 01:07:01.290
classic STI CK C nodding,

NOTE Confidence: 0.649124862

01:07:01.290 --> 01:07:02.235
so I think I've got it right.

NOTE Confidence: 0.649124862

01:07:02.240 --> 01:07:03.565
This is something that the

NOTE Confidence: 0.649124862

01:07:03.565 --> 01:07:04.890
classic STL would not handle.

NOTE Confidence: 0.649124862

01:07:04.890 --> 01:07:06.927
It would say whoa, you're giving me

NOTE Confidence: 0.649124862

01:07:06.927 --> 01:07:08.710
two different types as the iterator.

NOTE Confidence: 0.649124862

01:07:08.710 --> 01:07:09.910
I can't deduce what template

NOTE Confidence: 0.649124862

01:07:09.910 --> 01:07:11.510
argument you would want to fail at.

NOTE Confidence: 0.649124862

01:07:11.510 --> 01:07:13.650
Compile time ranges handles this,

NOTE Confidence: 0.649124862

01:07:13.650 --> 01:07:15.930
which is nice.

NOTE Confidence: 0.649124862

01:07:15.930 --> 01:07:17.742
But it means that checks for

NOTE Confidence: 0.649124862

01:07:17.742 --> 01:07:20.082
like same as in common will be

NOTE Confidence: 0.649124862

01:07:20.082 --> 01:07:21.687
false because you can't produce,

NOTE Confidence: 0.649124862

01:07:21.690 --> 01:07:23.240
you know, the same type.

NOTE Confidence: 0.649124862

01:07:23.240 --> 01:07:25.039
You could convert them to a type,

NOTE Confidence: 0.649124862

01:07:25.040 --> 01:07:28.337
but they're not literally the same type.

NOTE Confidence: 0.649124862

01:07:28.340 --> 01:07:29.684
It's odd that common is used there

NOTE Confidence: 0.649124862

01:07:29.684 --> 01:07:31.126
even though they do have a common type,

NOTE Confidence: 0.649124862

01:07:31.130 --> 01:07:35.950
but anyways, the Bidi case.

NOTE Confidence: 0.649124862

01:07:35.950 --> 01:07:37.924
Ohh you switch back to the code.

NOTE Confidence: 0.649124862

01:07:37.930 --> 01:07:38.352
Yeah,

NOTE Confidence: 0.649124862

01:07:38.352 --> 01:07:38.774
sorry,

NOTE Confidence: 0.649124862

01:07:38.774 --> 01:07:39.618
I think.

NOTE Confidence: 0.7349200025

01:07:42.610 --> 01:07:45.266
OK, uh, because there's no minus minus here.

NOTE Confidence: 0.7349200025

01:07:45.270 --> 01:07:46.330
That's what my brain I

NOTE Confidence: 0.7349200025

01:07:46.330 --> 01:07:47.178
I quickly scan forward.

NOTE Confidence: 0.7349200025

01:07:47.180 --> 01:07:48.453
I was like, hey, there's no minus, minus.

NOTE Confidence: 0.7349200025

01:07:48.453 --> 01:07:50.504
Shouldn't we have like the case where,

NOTE Confidence: 0.7349200025

01:07:50.510 --> 01:07:51.746
yeah, we can use the Sentinel,

NOTE Confidence: 0.7349200025

01:07:51.750 --> 01:07:53.346
but can't we use that advanced thing

NOTE Confidence: 0.7349200025

01:07:53.346 --> 01:07:55.427
to get an actual iterator to the end,

NOTE Confidence: 0.7349200025

01:07:55.430 --> 01:07:58.600
possibly instantly, and then decrement?

NOTE Confidence: 0.7349200025

01:07:58.600 --> 01:07:59.380
The question is,

NOTE Confidence: 0.7349200025

01:07:59.380 --> 01:08:01.430
is it worth the trouble to do so?

NOTE Confidence: 0.7349200025

01:08:01.430 --> 01:08:03.397
Right. Is that going to be more

NOTE Confidence: 0.7349200025

01:08:03.397 --> 01:08:05.314
efficient than making a single pass

NOTE Confidence: 0.7349200025

01:08:05.314 --> 01:08:07.004
using the forward iterator algorithm?

NOTE Confidence: 0.7349200025

01:08:07.010 --> 01:08:09.690
Yeah, well I think it will be more

NOTE Confidence: 0.7349200025

01:08:09.690 --> 01:08:11.827
efficient for a random access, right?

NOTE Confidence: 0.7349200025

01:08:11.827 --> 01:08:14.320
I think if there are sized and random access,

NOTE Confidence: 0.7349200025

01:08:14.320 --> 01:08:16.790
we should probably also have.

NOTE Confidence: 0.7349200025

01:08:16.790 --> 01:08:20.558
In that case. Because if you have like.

NOTE Confidence: 0.7349200025

01:08:20.560 --> 01:08:22.606
I don't know a vector iterator

NOTE Confidence: 0.7349200025

01:08:22.606 --> 01:08:24.520
and a vector concentrator exactly.

NOTE Confidence: 0.7349200025

01:08:24.520 --> 01:08:25.984
You have to go through all

NOTE Confidence: 0.7349200025

01:08:25.984 --> 01:08:27.439
of the entire thing to find.

NOTE Confidence: 0.840087088888889

01:08:29.820 --> 01:08:31.842
Exactly. Yeah, because we we essentially

NOTE Confidence: 0.840087088888889

01:08:31.842 --> 01:08:34.492
can keep the, the efficiency um,

NOTE Confidence: 0.840087088888889

01:08:34.492 --> 01:08:39.520
so is that is that what so you said?

NOTE Confidence: 0.840087088888889

01:08:39.520 --> 01:08:42.410
Uh, random access sized uh.

NOTE Confidence: 0.874048033043478

01:08:45.840 --> 01:08:48.240
I'm trying to think what is the exact

NOTE Confidence: 0.874048033043478

01:08:48.240 --> 01:08:50.328
criterion that we want to ask for where

NOTE Confidence: 0.874048033043478

01:08:50.328 --> 01:08:52.320
we could use the minus minus case.

NOTE Confidence: 0.874048033043478

01:08:52.320 --> 01:08:55.920
So I guess we have it would need obviously

NOTE Confidence: 0.874048033043478

01:08:55.920 --> 01:08:58.125
need to buy dye but what about random

NOTE Confidence: 0.874048033043478

01:08:58.125 --> 01:08:59.835
and obviously contiguous we don't,

NOTE Confidence: 0.874048033043478

01:08:59.840 --> 01:09:02.800
we don't care about and then?

NOTE Confidence: 0.874048033043478

01:09:02.800 --> 01:09:03.760
Sized. Unsized.

NOTE Confidence: 0.874048033043478

01:09:03.760 --> 01:09:06.640
I'm trying to think which ones?

NOTE Confidence: 0.874048033043478

01:09:06.640 --> 01:09:07.402
Unsigned. Unsized.

NOTE Confidence: 0.874048033043478

01:09:07.402 --> 01:09:10.450
Which ones can we do anything for so.

NOTE Confidence: 0.874048033043478

01:09:10.450 --> 01:09:15.270
If you are by dye only, then.

NOTE Confidence: 0.874048033043478

01:09:15.270 --> 01:09:17.570
Even if you're sized, um,

NOTE Confidence: 0.874048033043478

01:09:17.570 --> 01:09:20.466
if you have an iterator and a Sentinel,

NOTE Confidence: 0.874048033043478

01:09:20.470 --> 01:09:23.046
even if you know the size of that,

NOTE Confidence: 0.874048033043478

01:09:23.050 --> 01:09:26.150
you need to March forward.

NOTE Confidence: 0.874048033043478

01:09:26.150 --> 01:09:28.298
To find the actual last iterator

NOTE Confidence: 0.874048033043478

01:09:28.298 --> 01:09:30.749
and then possibly go and decrement.

NOTE Confidence: 0.874048033043478

01:09:30.750 --> 01:09:32.843
That doesn't seem like in general it

NOTE Confidence: 0.874048033043478

01:09:32.843 --> 01:09:35.398
would be a win it that it does like.

NOTE Confidence: 0.874048033043478

01:09:35.400 --> 01:09:37.170
There's a tradeoff here that is

NOTE Confidence: 0.874048033043478

01:09:37.170 --> 01:09:39.099
hard to make without knowing actual

NOTE Confidence: 0.874048033043478

01:09:39.099 --> 01:09:40.829
types because the algorithm of

NOTE Confidence: 0.874048033043478

01:09:40.829 --> 01:09:42.605
March that Bidi iterator forward

NOTE Confidence: 0.874048033043478

01:09:42.605 --> 01:09:44.645
either counting with the size or

NOTE Confidence: 0.874048033043478

01:09:44.645 --> 01:09:46.698
just until you reach the Sentinel

NOTE Confidence: 0.874048033043478

01:09:46.698 --> 01:09:48.408
and then start inspecting backwards.

NOTE Confidence: 0.874048033043478

01:09:48.410 --> 01:09:51.602
You would end up having to pay and

NOTE Confidence: 0.874048033043478

01:09:51.602 --> 01:09:53.799
increments and then order until

NOTE Confidence: 0.874048033043478

01:09:53.799 --> 01:09:55.989
you find the actual thing.

NOTE Confidence: 0.874048033043478

01:09:55.990 --> 01:09:57.088
Uh, decrements, essentially.

NOTE Confidence: 0.874048033043478

01:09:57.088 --> 01:09:57.454
Um,

NOTE Confidence: 0.874048033043478

01:09:57.454 --> 01:10:00.724
but you get to save a whole bunch

NOTE Confidence: 0.874048033043478

01:10:00.724 --> 01:10:02.230
of predicate invocations,

NOTE Confidence: 0.874048033043478

01:10:02.230 --> 01:10:02.517
uh,

NOTE Confidence: 0.874048033043478

01:10:02.517 --> 01:10:03.952
because you've skipped over invoking

NOTE Confidence: 0.874048033043478

01:10:03.952 --> 01:10:05.439
the predicate and the projection

NOTE Confidence: 0.874048033043478

01:10:05.439 --> 01:10:06.869
on all those initial ones.

NOTE Confidence: 0.874048033043478

01:10:06.870 --> 01:10:09.866
So you do pay some extra traversals.

NOTE Confidence: 0.874048033043478

01:10:09.870 --> 01:10:11.958
You pay like twice as many

NOTE Confidence: 0.874048033043478

01:10:11.958 --> 01:10:13.790
traversals in the order of from

NOTE Confidence: 0.874048033043478

01:10:13.790 --> 01:10:15.930
the end to the found element,

NOTE Confidence: 0.874048033043478

01:10:15.930 --> 01:10:18.495
but you get a avoid a whole bunch of

NOTE Confidence: 0.874048033043478

01:10:18.495 --> 01:10:20.590
predicate invocations and projections,

NOTE Confidence: 0.874048033043478

01:10:20.590 --> 01:10:22.018
which is potentially nice.

NOTE Confidence: 0.903716421428571

01:10:24.060 --> 01:10:25.957
So I'm kind of tempted to say,

NOTE Confidence: 0.903716421428571

01:10:25.960 --> 01:10:27.160
hey if you're if you're bite,

NOTE Confidence: 0.903716421428571

01:10:27.160 --> 01:10:29.344
we should just always advance to the

NOTE Confidence: 0.903716421428571

01:10:29.344 --> 01:10:31.618
end because the the usual idea in

NOTE Confidence: 0.903716421428571

01:10:31.618 --> 01:10:33.526
the STL is that iterator operations

NOTE Confidence: 0.903716421428571

01:10:33.592 --> 01:10:35.968
are cheap and things like predicate

NOTE Confidence: 0.903716421428571

01:10:35.968 --> 01:10:37.552
invocations are expensive ish.

NOTE Confidence: 0.903716421428571

01:10:37.560 --> 01:10:38.845
Which is why like complexity

NOTE Confidence: 0.903716421428571

01:10:38.845 --> 01:10:40.422
requirements are given in terms of

NOTE Confidence: 0.903716421428571

01:10:40.422 --> 01:10:41.642
number of invocations of predicate

NOTE Confidence: 0.903716421428571

01:10:41.642 --> 01:10:43.140
and they don't ever talk about,

NOTE Confidence: 0.903716421428571

01:10:43.140 --> 01:10:45.228
OK, exactly how many times can

NOTE Confidence: 0.903716421428571

01:10:45.228 --> 01:10:47.040
you increment iterators and stuff.

NOTE Confidence: 0.903716421428571

01:10:47.040 --> 01:10:48.363
Certainly it may not always be a

NOTE Confidence: 0.903716421428571

01:10:48.363 --> 01:10:50.021
win in wall clock time when the

NOTE Confidence: 0.903716421428571

01:10:50.021 --> 01:10:51.331
traversals are expensive as they

NOTE Confidence: 0.903716421428571

01:10:51.331 --> 01:10:53.053
actually kind of are for linked lists

NOTE Confidence: 0.903716421428571

01:10:53.053 --> 01:10:54.482
because everyone kills the cache.

NOTE Confidence: 0.903716421428571

01:10:54.482 --> 01:10:58.338
Um, and if the predicate invocation is cheap?

NOTE Confidence: 0.903716421428571

01:10:58.340 --> 01:11:01.220
But it seems like it could be valuable

NOTE Confidence: 0.903716421428571

01:11:01.220 --> 01:11:04.100
now in the case of random access.

NOTE Confidence: 0.903716421428571

01:11:04.100 --> 01:11:06.560
If you are random access,

NOTE Confidence: 0.903716421428571

01:11:06.560 --> 01:11:08.306
it doesn't matter sized or unsigned,

NOTE Confidence: 0.903716421428571

01:11:08.310 --> 01:11:12.208
you can always uhhh no no, it's got to be.

NOTE Confidence: 0.903716421428571

01:11:12.208 --> 01:11:14.050
Random access and size Sentinel 4

NOTE Confidence: 0.903716421428571

01:11:14.114 --> 01:11:15.956
because if you have random access

NOTE Confidence: 0.903716421428571

01:11:15.956 --> 01:11:18.169
and if you have a size Sentinel

NOTE Confidence: 0.903716421428571

01:11:18.169 --> 01:11:20.318
you get that distance then you do

NOTE Confidence: 0.903716421428571

01:11:20.320 --> 01:11:21.416
plus and you're done.

NOTE Confidence: 0.903716421428571

01:11:21.416 --> 01:11:23.451
If you have random access and unsized

NOTE Confidence: 0.903716421428571

01:11:23.451 --> 01:11:25.116
Sentinel like I'm looking through

NOTE Confidence: 0.903716421428571

01:11:25.116 --> 01:11:27.100
a string that's null terminated,

NOTE Confidence: 0.903716421428571

01:11:27.100 --> 01:11:28.015
then that actually it doesn't

NOTE Confidence: 0.903716421428571

01:11:28.015 --> 01:11:29.200
help you that it's random access,

NOTE Confidence: 0.903716421428571

01:11:29.200 --> 01:11:30.580
you must traverse the whole thing,

NOTE Confidence: 0.903716421428571

01:11:30.580 --> 01:11:34.480
so random and sized.

NOTE Confidence: 0.903716421428571

01:11:34.480 --> 01:11:38.645
Um, can't jump to the end instantly,

NOTE Confidence: 0.903716421428571

01:11:38.650 --> 01:11:39.676
so this is definitely the case.

NOTE Confidence: 0.903716421428571

01:11:39.680 --> 01:11:41.283
Random in size is definitely a case

NOTE Confidence: 0.903716421428571

01:11:41.283 --> 01:11:43.534
where you'd want to do this for by die.

NOTE Confidence: 0.903716421428571

01:11:43.534 --> 01:11:46.040
Doesn't matter whether you're sized or not.

NOTE Confidence: 0.903716421428571

01:11:46.040 --> 01:11:47.324
That's the interesting question.

NOTE Confidence: 0.903716421428571

01:11:47.324 --> 01:11:49.706
What do you what do you think

NOTE Confidence: 0.903716421428571

01:11:49.706 --> 01:11:51.266
after having talked through?

NOTE Confidence: 0.903716421428571

01:11:51.270 --> 01:11:54.570
The performance pros and cons?

NOTE Confidence: 0.903716421428571

01:11:54.570 --> 01:11:57.390
I kind of think you're right.

NOTE Confidence: 0.903716421428571

01:11:57.390 --> 01:11:59.406
Since we're almost definitely going to

NOTE Confidence: 0.903716421428571

01:11:59.406 --> 01:12:02.408
have to seek all the way to the end anyway.

NOTE Confidence: 0.903716421428571

01:12:02.410 --> 01:12:04.657
That we're going to have to evaluate

NOTE Confidence: 0.903716421428571

01:12:04.657 --> 01:12:07.330
all of those predicates at least once.

NOTE Confidence: 0.903716421428571

01:12:07.330 --> 01:12:09.316
It's probably worth the trouble to

NOTE Confidence: 0.903716421428571

01:12:09.320 --> 01:12:11.250
to evaluate the Sentinel predicates

NOTE Confidence: 0.903716421428571

01:12:11.250 --> 01:12:13.640
all the way through the range,

NOTE Confidence: 0.903716421428571

01:12:13.640 --> 01:12:14.123
one-on-one,

NOTE Confidence: 0.903716421428571

01:12:14.123 --> 01:12:14.606
traverse,

NOTE Confidence: 0.903716421428571

01:12:14.606 --> 01:12:17.987
and then maybe minimize the number of.

NOTE Confidence: 0.903716421428571

01:12:17.990 --> 01:12:20.188
User predicates that we have to evaluate.

NOTE Confidence: 0.903716421428571

01:12:20.190 --> 01:12:22.678
So I agree that it's probably worth the

NOTE Confidence: 0.903716421428571

01:12:22.678 --> 01:12:25.101
trouble to have a plain by diversion

NOTE Confidence: 0.903716421428571

01:12:25.101 --> 01:12:27.861
Abidi not common version and to have

NOTE Confidence: 0.903716421428571

01:12:27.861 --> 01:12:31.060
a random in size Sentinel slash size

NOTE Confidence: 0.903716421428571

01:12:31.158 --> 01:12:33.460
range is another pretty obvious win.

NOTE Confidence: 0.903716421428571

01:12:33.460 --> 01:12:36.569
But I think we were going to handle

NOTE Confidence: 0.903716421428571

01:12:36.569 --> 01:12:39.110
those in the caller by having the

NOTE Confidence: 0.903716421428571

01:12:39.110 --> 01:12:41.348
caller transform random and sized

NOTE Confidence: 0.903716421428571

01:12:41.348 --> 01:12:43.220
into the same as case, right?

NOTE Confidence: 0.903716421428571

01:12:43.220 --> 01:12:45.980
By having the caller find the end iterator.

NOTE Confidence: 0.903716421428571

01:12:45.980 --> 01:12:48.750
And pass in begin iterator

NOTE Confidence: 0.903716421428571

01:12:48.750 --> 01:12:51.520
and iterator to this helper.

NOTE Confidence: 0.903716421428571

01:12:51.520 --> 01:12:52.657
Ohh, really interesting.

NOTE Confidence: 0.903716421428571

01:12:52.657 --> 01:12:53.036
Yeah,

NOTE Confidence: 0.903716421428571

01:12:53.036 --> 01:12:55.310
because that way you don't have

NOTE Confidence: 0.903716421428571

01:12:55.374 --> 01:12:56.719
to deal with the size.

NOTE Confidence: 0.903716421428571

01:12:56.720 --> 01:12:59.375
The size range case is the weird 1 right?

NOTE Confidence: 0.903716421428571

01:12:59.380 --> 01:13:01.908
We might have a sized range whose iterator

NOTE Confidence: 0.903716421428571

01:13:01.908 --> 01:13:03.886
in Sentinel or at size Sentinel 4.

NOTE Confidence: 0.815597330333333

01:13:06.000 --> 01:13:08.360
So to deal with that will either end

NOTE Confidence: 0.815597330333333

01:13:08.360 --> 01:13:10.707
up having to pass a size into this

NOTE Confidence: 0.815597330333333

01:13:10.707 --> 01:13:12.822
function or get rid or deal with

NOTE Confidence: 0.815597330333333

01:13:12.822 --> 01:13:14.971
the size problem before we call it.

NOTE Confidence: 0.815597330333333

01:13:14.980 --> 01:13:16.836
So it would be pretty simple I think

NOTE Confidence: 0.815597330333333

01:13:16.836 --> 01:13:18.879
in the McAuley starting the caller.

NOTE Confidence: 0.815597330333333

01:13:18.880 --> 01:13:21.760
To say if that we have random access in size,

NOTE Confidence: 0.815597330333333

01:13:21.760 --> 01:13:24.085
find the final iterator and

NOTE Confidence: 0.815597330333333

01:13:24.085 --> 01:13:26.850
call this one helper with the.

NOTE Confidence: 0.815597330333333

01:13:26.850 --> 01:13:28.380
First and last iterator values.

NOTE Confidence: 0.77619911375

01:13:31.040 --> 01:13:34.520
OK, so slightly different forms for the um.

NOTE Confidence: 0.77619911375

01:13:34.520 --> 01:13:36.398
This would want size Sentinel 4.

NOTE Confidence: 0.77619911375

01:13:36.400 --> 01:13:38.030
This would want size range.

NOTE Confidence: 0.9631368

01:13:40.280 --> 01:13:42.360
Yeah. OK.

NOTE Confidence: 0.89032495

01:13:44.600 --> 01:13:48.872
And then have a case the bite I

NOTE Confidence: 0.89032495

01:13:48.872 --> 01:13:51.934
bite I bite I yes come in no case

NOTE Confidence: 0.89032495

01:13:51.934 --> 01:13:54.780
that does the essentially pretec.

NOTE Confidence: 0.89032495

01:13:54.780 --> 01:13:59.168
Right. And then that would go ahead.

NOTE Confidence: 0.89032495

01:13:59.170 --> 01:14:02.870
Given the implementation of advance.

NOTE Confidence: 0.89032495

01:14:02.870 --> 01:14:06.160
The bidai non common case.

NOTE Confidence: 0.89032495

01:14:06.160 --> 01:14:07.655
Would be exactly the same

NOTE Confidence: 0.89032495

01:14:07.655 --> 01:14:09.150
as the size Sentinel 4K.

NOTE Confidence: 0.8706424

01:14:12.270 --> 01:14:12.789
OK, yeah, yeah.

NOTE Confidence: 0.8706424

01:14:12.789 --> 01:14:13.654
That's why I was wondering.

NOTE Confidence: 0.8706424

01:14:13.660 --> 01:14:15.347
Like doesn't advance with this for us.

NOTE Confidence: 0.8706424

01:14:15.350 --> 01:14:17.720
It's gonna use whatever the get

NOTE Confidence: 0.8706424

01:14:17.720 --> 01:14:19.180
final iterator helper, yeah.

NOTE Confidence: 0.802439476

01:14:22.550 --> 01:14:24.430
Grants, right? The range is

NOTE Confidence: 0.802439476

01:14:24.430 --> 01:14:26.310
one could be more efficient.

NOTE Confidence: 0.798631201111111

01:14:29.310 --> 01:14:31.620
We have another helper called another

NOTE Confidence: 0.798631201111111

01:14:31.620 --> 01:14:34.003
ugly helper called get final iterator

NOTE Confidence: 0.798631201111111

01:14:34.003 --> 01:14:36.313
value or just get final iterator.

NOTE Confidence: 0.67602879

01:14:38.410 --> 01:14:40.594
That takes a range or an iterator and

NOTE Confidence: 0.67602879

01:14:40.594 --> 01:14:43.750
Sentinel, I think. And figures out the.

NOTE Confidence: 0.720833541428571

01:14:46.680 --> 01:14:48.507
Oh yeah, wow. Even does the unwrapping.

NOTE Confidence: 0.713564618

01:14:52.160 --> 01:14:54.040
OK, so this says, um,

NOTE Confidence: 0.713564618

01:14:54.040 --> 01:14:56.679
if they're the same type after unwrapping.

NOTE Confidence: 0.713564618

01:14:56.680 --> 01:14:58.590
Then just take that last

NOTE Confidence: 0.713564618

01:14:58.590 --> 01:15:00.500
thing and then unwrap it.

NOTE Confidence: 0.713564618

01:15:00.500 --> 01:15:04.220
Otherwise use ranges next on the

NOTE Confidence: 0.713564618

01:15:04.220 --> 01:15:06.080
appropriately unwrapped thing.

NOTE Confidence: 0.713564618

01:15:06.080 --> 01:15:09.385
OK, right. So this is what we

NOTE Confidence: 0.713564618

01:15:09.385 --> 01:15:11.246
were just random access in size

NOTE Confidence: 0.713564618

01:15:11.246 --> 01:15:13.340
will obviously do the O1 version.

NOTE Confidence: 0.713564618

01:15:13.340 --> 01:15:15.251
So yeah, this has the smarts wrapped

NOTE Confidence: 0.713564618

01:15:15.251 --> 01:15:17.728
up inside of it because this problem

NOTE Confidence: 0.713564618

01:15:17.728 --> 01:15:20.704
of course appeared in other rounds.

NOTE Confidence: 0.713564618

01:15:20.710 --> 01:15:22.775
Would we be able to do this

NOTE Confidence: 0.713564618

01:15:22.775 --> 01:15:24.460
in the helper algorithm?

NOTE Confidence: 0.713564618

01:15:24.460 --> 01:15:25.790
Would would each call site need to

NOTE Confidence: 0.713564618

01:15:25.790 --> 01:15:27.460
do it with the caller need to do it?

NOTE Confidence: 0.53388556

01:15:30.030 --> 01:15:32.058
I think it's very simple here.

NOTE Confidence: 0.53388556

01:15:32.060 --> 01:15:35.025
It's best if the caller does it still, yeah.

NOTE Confidence: 0.53388556

01:15:35.025 --> 01:15:39.104
OK. And we were going to do this because

NOTE Confidence: 0.53388556

01:15:39.104 --> 01:15:41.549
there's a there's a range overload.

NOTE Confidence: 0.53388556

01:15:41.550 --> 01:15:44.453
Arsenal. Yeah, I see.

NOTE Confidence: 0.53388556

01:15:44.453 --> 01:15:45.617
Well, it's actually overloaded.

NOTE Confidence: 0.53388556

01:15:45.620 --> 01:15:48.923
OK, why? Why did I not see that here?

NOTE Confidence: 0.53388556

01:15:48.930 --> 01:15:50.766
Ohh because it's right. Pull up.

NOTE Confidence: 0.53388556

01:15:50.770 --> 01:15:52.703
OK oh oh and this. Here we go.

NOTE Confidence: 0.53388556

01:15:52.703 --> 01:15:54.651
The range one says oh if it's a

NOTE Confidence: 0.53388556

01:15:54.651 --> 01:15:56.527
common range then we got more cases.

NOTE Confidence: 0.53388556

01:15:56.530 --> 01:15:58.098
OK, so this this logic is actually

NOTE Confidence: 0.53388556

01:15:58.098 --> 01:15:59.509
quite annoying to do from scratch,

NOTE Confidence: 0.53388556

01:15:59.510 --> 01:16:01.178
but it's already done.

NOTE Confidence: 0.53388556

01:16:01.178 --> 01:16:03.928
There's even another overload there if we

NOTE Confidence: 0.53388556

01:16:03.928 --> 01:16:06.560
have a range and amid iterator from it.

NOTE Confidence: 0.53388556

01:16:06.560 --> 01:16:09.692
Yeah yeah because that would say

NOTE Confidence: 0.53388556

01:16:09.692 --> 01:16:13.748
even even more. The right one. OK.

NOTE Confidence: 0.53388556

01:16:13.748 --> 01:16:15.798
Umm, it's sort of hard to describe.

NOTE Confidence: 0.53388556

01:16:15.800 --> 01:16:17.600
I guess we could just give the name

NOTE Confidence: 0.53388556

01:16:17.600 --> 01:16:19.549
of the algorithm and say here figure

NOTE Confidence: 0.53388556

01:16:19.549 --> 01:16:21.320
this out super quick and then.

NOTE Confidence: 0.859863510909091

01:16:23.400 --> 01:16:24.840
They can ask if there's any

NOTE Confidence: 0.859863510909091

01:16:24.840 --> 01:16:26.000
question about what to do.

NOTE Confidence: 0.859863510909091

01:16:26.000 --> 01:16:28.079
I think that the press should probably

NOTE Confidence: 0.859863510909091

01:16:28.079 --> 01:16:30.200
say if the if the range slash iterator

NOTE Confidence: 0.859863510909091

01:16:30.200 --> 01:16:32.200
type is at least bidirectional,

NOTE Confidence: 0.859863510909091

01:16:32.200 --> 01:16:36.168
we should use get final iterator and pass

NOTE Confidence: 0.859863510909091

01:16:36.168 --> 01:16:39.323
the result into the unchecked. Helper.

NOTE Confidence: 0.859863510909091

01:16:39.323 --> 01:16:42.128
Which is what feinglass unchecked.

NOTE Confidence: 0.859863510909091

01:16:42.130 --> 01:16:43.310
Sorry and define last OK,

NOTE Confidence: 0.859863510909091

01:16:43.310 --> 01:16:45.635
but that that would basically request

NOTE Confidence: 0.859863510909091

01:16:45.635 --> 01:16:48.890
and if constexpr in the callers right?

NOTE Confidence: 0.859863510909091

01:16:48.890 --> 01:16:50.730
Saying if constexpr bidirectional

NOTE Confidence: 0.859863510909091

01:16:50.730 --> 01:16:52.570
then do this thing.

NOTE Confidence: 0.859863510909091

01:16:52.570 --> 01:16:54.985
OK, that's that's a lot of complexity,

NOTE Confidence: 0.859863510909091

01:16:54.990 --> 01:16:56.870
but I guess it could be worth it.

NOTE Confidence: 0.859863510909091

01:16:56.870 --> 01:16:58.928
I mean, it's obviously worth it.

NOTE Confidence: 0.859863510909091

01:16:58.930 --> 01:17:02.362
It's only one layer of if constexpr and it

NOTE Confidence: 0.859863510909091

01:17:02.362 --> 01:17:05.064
avoids wasting effort for the forward case,

NOTE Confidence: 0.859863510909091

01:17:05.070 --> 01:17:07.436
which is something we want to avoid.

NOTE Confidence: 0.859863510909091

01:17:07.440 --> 01:17:08.560
Yeah, that's a good point.

NOTE Confidence: 0.859863510909091

01:17:08.560 --> 01:17:10.184
And I see we do do this elsewhere

NOTE Confidence: 0.859863510909091

01:17:10.184 --> 01:17:12.030
like in rotate unchecked we're like

NOTE Confidence: 0.859863510909091

01:17:12.030 --> 01:17:13.418
hey if constexpr bidirectional

NOTE Confidence: 0.859863510909091

01:17:13.418 --> 01:17:15.190
iterator of course rotates you know

NOTE Confidence: 0.859863510909091

01:17:15.190 --> 01:17:17.154
special but it also needs to do some

NOTE Confidence: 0.859863510909091

01:17:17.154 --> 01:17:18.603
special stuff here we have got a

NOTE Confidence: 0.859863510909091

01:17:18.603 --> 01:17:20.316
lot of calls so a lot of precedent.

NOTE Confidence: 0.859863510909091

01:17:20.320 --> 01:17:21.970
I'm just looking is there any

NOTE Confidence: 0.859863510909091

01:17:21.970 --> 01:17:23.896
precedent for this sort of we handle

NOTE Confidence: 0.859863510909091

01:17:23.896 --> 01:17:25.426
forward iterators but if it's by

NOTE Confidence: 0.859863510909091

01:17:25.426 --> 01:17:27.138
die then we'll step up and use.

NOTE Confidence: 0.859863510909091

01:17:27.140 --> 01:17:30.362
I don't immediately see anything like that.

NOTE Confidence: 0.859863510909091

01:17:30.362 --> 01:17:35.910
So this is sort of a new case, um.

NOTE Confidence: 0.859863510909091

01:17:35.910 --> 01:17:37.446
Yeah, it looks like whenever we call it,

NOTE Confidence: 0.859863510909091

01:17:37.450 --> 01:17:39.585
we already know we're ran or Abidi.

NOTE Confidence: 0.889686885

01:17:41.800 --> 01:17:44.170
At least in most of these.

NOTE Confidence: 0.889686885

01:17:44.170 --> 01:17:46.095
Of course, many still algorithms

NOTE Confidence: 0.889686885

01:17:46.095 --> 01:17:47.635
already want random labidi.

NOTE Confidence: 0.889686885

01:17:47.640 --> 01:17:48.768
That's this rotate one.

NOTE Confidence: 0.889686885

01:17:48.768 --> 01:17:50.460
That's the only one I'm seeing.

NOTE Confidence: 0.823363152

01:17:53.890 --> 01:17:57.340
OK, I'll suggest it anyways.

NOTE Confidence: 0.823363152

01:17:57.340 --> 01:17:59.748
Um, OK else here you can tell them

NOTE Confidence: 0.823363152

01:17:59.748 --> 01:18:02.272
to figure it out, and if they want,

NOTE Confidence: 0.823363152

01:18:02.272 --> 01:18:04.797
they can figure it out by asking

NOTE Confidence: 0.823363152

01:18:04.797 --> 01:18:06.778
us to explain it. Blame Casey.

NOTE Confidence: 0.823363152

01:18:06.778 --> 01:18:08.570
He's the one who wrote all this stuff.

NOTE Confidence: 0.823363152

01:18:08.570 --> 01:18:09.648
I don't want to write a book

NOTE Confidence: 0.823363152

01:18:09.648 --> 01:18:10.828
about how to do this right now,

NOTE Confidence: 0.823363152

01:18:10.830 --> 01:18:14.358
but ask Casey if you can't figure it out.

NOTE Confidence: 0.823363152

01:18:14.360 --> 01:18:19.460
There's an exercise left to the Casey, OK.

NOTE Confidence: 0.823363152

01:18:19.460 --> 01:18:22.343
So there are.

NOTE Confidence: 0.823363152

01:18:22.343 --> 01:18:26.187
Four possible combinations of

NOTE Confidence: 0.823363152

01:18:26.190 --> 01:18:30.310
bodye and common hike Kitty.

NOTE Confidence: 0.823363152

01:18:30.310 --> 01:18:32.795
The remaining 15 minutes of this review

NOTE Confidence: 0.823363152

01:18:32.795 --> 01:18:35.439
will just be STL making cat noises.

NOTE Confidence: 0.823363152

01:18:35.440 --> 01:18:40.970
Possible combinations of Bodie and common um.

NOTE Confidence: 0.823363152

01:18:40.970 --> 01:18:48.899
Leave um. Above the. Umm.

NOTE Confidence: 0.823363152

01:18:48.900 --> 01:18:51.070
Buy dye.

NOTE Confidence: 0.823363152

01:18:51.070 --> 01:18:52.340
And common.

NOTE Confidence: 0.679139756666667

01:18:56.770 --> 01:19:04.870
We've handled. By dye and common. And.

NOTE Confidence: 0.679139756666667

01:19:04.870 --> 01:19:11.030
Ah, I'll just say forward. And. Common.

NOTE Confidence: 0.63356745125

01:19:15.470 --> 01:19:17.300
Hereby bite I really mean bidai

NOTE Confidence: 0.63356745125

01:19:17.300 --> 01:19:19.248
and stronger, but it's fine.

NOTE Confidence: 0.63356745125

01:19:19.248 --> 01:19:21.032
I think that's clear

NOTE Confidence: 0.63356745125

01:19:21.032 --> 01:19:23.080
and forward and common.

NOTE Confidence: 0.63356745125

01:19:23.080 --> 01:19:27.768
Uh, cases above, um.

NOTE Confidence: 0.63356745125

01:19:27.770 --> 01:19:32.540
But I come in forward comment

NOTE Confidence: 0.63356745125

01:19:32.540 --> 01:19:35.610
the remaining cases. Umm.

NOTE Confidence: 0.613449515

01:19:37.640 --> 01:19:40.188
That would be. Bidai.

NOTE Confidence: 0.57220859

01:19:42.990 --> 01:19:50.280
Uncommon. And. Forward on common. Are.

NOTE Confidence: 0.0753026

01:19:52.310 --> 01:19:53.430
Ah.

NOTE Confidence: 0.860406916666667

01:19:57.030 --> 01:19:58.110
Are possible here.

NOTE Confidence: 0.669548385

01:20:00.400 --> 01:20:04.620
Um, the implementation. Below.

NOTE Confidence: 0.807999935454545

01:20:09.950 --> 01:20:12.290
Trying to make clear what I'm

NOTE Confidence: 0.807999935454545

01:20:12.290 --> 01:20:14.320
referring to in this else.

NOTE Confidence: 0.807999935454545

01:20:14.320 --> 01:20:17.915
Brace else brace just made me else block.

NOTE Confidence: 0.807999935454545

01:20:17.915 --> 01:20:21.485
Um, is the only possible implementation?

NOTE Confidence: 0.579417

01:20:24.300 --> 01:20:31.070
For. Or non comment. Course. Umm.

NOTE Confidence: 0.579417

01:20:31.070 --> 01:20:37.180
However for the buy dye non common case.

NOTE Confidence: 0.719277184

01:20:40.430 --> 01:20:47.709
This is invoking the. Uh, this is using.

NOTE Confidence: 0.719277184

01:20:47.710 --> 01:20:49.938
The forward only algorithm.

NOTE Confidence: 0.85788051

01:20:52.740 --> 01:20:56.680
Which invokes the predicate and.

NOTE Confidence: 0.85788051

01:20:56.680 --> 01:20:57.946
Let me put in the order

NOTE Confidence: 0.85788051

01:20:57.946 --> 01:20:58.579
of actual invocation,

NOTE Confidence: 0.85788051

01:20:58.580 --> 01:21:01.418
projection and predicate.

NOTE Confidence: 0.85788051

01:21:01.418 --> 01:21:06.760
On every single. Element.

NOTE Confidence: 0.85788051

01:21:06.760 --> 01:21:11.690
It would be possible. To.

NOTE Confidence: 0.85788051

01:21:11.690 --> 01:21:13.566
Find the last iterator.

NOTE Confidence: 0.85788051

01:21:13.566 --> 01:21:17.460
And then use the buy dye algorithm.

NOTE Confidence: 0.585181306666667

01:21:19.610 --> 01:21:24.740
Umm. 4 by die only iterators.

NOTE Confidence: 0.585181306666667

01:21:24.740 --> 01:21:29.648
This would pay and traversals only.

NOTE Confidence: 0.585181306666667

01:21:29.650 --> 01:21:33.820
Followed by order.

NOTE Confidence: 0.585181306666667

01:21:33.820 --> 01:21:39.088
Distance. From result to.

NOTE Confidence: 0.585181306666667

01:21:39.090 --> 01:21:46.546
Last um. Traversals. I see.

NOTE Confidence: 0.585181306666667

01:21:46.546 --> 01:21:48.498
Let's say backwards traversals.

NOTE Confidence: 0.80791366

01:21:51.330 --> 01:21:52.420
Projections.

NOTE Confidence: 0.4890744

01:21:55.700 --> 01:22:00.608
Predicates. That's not a.

NOTE Confidence: 0.731409104

01:22:03.160 --> 01:22:07.084
All that isn't a 100% guaranteed win.

NOTE Confidence: 0.731409104

01:22:07.084 --> 01:22:11.472
It is likely to be better,

NOTE Confidence: 0.731409104

01:22:11.472 --> 01:22:18.380
especially for expensive predicates and.

NOTE Confidence: 0.731409104

01:22:18.380 --> 01:22:21.368
When we are fortunate.

NOTE Confidence: 0.731409104

01:22:21.368 --> 01:22:25.719
To find the result. Near the last.

NOTE Confidence: 0.58856998

01:22:27.960 --> 01:22:30.150
I'll just say the last um.

NOTE Confidence: 0.787707675

01:22:32.280 --> 01:22:34.440
And if the uh.

NOTE Confidence: 0.845551845714286

01:22:36.960 --> 01:22:37.860
Uh, let's say argument.

NOTE Confidence: 0.845551845714286

01:22:37.860 --> 01:22:38.535
I'm trying to.

NOTE Confidence: 0.845551845714286

01:22:38.540 --> 01:22:39.914
I'm trying to avoid saying input

NOTE Confidence: 0.845551845714286

01:22:39.914 --> 01:22:41.400
because that has its own meaning.

NOTE Confidence: 0.845551845714286

01:22:41.400 --> 01:22:46.055
If the arguments are random and sized,

NOTE Confidence: 0.845551845714286

01:22:46.060 --> 01:22:49.558
we can jump to the end.

NOTE Confidence: 0.845551845714286

01:22:49.560 --> 01:22:53.372
Instantly, um, this scenario.

NOTE Confidence: 0.845551845714286

01:22:53.372 --> 01:22:55.278
Could occur.

NOTE Confidence: 0.764192196

01:22:58.160 --> 01:23:04.100
When the Iterator Sentinel pair. Is.

NOTE Confidence: 0.764192196

01:23:04.100 --> 01:23:10.480
Vector. Iterator cons iterator for example.

NOTE Confidence: 0.86740907

01:23:13.270 --> 01:23:15.016
OK, so where is the thing?

NOTE Confidence: 0.86740907

01:23:15.020 --> 01:23:16.590
Like I heard us um.

NOTE Confidence: 0.634591685

01:23:20.180 --> 01:23:22.740
There's a helper to.

NOTE Confidence: 0.634591685

01:23:22.740 --> 01:23:24.900
Make this easier.

NOTE Confidence: 0.634591685

01:23:24.900 --> 01:23:31.149
Uh, get final iterator on wrapped um.

NOTE Confidence: 0.634591685

01:23:31.150 --> 01:23:34.209
Should I just say, see existing usage

NOTE Confidence: 0.634591685

01:23:34.209 --> 01:23:38.009
and then talk about how we would want the?

NOTE Confidence: 0.634591685

01:23:38.010 --> 01:23:42.390
Callers to detect bite eye.

NOTE Confidence: 0.634591685

01:23:42.390 --> 01:23:46.110
Use this and then.

NOTE Confidence: 0.634591685

01:23:46.110 --> 01:23:48.639
That would so if the callers say if bite

NOTE Confidence: 0.634591685

01:23:48.639 --> 01:23:51.154
I use um get final iterator unwrapped

NOTE Confidence: 0.634591685

01:23:51.154 --> 01:23:53.940
and then call this unchecked function,

NOTE Confidence: 0.634591685

01:23:53.940 --> 01:23:55.476
that would end up being absorbed by the

NOTE Confidence: 0.634591685

01:23:55.476 --> 01:23:57.288
byte I common case then is that correct?

NOTE Confidence: 0.634591685

01:23:57.290 --> 01:23:59.600
Because get finite iterator unwrapped

NOTE Confidence: 0.634591685

01:23:59.600 --> 01:24:02.595
would convert that Sentinel which is a

NOTE Confidence: 0.634591685

01:24:02.595 --> 01:24:05.763
different type to the common case right?

NOTE Confidence: 0.634591685

01:24:05.763 --> 01:24:10.976
OK, um. The um callers?

NOTE Confidence: 0.634591685

01:24:10.976 --> 01:24:14.424
Iterator, Sentinel and Range

NOTE Confidence: 0.634591685

01:24:14.430 --> 01:24:18.814
can have if constexpr.

NOTE Confidence: 0.634591685

01:24:18.814 --> 01:24:19.910
For.

NOTE Confidence: 0.634591685

01:24:19.910 --> 01:24:23.020
By dye or stronger iterators.

NOTE Confidence: 0.57520029

01:24:25.120 --> 01:24:26.820
And use.

NOTE Confidence: 0.728817488

01:24:28.840 --> 01:24:32.165
Yet final iterator and ramped

NOTE Confidence: 0.728817488

01:24:32.165 --> 01:24:35.490
before calling the unchecked helper.

NOTE Confidence: 0.728817488

01:24:35.490 --> 01:24:42.529
Then. The. But I common.

NOTE Confidence: 0.728817488

01:24:42.530 --> 01:24:46.850
Case in the unchecked. Helper.

NOTE Confidence: 0.728817488

01:24:46.850 --> 01:24:53.468
Would absorb this scenario, so a.

NOTE Confidence: 0.728817488

01:24:53.470 --> 01:24:58.439
4th. Case would not.

NOTE Confidence: 0.728817488

01:24:58.440 --> 01:25:01.188
Need to be added.

NOTE Confidence: 0.726292006

01:25:03.990 --> 01:25:09.600
Please see existing calls to.

NOTE Confidence: 0.726292006

01:25:09.600 --> 01:25:11.320
All I want, I wanna think thoughts that

NOTE Confidence: 0.726292006

01:25:11.320 --> 01:25:12.915
are bigger than four lines at a time.

NOTE Confidence: 0.726292006

01:25:12.920 --> 01:25:16.710
Here we go. All this all this

NOTE Confidence: 0.726292006

01:25:16.710 --> 01:25:18.010
complicated cpaws totally fine.

NOTE Confidence: 0.726292006

01:25:18.010 --> 01:25:19.510
The moment the UI annoys me,

NOTE Confidence: 0.726292006

01:25:19.510 --> 01:25:22.870
I'm like her. Angry cat face.

NOTE Confidence: 0.726292006

01:25:22.870 --> 01:25:24.585
Please see existing calls to

NOTE Confidence: 0.726292006

01:25:24.585 --> 01:25:25.957
get final iterator unwrapped.

NOTE Confidence: 0.590074155

01:25:28.370 --> 01:25:32.288
Uh, or bug Casey? Ask Casey.

NOTE Confidence: 0.662750175

01:25:34.680 --> 01:25:41.618
Uh, for. Assistance. As he has volunteered.

NOTE Confidence: 0.9472152

01:25:47.330 --> 01:25:50.936
Yeah. OK, always near the end of our review

NOTE Confidence: 0.9472152

01:25:50.936 --> 01:25:53.165
slot and I'm almost done with this algorithm.

NOTE Confidence: 0.9472152

01:25:53.170 --> 01:25:54.878
The remaining ones will be very similar,

NOTE Confidence: 0.9472152

01:25:54.880 --> 01:25:57.757
so I think we found the all

NOTE Confidence: 0.9472152

01:25:57.757 --> 01:25:59.490
the interesting issues here.

NOTE Confidence: 0.9472152

01:25:59.490 --> 01:26:01.060
There are four possible combinations

NOTE Confidence: 0.9472152

01:26:01.060 --> 01:26:02.630
of Vida uncommon we've handled.

NOTE Confidence: 0.9472152

01:26:02.630 --> 01:26:04.905
I'm checking my table here Bidi and

NOTE Confidence: 0.9472152

01:26:04.905 --> 01:26:08.128
common and forward and common cases above.

NOTE Confidence: 0.9472152

01:26:08.130 --> 01:26:10.244
The remaining cases by Dynon common and

NOTE Confidence: 0.9472152

01:26:10.244 --> 01:26:12.139
forward non common are possible here.

NOTE Confidence: 0.9472152

01:26:12.140 --> 01:26:13.466
The information below in the South

NOTE Confidence: 0.9472152

01:26:13.466 --> 01:26:14.931
block is the only possible amputation

NOTE Confidence: 0.9472152

01:26:14.931 --> 01:26:16.527
for four non common of course.

NOTE Confidence: 0.9472152

01:26:16.530 --> 01:26:17.934
However, for the binary non common

NOTE Confidence: 0.9472152

01:26:17.934 --> 01:26:19.839
case this is using the forward only

NOTE Confidence: 0.9472152

01:26:19.839 --> 01:26:21.364
algorithm which invokes the projection

NOTE Confidence: 0.9472152

01:26:21.364 --> 01:26:23.090
and predicate on every single element.

NOTE Confidence: 0.9472152

01:26:23.090 --> 01:26:24.833
It would be possible to find the

NOTE Confidence: 0.9472152

01:26:24.833 --> 01:26:26.668
last iterator and then use the dye

NOTE Confidence: 0.9472152

01:26:26.668 --> 01:26:28.222
algorithm for byte I only iterators

NOTE Confidence: 0.9472152

01:26:28.274 --> 01:26:29.669
this would pay N traversals.

NOTE Confidence: 0.9472152

01:26:29.670 --> 01:26:31.682
Only followed by order

NOTE Confidence: 0.9472152

01:26:31.682 --> 01:26:34.197
distance from result to last,

NOTE Confidence: 0.9472152

01:26:34.200 --> 01:26:35.144
backwards traversals,

NOTE Confidence: 0.9472152

01:26:35.144 --> 01:26:36.088
projections, predicates.

NOTE Confidence: 0.9472152

01:26:36.088 --> 01:26:38.212
While that isn't 100% guaranteed win,

NOTE Confidence: 0.9472152

01:26:38.212 --> 01:26:39.616
it is likely to be better,

NOTE Confidence: 0.9472152

01:26:39.620 --> 01:26:40.760
especially for expensive predicates

NOTE Confidence: 0.9472152

01:26:40.760 --> 01:26:42.470
and when we're fortunate to find

NOTE Confidence: 0.9472152

01:26:42.519 --> 01:26:43.954
the result near the last and if

NOTE Confidence: 0.9472152

01:26:43.954 --> 01:26:45.249
the arguments are random and sized

NOTE Confidence: 0.9472152

01:26:45.249 --> 01:26:46.719
we can jump to the end instantly.

NOTE Confidence: 0.9472152

01:26:46.720 --> 01:26:48.358
The scenario could occur when the

NOTE Confidence: 0.9472152

01:26:48.358 --> 01:26:49.854
Iterator Sentinel pair is vector

NOTE Confidence: 0.9472152

01:26:49.854 --> 01:26:51.629
iterator constant iterator for example.

NOTE Confidence: 0.9472152

01:26:51.630 --> 01:26:52.722
Fortunately there's a helper

NOTE Confidence: 0.9472152

01:26:52.722 --> 01:26:53.814
to make this easier.

NOTE Confidence: 0.9472152

01:26:53.820 --> 01:26:55.360
Get final iterator unwrapped

NOTE Confidence: 0.9472152

01:26:55.360 --> 01:26:56.515
the callers Iterator,

NOTE Confidence: 0.9472152

01:26:56.520 --> 01:26:58.326
Sentinel and range can have if

NOTE Confidence: 0.9472152

01:26:58.326 --> 01:27:00.100
constexpr for bodye or stronger.

NOTE Confidence: 0.9472152

01:27:00.100 --> 01:27:01.995
Iterators and use get final

NOTE Confidence: 0.9472152

01:27:01.995 --> 01:27:03.132
iterator unwrapped before

NOTE Confidence: 0.9472152

01:27:03.132 --> 01:27:04.949
calling the unchecked helper.

NOTE Confidence: 0.9472152

01:27:04.950 --> 01:27:06.942
Then the Bidi common case and the unchecked

NOTE Confidence: 0.9472152

01:27:06.942 --> 01:27:08.429
helper would absorb this scenario,

NOTE Confidence: 0.9472152

01:27:08.430 --> 01:27:10.730
so a fourth case would not need to be added.

NOTE Confidence: 0.9472152

01:27:10.730 --> 01:27:12.963
Please see existing calls to get final

NOTE Confidence: 0.9472152

01:27:12.963 --> 01:27:14.859
iterator unwrapped or ask Casey for

NOTE Confidence: 0.9472152

01:27:14.859 --> 01:27:16.910
assistance as he has volunteered to help.

NOTE Confidence: 0.9472152

01:27:16.910 --> 01:27:17.260
OK.

NOTE Confidence: 0.790253485454545

01:27:20.350 --> 01:27:22.420
OK, so let's validate this forward

NOTE Confidence: 0.790253485454545

01:27:22.420 --> 01:27:24.230
case before calling in today.

NOTE Confidence: 0.790253485454545

01:27:24.230 --> 01:27:27.110
Um, we've got it. Result.

NOTE Confidence: 0.790253485454545

01:27:27.110 --> 01:27:30.670
This is the unchecked form, so we don't.

NOTE Confidence: 0.790253485454545

01:27:30.670 --> 01:27:32.830
Worry about the parent thing here.

NOTE Confidence: 0.790253485454545

01:27:32.830 --> 01:27:37.660
Um, value initialized loop forever.

NOTE Confidence: 0.790253485454545

01:27:37.660 --> 01:27:39.790
Look at the first iterator

NOTE Confidence: 0.790253485454545

01:27:39.790 --> 01:27:41.038
through the projection stored.

NOTE Confidence: 0.790253485454545

01:27:41.038 --> 01:27:42.598
Invoke if that's equal to

NOTE Confidence: 0.790253485454545

01:27:42.598 --> 01:27:43.958
the value that we want.

NOTE Confidence: 0.790253485454545

01:27:43.960 --> 01:27:45.428
Remember result is first.

NOTE Confidence: 0.790253485454545

01:27:45.428 --> 01:27:48.209
There should be a new line between

NOTE Confidence: 0.790253485454545

01:27:48.209 --> 01:27:50.739
Unchained gift if statements style.

NOTE Confidence: 0.790253485454545

01:27:50.740 --> 01:27:55.388
There should be a new line between

NOTE Confidence: 0.790253485454545

01:27:55.388 --> 01:27:58.388
non chained if statements to make

NOTE Confidence: 0.790253485454545

01:27:58.388 --> 01:28:00.740
it clear where they begin and end.

NOTE Confidence: 0.790253485454545

01:28:00.740 --> 01:28:04.240
OK, so remembering the result.

NOTE Confidence: 0.790253485454545

01:28:04.240 --> 01:28:05.380
Sorry for scrolling up and down.

NOTE Confidence: 0.790253485454545

01:28:05.380 --> 01:28:06.778
Remember the result.

NOTE Confidence: 0.790253485454545

01:28:06.778 --> 01:28:08.176
We're looping forever.

NOTE Confidence: 0.790253485454545

01:28:08.180 --> 01:28:10.676
If the thing that we're looking at is

NOTE Confidence: 0.790253485454545

01:28:10.676 --> 01:28:13.298
the value then record it in the result.

NOTE Confidence: 0.790253485454545

01:28:13.300 --> 01:28:15.060
If not then don't update.

NOTE Confidence: 0.790253485454545

01:28:15.060 --> 01:28:18.010
Then after a new line step forward

NOTE Confidence: 0.790253485454545

01:28:18.010 --> 01:28:21.405
first if we have reached the last.

NOTE Confidence: 0.790253485454545

01:28:21.410 --> 01:28:26.198
Then that's bad. Ah.

NOTE Confidence: 0.790253485454545

01:28:26.200 --> 01:28:27.859
I'm saying ohh here because I'm like,

NOTE Confidence: 0.790253485454545

01:28:27.860 --> 01:28:29.128
have we verified that

NOTE Confidence: 0.790253485454545

01:28:29.128 --> 01:28:30.396
there's actually an element?

NOTE Confidence: 0.790253485454545

01:28:30.400 --> 01:28:31.525
We have not,

NOTE Confidence: 0.790253485454545

01:28:31.525 --> 01:28:31.900
right?

NOTE Confidence: 0.78017193

01:28:35.170 --> 01:28:37.557
This could totally be empty like this

NOTE Confidence: 0.78017193

01:28:37.557 --> 01:28:39.150
input could absolutely be empty.

NOTE Confidence: 0.798320521818182

01:28:41.510 --> 01:28:43.036
With no guarantee that we can look

NOTE Confidence: 0.798320521818182

01:28:43.036 --> 01:28:46.338
at an element here, so that's a bug.

NOTE Confidence: 0.798320521818182

01:28:46.340 --> 01:28:48.540
Yep. Interesting that this was

NOTE Confidence: 0.798320521818182

01:28:48.540 --> 01:28:50.740
not caught by test coverage.

NOTE Confidence: 0.798320521818182

01:28:50.740 --> 01:28:53.099
Why don't we pass them D ranges?

NOTE Confidence: 0.798320521818182

01:28:53.100 --> 01:28:55.700
I guess it depends on the algorithm, um.

NOTE Confidence: 0.697233776666667

01:28:57.980 --> 01:29:00.218
But that does indicate missing tests.

NOTE Confidence: 0.697233776666667

01:29:00.220 --> 01:29:02.390
I think we do have an empty

NOTE Confidence: 0.697233776666667

01:29:02.390 --> 01:29:04.224
range coverage test. Yeah. OK.

NOTE Confidence: 0.697233776666667

01:29:04.224 --> 01:29:06.936
I'm going to comment on this.

NOTE Confidence: 0.697233776666667

01:29:06.940 --> 01:29:11.236
Copied the test code from yeah OK,

NOTE Confidence: 0.697233776666667

01:29:11.236 --> 01:29:15.568
this is deep dereferencing.

NOTE Confidence: 0.697233776666667

01:29:15.570 --> 01:29:20.984
First um. Without a guarantee.

NOTE Confidence: 0.697233776666667

01:29:20.984 --> 01:29:23.576
Or just dereferencing first,

NOTE Confidence: 0.697233776666667

01:29:23.580 --> 01:29:24.960
but we haven't.

NOTE Confidence: 0.68434071

01:29:26.980 --> 01:29:28.192
Umm. I'll just say,

NOTE Confidence: 0.68434071

01:29:28.192 --> 01:29:30.010
but the range could be empty.

NOTE Confidence: 0.7227089

01:29:34.130 --> 01:29:37.802
Umm. This also indicates.

NOTE Confidence: 0.7227089

01:29:37.802 --> 01:29:40.790
Um. Missing test coverage.

NOTE Confidence: 0.760400248888889

01:29:43.800 --> 01:29:45.893
Do is uh, should I mention that

NOTE Confidence: 0.760400248888889

01:29:45.893 --> 01:29:47.449
result should probably be initialized

NOTE Confidence: 0.760400248888889

01:29:47.449 --> 01:29:49.237
to last to handle this case?

NOTE Confidence: 0.760400248888889

01:29:49.240 --> 01:29:52.666
Because like we got this right?

NOTE Confidence: 0.760400248888889

01:29:52.670 --> 01:29:54.806
Here, yeah, this loop is is.

NOTE Confidence: 0.760400248888889

01:29:54.810 --> 01:29:56.604
Uh, well, it's the last because

NOTE Confidence: 0.760400248888889

01:29:56.604 --> 01:29:58.410
it's not a common iterator.

NOTE Confidence: 0.760400248888889

01:29:58.410 --> 01:29:59.770
It's not like it's not.

NOTE Confidence: 0.760400248888889

01:29:59.770 --> 01:30:02.082
Ohh, you're right, yeah.

NOTE Confidence: 0.760400248888889

01:30:02.082 --> 01:30:06.000
So we we essentially need a um.

NOTE Confidence: 0.760400248888889

01:30:06.000 --> 01:30:08.160
A case here, I I hear your cat.

NOTE Confidence: 0.760400248888889

01:30:08.160 --> 01:30:11.169
Um, there's a.

NOTE Confidence: 0.760400248888889

01:30:11.170 --> 01:30:12.997
The cat is annoyed that we haven't

NOTE Confidence: 0.760400248888889

01:30:12.997 --> 01:30:14.989
verified that the the range is not empty.

NOTE Confidence: 0.760400248888889

01:30:14.990 --> 01:30:17.282
Um, so we say we essentially

NOTE Confidence: 0.760400248888889

01:30:17.282 --> 01:30:19.709
need a test coverage for non

NOTE Confidence: 0.760400248888889

01:30:19.709 --> 01:30:21.289
common ranges that are empty.

NOTE Confidence: 0.525621085

01:30:23.930 --> 01:30:26.358
Ranges that are empty.

NOTE Confidence: 0.525621085

01:30:26.360 --> 01:30:27.740
I forgot this one case or

NOTE Confidence: 0.525621085

01:30:27.740 --> 01:30:28.779
something like that, yeah.

NOTE Confidence: 0.525621085

01:30:28.779 --> 01:30:30.873
OK, so this is actually a

NOTE Confidence: 0.525621085

01:30:30.873 --> 01:30:31.920
slightly larger problem.

NOTE Confidence: 0.525621085

01:30:31.920 --> 01:30:33.402
I'm going to cancel this and

NOTE Confidence: 0.525621085

01:30:33.402 --> 01:30:35.190
comment on a large chunk of code.

NOTE Confidence: 0.525621085

01:30:35.190 --> 01:30:38.368
OK, so um, this is dereferencing first,

NOTE Confidence: 0.525621085

01:30:38.370 --> 01:30:39.780
but the range could be empty.

NOTE Confidence: 0.789103378

01:30:42.470 --> 01:30:46.210
Will need to actually just.

NOTE Confidence: 0.789103378

01:30:46.210 --> 01:30:48.408
In general, if we never find something,

NOTE Confidence: 0.789103378

01:30:48.410 --> 01:30:52.349
we need to return last. Do we ever?

NOTE Confidence: 0.789103378

01:30:52.350 --> 01:30:54.876
That's interesting, yeah.

NOTE Confidence: 0.789103378

01:30:54.876 --> 01:30:59.086
Both initialized Iterator comma first.

NOTE Confidence: 0.789103378

01:30:59.090 --> 01:31:01.130
It's attempted to be handled here,

NOTE Confidence: 0.789103378

01:31:01.130 --> 01:31:02.530
but it's conditional on

NOTE Confidence: 0.789103378

01:31:02.530 --> 01:31:04.630
if we hit the last here.

NOTE Confidence: 0.789103378

01:31:04.630 --> 01:31:06.142
Um, I don't know.

NOTE Confidence: 0.789103378

01:31:06.142 --> 01:31:07.084
Ohh, that's horrible.

NOTE Confidence: 0.789103378

01:31:07.084 --> 01:31:08.776
Yeah, this does take advantage of

NOTE Confidence: 0.789103378

01:31:08.776 --> 01:31:10.306
the fact that value initialized

NOTE Confidence: 0.789103378

01:31:10.306 --> 01:31:12.124
iterator should at least be equal,

NOTE Confidence: 0.789103378

01:31:12.130 --> 01:31:15.504
but but this is not valid for

NOTE Confidence: 0.789103378

01:31:15.504 --> 01:31:16.950
arbitrary iterators because.

NOTE Confidence: 0.789103378

01:31:16.950 --> 01:31:19.668
Assuming you have an iterator that.

NOTE Confidence: 0.789103378

01:31:19.670 --> 01:31:22.378
Doesn't participate in unwrapping

NOTE Confidence: 0.789103378

01:31:22.378 --> 01:31:24.409
and yet enforces.

NOTE Confidence: 0.789103378

01:31:24.410 --> 01:31:25.900
Same parent or same domain?

NOTE Confidence: 0.789103378

01:31:25.900 --> 01:31:27.370
This is trying to compare value

NOTE Confidence: 0.789103378

01:31:27.370 --> 01:31:29.249
initialized to a non value initialized.

NOTE Confidence: 0.789103378

01:31:29.250 --> 01:31:30.210
We can't do that.

NOTE Confidence: 0.789103378

01:31:30.210 --> 01:31:31.650
You can't do and everybody thinks

NOTE Confidence: 0.789103378

01:31:31.697 --> 01:31:33.578
you can't do it, but you can't.

NOTE Confidence: 0.789103378

01:31:33.578 --> 01:31:33.954
Yeah.

NOTE Confidence: 0.789103378

01:31:33.954 --> 01:31:36.692
And the the worst part or the

NOTE Confidence: 0.789103378

01:31:36.692 --> 01:31:38.667
most subtle part is that.

NOTE Confidence: 0.789103378

01:31:38.670 --> 01:31:40.038
Most the time you'll actually get

NOTE Confidence: 0.789103378

01:31:40.038 --> 01:31:41.598
away with this because we unwrap all

NOTE Confidence: 0.789103378

01:31:41.598 --> 01:31:42.998
of our cool layers of machinery and

NOTE Confidence: 0.789103378

01:31:43.040 --> 01:31:44.468
the four pointers will handle this.

NOTE Confidence: 0.789103378

01:31:44.470 --> 01:31:46.648
But you still shouldn't do this.

NOTE Confidence: 0.789103378

01:31:46.650 --> 01:31:48.390
All the standard iterators do this,

NOTE Confidence: 0.789103378

01:31:48.390 --> 01:31:50.148
but the concepts don't require it.

NOTE Confidence: 0.789103378

01:31:50.150 --> 01:31:51.473
Yeah, we yeah,

NOTE Confidence: 0.789103378

01:31:51.473 --> 01:31:53.678
we recently spent hours explaining

NOTE Confidence: 0.789103378

01:31:53.678 --> 01:31:56.624
this to herb for CPP 2,

NOTE Confidence: 0.789103378

01:31:56.624 --> 01:31:58.856
if I remember correctly.

NOTE Confidence: 0.789103378

01:31:58.860 --> 01:31:59.187
OK,

NOTE Confidence: 0.789103378

01:31:59.187 --> 01:32:02.130
so let's see so many things to explain here.

NOTE Confidence: 0.789103378

01:32:02.130 --> 01:32:03.159
This is dereferencing,

NOTE Confidence: 0.789103378

01:32:03.159 --> 01:32:04.188
so there's the.

NOTE Confidence: 0.762793858461538

01:32:07.480 --> 01:32:08.726
When I when I make two does

NOTE Confidence: 0.762793858461538

01:32:08.726 --> 01:32:09.840
I write them in all caps.

NOTE Confidence: 0.762793858461538

01:32:09.840 --> 01:32:11.160
As a reminder, don't actually

NOTE Confidence: 0.762793858461538

01:32:11.160 --> 01:32:12.480
hit publish before doing this

NOTE Confidence: 0.762793858461538

01:32:12.530 --> 01:32:13.830
value and then test coverage.

NOTE Confidence: 0.762793858461538

01:32:13.830 --> 01:32:16.338
OK, so this is dereferencing first,

NOTE Confidence: 0.762793858461538

01:32:16.340 --> 01:32:17.468
but the range could be empty.

NOTE Confidence: 0.564927676666667

01:32:21.660 --> 01:32:24.900
In the. Case.

NOTE Confidence: 0.771059954166667

01:32:27.860 --> 01:32:30.471
Said. In the uh. Let me begin

NOTE Confidence: 0.771059954166667

01:32:30.471 --> 01:32:32.630
by saying several issues here.

NOTE Confidence: 0.578041428

01:32:35.420 --> 01:32:37.840
All related. Is directing first,

NOTE Confidence: 0.578041428

01:32:37.840 --> 01:32:38.980
but the range could be empty,

NOTE Confidence: 0.578041428

01:32:38.980 --> 01:32:44.266
um when we don't find a result. Um.

NOTE Confidence: 0.578041428

01:32:44.266 --> 01:32:47.038
For example, because the range is empty.

NOTE Confidence: 0.7471158875

01:32:56.370 --> 01:32:57.766
Or it's not empty.

NOTE Confidence: 0.7471158875

01:32:57.766 --> 01:32:59.162
I'm gonna exhaustively mention

NOTE Confidence: 0.7471158875

01:32:59.162 --> 01:33:00.849
all the possible cases,

NOTE Confidence: 0.7471158875

01:33:00.850 --> 01:33:01.678
but nothing matched.

NOTE Confidence: 0.717126542

01:33:04.710 --> 01:33:08.956
OK, value in it. Uh, we need to return.

NOTE Confidence: 0.717126542

01:33:08.956 --> 01:33:12.384
Let me just refer to the standard's here.

NOTE Confidence: 0.717126542

01:33:12.384 --> 01:33:15.750
Last, last. Race.

NOTE Confidence: 0.717126542

01:33:15.750 --> 01:33:19.126
Last, last um. There's.

NOTE Confidence: 0.717126542

01:33:19.126 --> 01:33:23.346
Code below that attempts to.

NOTE Confidence: 0.717126542

01:33:23.350 --> 01:33:25.390
Achieve this with.

NOTE Confidence: 0.61051786

01:33:27.840 --> 01:33:28.750
Blah.

NOTE Confidence: 0.826410683333333

01:33:30.760 --> 01:33:35.471
Umm. But that is not allowed by

NOTE Confidence: 0.826410683333333

01:33:35.471 --> 01:33:41.160
the iterator requirements. Umm.

NOTE Confidence: 0.826410683333333

01:33:41.160 --> 01:33:46.638
Value initialized iterators.

NOTE Confidence: 0.826410683333333

01:33:46.640 --> 01:33:49.280
Are comparable with guaranteed equal.

NOTE Confidence: 0.824676138

01:33:53.200 --> 01:33:58.520
To other value initialized iterators.

NOTE Confidence: 0.824676138

01:33:58.520 --> 01:34:02.510
But they cannot be compared.

NOTE Confidence: 0.824676138

01:34:02.510 --> 01:34:05.870
To. Other iterators.

NOTE Confidence: 0.66123843

01:34:10.050 --> 01:34:10.968
Ones with parents.

NOTE Confidence: 0.683809631111111

01:34:14.150 --> 01:34:15.375
Should I say that I'll just say

NOTE Confidence: 0.683809631111111

01:34:15.375 --> 01:34:16.426
other iterators? I don't want to

NOTE Confidence: 0.683809631111111

01:34:16.426 --> 01:34:17.470
bring the parent thing in here.

NOTE Confidence: 0.726871993333333

01:34:19.550 --> 01:34:21.962
I'll mention parenthetically, um.

NOTE Confidence: 0.726871993333333

01:34:21.962 --> 01:34:24.276
In practice, um.

NOTE Confidence: 0.726871993333333

01:34:24.276 --> 01:34:28.700
Still iterators, uh, won't.

NOTE Confidence: 0.726871993333333

01:34:28.700 --> 01:34:31.568
Detect this issue.

NOTE Confidence: 0.726871993333333

01:34:31.570 --> 01:34:36.690
Because they participate in.

NOTE Confidence: 0.726871993333333

01:34:36.690 --> 01:34:41.810
Unwrapping. So. By the time we reach.

NOTE Confidence: 0.726871993333333

01:34:41.810 --> 01:34:43.547
This code. Um.

NOTE Confidence: 0.726871993333333

01:34:43.547 --> 01:34:47.600
The debug checks that would detect it.

NOTE Confidence: 0.68494538

01:34:50.470 --> 01:34:53.230
I've been unwrapped away.

NOTE Confidence: 0.850346825

01:34:56.960 --> 01:34:58.090
The standard.

NOTE Confidence: 0.5176763

01:35:00.780 --> 01:35:01.070
Fire.

NOTE Confidence: 0.927791452

01:35:03.990 --> 01:35:08.192
And it is totally possible. For user

NOTE Confidence: 0.927791452

01:35:08.192 --> 01:35:12.758
defined iterators to reject or two.

NOTE Confidence: 0.801566251818182

01:35:16.690 --> 01:35:20.566
I'm trying to avoid confusing negation

NOTE Confidence: 0.801566251818182

01:35:20.566 --> 01:35:24.320
to lack any unwrapping machinery.

NOTE Confidence: 0.801566251818182

01:35:24.320 --> 01:35:30.800
And simultaneously enforce the rule.

NOTE Confidence: 0.801566251818182

01:35:30.800 --> 01:35:33.266
Against comparing value.

NOTE Confidence: 0.801566251818182

01:35:33.266 --> 01:35:37.376
Initialize try will say parenthood

NOTE Confidence: 0.801566251818182

01:35:37.376 --> 01:35:39.736
with parented. Iterators.

NOTE Confidence: 0.801566251818182

01:35:39.736 --> 01:35:43.568
Um, OK, and then should I mention, yeah,

NOTE Confidence: 0.801566251818182

01:35:43.568 --> 01:35:45.020
I just mentioned this test coverage.

NOTE Confidence: 0.801566251818182

01:35:45.020 --> 01:35:49.420
Um, this indicates a lack.

NOTE Confidence: 0.801566251818182

01:35:49.420 --> 01:35:51.968
Of a test coverage.

NOTE Confidence: 0.801566251818182

01:35:51.970 --> 01:35:53.818
Or I guess I don't really care

NOTE Confidence: 0.801566251818182

01:35:53.818 --> 01:35:55.966
about the the value in it thing

NOTE Confidence: 0.801566251818182

01:35:55.966 --> 01:35:57.586
for the test coverage because

NOTE Confidence: 0.801566251818182

01:35:57.586 --> 01:35:59.884
that's kind of obscure the the the.

NOTE Confidence: 0.801566251818182

01:35:59.884 --> 01:36:01.912
The issue you filed about having

NOTE Confidence: 0.801566251818182

01:36:01.912 --> 01:36:03.947
test coverage with the parent

NOTE Confidence: 0.801566251818182

01:36:03.947 --> 01:36:05.977
iterator is may improve that,

NOTE Confidence: 0.801566251818182

01:36:05.980 --> 01:36:07.969
but at a minimum I do want to see

NOTE Confidence: 0.801566251818182

01:36:07.969 --> 01:36:09.770
test coverage for empty ranges.

NOTE Confidence: 0.801566251818182

01:36:09.770 --> 01:36:12.080
This indicates a lack of test

NOTE Confidence: 0.801566251818182

01:36:12.080 --> 01:36:13.620
coverage for empty ranges.

NOTE Confidence: 0.46014675

01:36:16.970 --> 01:36:20.787
Year. That are, um,

NOTE Confidence: 0.46014675

01:36:20.787 --> 01:36:23.481
this fundamental one would be used

NOTE Confidence: 0.46014675

01:36:23.481 --> 01:36:26.516
after this optimization is done for.

NOTE Confidence: 0.46014675

01:36:26.520 --> 01:36:28.130
Was it forward? Non common? Yes.

NOTE Confidence: 0.741296621666667

01:36:33.260 --> 01:36:36.410
Four non common in this case.

NOTE Confidence: 0.741296621666667

01:36:36.410 --> 01:36:39.860
OK, a lot of bullet points, um.

NOTE Confidence: 0.741296621666667

01:36:39.860 --> 01:36:41.232
We're like OK, final issue of the

NOTE Confidence: 0.741296621666667

01:36:41.232 --> 01:36:42.798
day and then it ends up being long.

NOTE Confidence: 0.741296621666667

01:36:42.800 --> 01:36:44.960
Um, several issues here are related.

NOTE Confidence: 0.741296621666667

01:36:44.960 --> 01:36:46.032
This is dereferencing first,

NOTE Confidence: 0.741296621666667

01:36:46.032 --> 01:36:47.640
but the range could be empty.

NOTE Confidence: 0.741296621666667

01:36:47.640 --> 01:36:48.618
When we don't find a result,

NOTE Confidence: 0.741296621666667

01:36:48.620 --> 01:36:49.915
for example because the range is empty

NOTE Confidence: 0.741296621666667

01:36:49.915 --> 01:36:51.478
or it's not empty but nothing matched,

NOTE Confidence: 0.741296621666667

01:36:51.480 --> 01:36:53.238
we need to return less last.

NOTE Confidence: 0.741296621666667

01:36:53.240 --> 01:36:55.263
There's code below that attempts to achieve

NOTE Confidence: 0.741296621666667

01:36:55.263 --> 01:36:57.477
this with if result is it brace brace.

NOTE Confidence: 0.741296621666667

01:36:57.480 --> 01:36:58.944
But that is not allowed by

NOTE Confidence: 0.741296621666667

01:36:58.944 --> 01:36:59.676
the iterator requirements.

NOTE Confidence: 0.741296621666667

01:36:59.680 --> 01:37:00.956
Value initialized iterators are

NOTE Confidence: 0.741296621666667

01:37:00.956 --> 01:37:02.551
comparable and guaranteed equal to

NOTE Confidence: 0.741296621666667

01:37:02.551 --> 01:37:04.160
other value initialized iterators,

NOTE Confidence: 0.741296621666667

01:37:04.160 --> 01:37:05.845
but they cannot be compared

NOTE Confidence: 0.741296621666667

01:37:05.845 --> 01:37:06.856
to other iterators.

NOTE Confidence: 0.741296621666667

01:37:06.860 --> 01:37:08.480
In practice, iterators won't detect

NOTE Confidence: 0.741296621666667

01:37:08.480 --> 01:37:10.280
this issue because they participated in.

NOTE Confidence: 0.741296621666667

01:37:10.280 --> 01:37:10.494
Unwrapping.

NOTE Confidence: 0.741296621666667

01:37:10.494 --> 01:37:12.206
So by the time we reach this code,

NOTE Confidence: 0.741296621666667

01:37:12.210 --> 01:37:13.620
the debug checks that would detect

NOTE Confidence: 0.741296621666667

01:37:13.620 --> 01:37:14.810
it have been unwrapped away.

NOTE Confidence: 0.741296621666667

01:37:14.810 --> 01:37:15.159
However,

NOTE Confidence: 0.741296621666667

01:37:15.159 --> 01:37:16.904
the standard however the standards

NOTE Confidence: 0.741296621666667

01:37:16.904 --> 01:37:18.642
requirements still apply and it's

NOTE Confidence: 0.741296621666667

01:37:18.642 --> 01:37:20.097
totally possible for user defined

NOTE Confidence: 0.741296621666667

01:37:20.097 --> 01:37:21.698
iterators to lack any unwrapping

NOTE Confidence: 0.741296621666667

01:37:21.698 --> 01:37:23.250
machinery and simultaneously enforce

NOTE Confidence: 0.741296621666667

01:37:23.250 --> 01:37:25.190
the rule against comparing value

NOTE Confidence: 0.741296621666667

01:37:25.190 --> 01:37:26.642
initialized with parented iterators.

NOTE Confidence: 0.741296621666667

01:37:26.642 --> 01:37:28.820
This indicates a lack of test

NOTE Confidence: 0.741296621666667

01:37:28.878 --> 01:37:30.363
coverage for empty ranges for

NOTE Confidence: 0.741296621666667

01:37:30.363 --> 01:37:31.848
non common in this case.

NOTE Confidence: 0.741296621666667

01:37:31.850 --> 01:37:32.209
OK,

NOTE Confidence: 0.741296621666667

01:37:32.209 --> 01:37:34.722
so this whole case needs a significant

NOTE Confidence: 0.741296621666667

01:37:34.722 --> 01:37:36.834
overhaul so I'm not going to

NOTE Confidence: 0.741296621666667

01:37:36.834 --> 01:37:38.826
spend too much time reviewing it,

NOTE Confidence: 0.741296621666667

01:37:38.830 --> 01:37:41.126
it is trying to do the right thing.

NOTE Confidence: 0.741296621666667

01:37:41.130 --> 01:37:44.103
Move result move first OK Umm

NOTE Confidence: 0.741296621666667

01:37:44.103 --> 01:37:47.598
very semi for the class and then

NOTE Confidence: 0.741296621666667

01:37:47.598 --> 01:37:48.918
export inline Casper fine less

NOTE Confidence: 0.741296621666667

01:37:48.918 --> 01:37:50.450
than fine last construct tag.

NOTE Confidence: 0.741296621666667

01:37:50.450 --> 01:37:52.970
OK so we got through we got through

NOTE Confidence: 0.741296621666667

01:37:52.970 --> 01:37:55.170
fine last who find last if fun and

NOTE Confidence: 0.741296621666667

01:37:55.170 --> 01:37:57.270
fine last not should be very similar.

NOTE Confidence: 0.741296621666667

01:37:57.270 --> 01:38:00.123
In fact when I go and re review this

NOTE Confidence: 0.741296621666667

01:38:00.130 --> 01:38:01.929
after changes have been made I think

NOTE Confidence: 0.741296621666667

01:38:01.929 --> 01:38:03.986
the first thing I'm gonna do is I'm

NOTE Confidence: 0.741296621666667

01:38:03.986 --> 01:38:05.491
gonna after checking find last I'm

NOTE Confidence: 0.741296621666667

01:38:05.491 --> 01:38:07.227
going to take find last if and find

NOTE Confidence: 0.741296621666667

01:38:07.227 --> 01:38:09.564
last if not I'm going to copy them

NOTE Confidence: 0.741296621666667

01:38:09.564 --> 01:38:11.500
into separate editor tabs and VS code.

NOTE Confidence: 0.741296621666667

01:38:11.500 --> 01:38:13.425
I'm just going to dip them because

NOTE Confidence: 0.741296621666667

01:38:13.425 --> 01:38:15.213
they should look very very similar

NOTE Confidence: 0.741296621666667

01:38:15.213 --> 01:38:17.223
with only the stuff around, um,

NOTE Confidence: 0.741296621666667

01:38:17.223 --> 01:38:20.872
how we test the predicate varying and any

NOTE Confidence: 0.741296621666667

01:38:20.872 --> 01:38:23.940
other variants I would want to look at.

NOTE Confidence: 0.741296621666667

01:38:23.940 --> 01:38:25.956
So other than that should be,

NOTE Confidence: 0.741296621666667

01:38:25.960 --> 01:38:27.680
and that would also detect things like notice

NOTE Confidence: 0.741296621666667

01:38:27.680 --> 01:38:29.120
card appearing on something not the other.

NOTE Confidence: 0.741296621666667

01:38:29.120 --> 01:38:29.462
Of course,

NOTE Confidence: 0.741296621666667

01:38:29.462 --> 01:38:30.317
it won't detect things that

NOTE Confidence: 0.741296621666667

01:38:30.317 --> 01:38:31.258
are common to all of them,

NOTE Confidence: 0.741296621666667

01:38:31.260 --> 01:38:33.164
but if we review find last first,

NOTE Confidence: 0.741296621666667

01:38:33.170 --> 01:38:36.240
then find last as the first thing we look at,

NOTE Confidence: 0.741296621666667

01:38:36.240 --> 01:38:38.886
then we can have high confidence that

NOTE Confidence: 0.741296621666667

01:38:38.886 --> 01:38:41.406
the rest will be appropriately updated.

NOTE Confidence: 0.741296621666667

01:38:41.406 --> 01:38:43.254
OK, so that's good.

NOTE Confidence: 0.741296621666667

01:38:43.260 --> 01:38:45.318
I'm not going to mark this as

NOTE Confidence: 0.741296621666667

01:38:45.318 --> 01:38:47.295
entirely viewed and I'll come back

NOTE Confidence: 0.741296621666667

01:38:47.295 --> 01:38:49.020
and review test coverage later.

NOTE Confidence: 0.741296621666667

01:38:49.020 --> 01:38:49.743
We know that.

NOTE Confidence: 0.741296621666667

01:38:49.743 --> 01:38:52.013
We know that the test will need to be

NOTE Confidence: 0.741296621666667

01:38:52.013 --> 01:38:53.847
expanded for the issues that we found.

NOTE Confidence: 0.741296621666667

01:38:53.850 --> 01:38:56.895
Um, so here, just glancing at this,

NOTE Confidence: 0.741296621666667

01:38:56.900 --> 01:38:58.550
this test does seem plausible.

NOTE Confidence: 0.741296621666667

01:38:58.550 --> 01:38:58.873
Um,

NOTE Confidence: 0.741296621666667

01:38:58.873 --> 01:39:00.811
it does need to be expanded

NOTE Confidence: 0.741296621666667

01:39:00.811 --> 01:39:02.400
somewhat like I can see,

NOTE Confidence: 0.741296621666667

01:39:02.400 --> 01:39:03.340
like we don't have missing,

NOTE Confidence: 0.741296621666667

01:39:03.340 --> 01:39:04.588
we don't have empty range of

NOTE Confidence: 0.741296621666667

01:39:04.588 --> 01:39:05.420
coverage because we always

NOTE Confidence: 0.718529726875

01:39:05.464 --> 01:39:06.640
use a haystack of three things.

NOTE Confidence: 0.869928214545455

01:39:08.970 --> 01:39:10.182
It makes me a little nervous

NOTE Confidence: 0.869928214545455

01:39:10.182 --> 01:39:11.320
that this is so small.

NOTE Confidence: 0.832670980666667

01:39:14.300 --> 01:39:16.197
There are at least found enough found

NOTE Confidence: 0.832670980666667

01:39:16.197 --> 01:39:18.776
cases so the the the reason why I said it

NOTE Confidence: 0.832670980666667

01:39:18.776 --> 01:39:20.809
makes me nervous is we've had a couple

NOTE Confidence: 0.832670980666667

01:39:20.809 --> 01:39:22.942
of other issues where we have found bugs.

NOTE Confidence: 0.832670980666667

01:39:22.942 --> 01:39:24.706
For example because the only things

NOTE Confidence: 0.832670980666667

01:39:24.706 --> 01:39:26.764
we passed to 1 algorithm were like

NOTE Confidence: 0.832670980666667

01:39:26.764 --> 01:39:28.829
less than 32 elements and we had a

NOTE Confidence: 0.832670980666667

01:39:28.829 --> 01:39:30.888
bug that occurred as soon as we had 33

NOTE Confidence: 0.832670980666667

01:39:30.888 --> 01:39:32.610
elements or more because there was a

NOTE Confidence: 0.832670980666667

01:39:32.671 --> 01:39:34.642
there was a check in the code that hey

NOTE Confidence: 0.832670980666667

01:39:34.642 --> 01:39:36.795
if it's small use like insertion sort.

NOTE Confidence: 0.832670980666667

01:39:36.800 --> 01:39:39.296
So net most code doesn't have.

NOTE Confidence: 0.832670980666667

01:39:39.300 --> 01:39:39.780
Excuse me.

NOTE Confidence: 0.70850155

01:39:42.460 --> 01:39:43.440
Most code doesn't have that

NOTE Confidence: 0.70850155

01:39:43.440 --> 01:39:44.420
sort of dependency on length,

NOTE Confidence: 0.70850155

01:39:44.420 --> 01:39:46.338
so here I don't specifically believe that

NOTE Confidence: 0.70850155

01:39:46.338 --> 01:39:48.578
we need like huge haystacks or anything,

NOTE Confidence: 0.70850155

01:39:48.580 --> 01:39:51.317
but we were certainly missing empty cases.

NOTE Confidence: 0.70850155

01:39:51.320 --> 01:39:52.832
It doesn't immediately occur to me whether

NOTE Confidence: 0.70850155

01:39:52.832 --> 01:39:54.160
there's anything else we're missing here,

NOTE Confidence: 0.70850155

01:39:54.160 --> 01:39:56.888
but I'll come back and review this later.

NOTE Confidence: 0.872161705

01:39:59.100 --> 01:40:01.740
OK. I'll go ahead and submit this review.

NOTE Confidence: 0.872161705

01:40:01.740 --> 01:40:04.594
Uh, I'll just uh yeah, I think this

NOTE Confidence: 0.872161705

01:40:04.594 --> 01:40:06.060
is definitely request changes, so.

NOTE Confidence: 0.855114233333333

01:40:09.610 --> 01:40:12.346
There we go. And I think that does it.

NOTE Confidence: 0.855114233333333

01:40:12.350 --> 01:40:14.582
So thank you for, uh, sticking with

NOTE Confidence: 0.855114233333333

01:40:14.582 --> 01:40:15.990
us until the end of this code review.

NOTE Confidence: 0.855114233333333

01:40:15.990 --> 01:40:17.242
I believe this one,

NOTE Confidence: 0.855114233333333

01:40:17.242 --> 01:40:19.630
this one will be our last of 2022.

NOTE Confidence: 0.855114233333333

01:40:19.630 --> 01:40:21.730
So we will see you next year.

NOTE Confidence: 0.855114233333333

01:40:21.730 --> 01:40:22.399
Thanks for watching.
